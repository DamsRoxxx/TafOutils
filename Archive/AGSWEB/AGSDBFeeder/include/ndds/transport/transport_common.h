/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)transport_common.h    generated by: makeheader    Fri Feb 16 13:51:33 2018
 *
 *		built from:	common.ifc
 */

#ifndef transport_common_h
#define transport_common_h


#ifndef osapi_type_h
#include "osapi/osapi_type.h"
#endif

#ifndef reda_buffer_h
#include "reda/reda_buffer.h"
#endif

#ifndef transport_dll_h
#include "transport/transport_dll.h"
#endif

/* Include the APIs useful for the transport plugin user */
#ifndef transport_common_user_h
  #include "transport/transport_common_user.h"
#endif

#ifdef __cplusplus
    extern "C" {
#endif


typedef RTI_UINT32 NDDS_Transport_Port_t;


#define NDDS_TRANSPORT_PORT_INVALID ((NDDS_Transport_Port_t) 0) 

 
typedef enum {
  /*e 
    \brief The transport interface is OFF.
   */
  NDDS_TRANSPORT_INTERFACE_OFF  = 0,
  /*e 
    \brief The transport interface is ON.
   */
  NDDS_TRANSPORT_INTERFACE_ON   = 1
} NDDS_Transport_Interface_Status_t;

 
typedef struct {
     /*e 
       \brief The transport classid of the interface.
      */
     NDDS_Transport_ClassId_t transport_classid;
     
     /*e 
       \brief An unicast address that uniquely identifies this 
       interface in the network specified by the transport class.
      */    
     NDDS_Transport_Address_t address; 

    /*e
      \brief The state of the interface
     */
    NDDS_Transport_Interface_Status_t status;
     
} NDDS_Transport_Interface_t;

extern NDDS_Transport_DllExport 
void NDDS_Transport_Interface_print(
    const NDDS_Transport_Interface_t *interface_in, 
    const char                       *desc_in, 
    RTI_INT32                         indent_in);


#define NDDS_TRANSPORT_PRIORITY_DEFAULT (0)

typedef struct REDABuffer NDDS_Transport_Buffer_t;


#define NDDS_Transport_Buffer_t_compare(transportBuffer1, transportBuffer2) \
      (((transportBuffer1)->length < (transportBuffer2)->length) ? -1 : \
       (((transportBuffer1)->length > (transportBuffer2)->length) ?  1 : \
        (((transportBuffer1)->pointer < (transportBuffer2)->pointer) ? -1 : \
         (((transportBuffer1)->pointer > (transportBuffer2)->pointer) ? 1 : 0 ))))


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "transport/transport_common_impl.h"

#endif /* transport_common_h */
