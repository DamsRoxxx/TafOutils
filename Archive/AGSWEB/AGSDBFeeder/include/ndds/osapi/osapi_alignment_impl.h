/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)osapi_alignment_impl.h    generated by: makeheader    Fri Feb 16 13:51:08 2018
 *
 *		built from:	alignment_impl.ifc
 */

#ifndef osapi_alignment_impl_h
#define osapi_alignment_impl_h



#if defined(RTI_WINCE)
#include <windows.h>
#endif

#include <stddef.h>

#ifndef osapi_type_h
  #include "osapi/osapi_type.h"
#endif

#ifdef __cplusplus
    extern "C" {
#endif


/* Explicit cast to numeric type required because 
   cannot use bit AND "&" operator with pointer operands.
   This requires explicit knowledge of the size of the pointer. */
#ifdef RTI_64BIT
#define RTIOsapiAlignment_alignAddressUpMacro(location, alignment) \
    ((void *)((((RTI_UINT64)(location)) + ((alignment) - 1)) & ~((alignment) - 1)))

#define RTIOsapiAlignment_isAligned(location, alignment) \
    ((((RTI_UINT64)(location)) % (alignment)) == 0)

#else
#define RTIOsapiAlignment_alignAddressUpMacro(location, alignment) \
    ((void *)((((RTI_UINT32)(location)) + ((alignment) - 1)) & ~((alignment) - 1)))

#define RTIOsapiAlignment_isAligned(location, alignment) \
    ((((RTI_UINT32)(location)) % (alignment)) == 0)

#endif

#define RTIOsapiAlignment_alignSizeUpMacro(size, alignment) \
    (((size) + ((alignment) - 1)) & ~((alignment) - 1))

#ifndef RTI_PRECONDITION_TEST
#define RTIOsapiAlignment_alignAddressUp(location, alignment) \
    RTIOsapiAlignment_alignAddressUpMacro(location, alignment)
    
#define RTIOsapiAlignment_alignSizeUp(size, alignment) \
    RTIOsapiAlignment_alignSizeUpMacro(size, alignment)
#endif


#define RTIOsapiAlignment_isValid(alignment) \
    ( ((alignment) > 0) && \
      (((alignment) & (-alignment)) == (alignment)) )


#if defined(RTI_WIN32) || defined(RTI_WINCE)

  #define RTIOsapiAlignment_getAlignmentOf(testType) \
    __alignof(testType)

#else

  #define RTIOsapiAlignment_getAlignmentOf(testType) \
    offsetof (struct { char c; testType member; }, member)

#endif /* defined(RTI_WIN32) */
    

/* ----------------------------------------------------------------- */
/* This structure is used to calculate alignment; it should be a
   union of all possible C data-types */
union RTIOsapiAlignmentUnionOfAllDataTypes {
    int i;
    long l;
    float f;
    double d;
    long double ld;
    void *vp;
    int (*ifp)(int);
};

struct RTIOsapiAlignmentStructContainingUnionOfAllDataTypes {
    char c;
    union RTIOsapiAlignmentUnionOfAllDataTypes member;
};

/*
getAlignmentOf doesn't work when compiling C++ file with cc compiler because
we are not allowed to cast a struct definition. Below is a temporary fix
for now and should be replaced by getAligmentOf() once it is fixed.

#define RTIOsapiAlignment_getDefaultAlignment() \
    RTIOsapiAlignment_getAlignmentOf(union RTIOsapiAlignmentUnionOfAllDataTypes)
*/
#define RTIOsapiAlignment_getDefaultAlignment() \
    offsetof(struct RTIOsapiAlignmentStructContainingUnionOfAllDataTypes, \
             member)



#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* osapi_alignment_impl_h */
