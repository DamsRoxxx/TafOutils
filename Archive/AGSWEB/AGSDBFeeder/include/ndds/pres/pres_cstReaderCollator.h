/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)pres_cstReaderCollator.h    generated by: makeheader    Fri Feb 16 13:51:43 2018
 *
 *		built from:	cstReaderCollator.ifc
 */

#ifndef pres_cstReaderCollator_h
#define pres_cstReaderCollator_h


  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef reda_fastBuffer_h
    #include "reda/reda_fastBuffer.h"
  #endif
  #ifndef reda_worker_h
    #include "reda/reda_worker.h"
  #endif
  #ifndef pres_dll_h
    #include "pres/pres_dll.h"
  #endif
  #ifndef pres_common_h
    #include "pres/pres_common.h"
  #endif
  #ifndef pres_readerStatistics_h
    #include "pres/pres_readerStatistics.h"
  #endif
  #ifndef pres_typePlugin_h
    #include "pres/pres_typePlugin.h"
  #endif
  #ifndef pres_participant_h
    #include "pres/pres_participant.h"
  #endif
  #ifndef pres_psReaderWriter_h
    #include "pres/pres_psReaderWriter.h"
  #endif

  #include "pres/pres_readerQueue.h"

#ifdef __cplusplus
    extern "C" {
#endif


#define PRES_CST_READER_COLLATOR_INSTANCE_ORDER_ACCESS_KIND_PROPERTY "dds.data_reader.queue.instance_order_access_kind"
#define PRES_CST_READER_COLLATOR_EFFECTIVE_ORDERED_ACCESS_PROPERTY "dds.data_reader.queue.effective_ordered_access"
#define PRES_CST_READER_COLLATOR_EFFECTIVE_ACCESS_SCOPE_PROPERTY "dds.data_reader.queue.effective_access_scope"

struct PRESCstReaderCollatorRemoteWriterQueue;

struct PRESPsService_QueryConditionState;

struct PRESReaderQueueIndexCondition;

struct PRESCstReaderCollator;

struct PRESCstReaderCollatorProperty {
    /*e Owner of this collator. */
    struct MIGRtpsGuid readerGuid;

    /*e Virtual Reader GUID */
    struct MIGRtpsGuid virtualReaderGuid;
    
    /*e TopicQuery GUID */
    /* The DataReader queue will process only samples associated with 
     * this TopicQuery */
    struct PRESOctetGuid topicQueryGuid;

    /*e Control growth in number of samples. */
    struct REDAFastBufferPoolGrowthProperty sampleCount;

    /*e The maximum allowable number of samples per remote writer. */
    int maximalSamplePerRemoteWriterCount;

    /*e Control growth in number of remote writers. */
    struct REDAFastBufferPoolGrowthProperty remoteWriterCount;

    /*e Control growth in number of virtual remote writers. */
    struct REDAFastBufferPoolGrowthProperty virtualWriterCount;

    /*e The maximum allowable number of samples per instance. */
    int maximalSamplePerInstanceCount;

    /*e Instance hash buckets. */
    int instanceHashBuckets;

    /*e Control growth in number of instances. */
    struct REDAFastBufferPoolGrowthProperty registeredInstanceCount;
    struct REDAFastBufferPoolGrowthProperty instanceCount;

    /*e Control growth in number of remote writers per instance. */
    struct REDAFastBufferPoolGrowthProperty remoteWriterCountPerInstance;

    /*e Control growth in number of remote writers per instance. */
    struct REDAFastBufferPoolGrowthProperty virtualWriterCountPerInstance;

    /*e Control growth in number of infos. */
    struct REDAFastBufferPoolGrowthProperty infoCount;

    /*e Control growth in number of concurrent reads. */
    struct REDAFastBufferPoolGrowthProperty outstandingReadCount;

    /*e The maximum samples that can be returned from read, to address #9375 */
    int maximalSamplesPerRead;
    /*e The maximum number of QueryConditionFilters allowed per Reader */
    int maximumQueryConditionFilters;
    /*e The reliability QoS. */
    struct PRESReliabilityQosPolicy reliabilityQos;
    /*e The presentation QoS. */
    struct PRESPresentationQosPolicy presentationQos;
    /*e The deadline QoS.
      A period set to RTI_NTP_TIME_MAX is interpreted as infinite.  In addition,
      the period may not exceed PRES_DEADLINE_QOS_POLICY_DEADLINE_PERIOD_MAX. */
    struct PRESDeadlineQosPolicy deadlineQos;
    /*e The ownership QoS. */
    struct PRESOwnershipQosPolicy ownershipQos;
    /*e Indicates whether or not ownership has to be applied based on virtual GUID */
    RTIBool virtualOwnership;
    /* The destination order QoS */
    struct PRESDestinationOrderQosPolicy destinationOrderQos;
    /*e The time based filter QoS.  The minimumSeparation may not exceed 
      PRES_TIME_BASED_FILTER_QOS_POLICY_MINIMUM_SEPARATION_MAX. */
    struct PRESTimeBasedFilterQosPolicy timeBasedFilterQos;
    /*e The history QoS. */
    struct PRESHistoryQosPolicy historyQos;
    /*e The reader data lifecycle QoS. */
    struct PRESReaderDataLifecycleQosPolicy readerDataLifecycleQos;
    /*e The durability Qos */
    struct PRESDurabilityQosPolicy durabilityQos;
    /*e The service Qos */
    struct PRESServiceQosPolicy serviceQos;

    struct PRESTypeSupportQosPolicy typeSupport;

    /*e Restore reader queue state */
    /* This member is used when the reader state can be retrieved from a persistence storage */
    RTIBool restoreState;

    /*e Virtual reliability settings */
    PRESVirtualReliabilityKind virtualReliabilityKind;
    struct PRESAvailabilityQosPolicy availabilityQosPolicy;

    /* This property is used to filter old samples by source timestamp */
    RTIBool filterOldSamples;

    int requestDepth;

    int checkpointFrequency;

    /* This boolean specifies whether or not the instances returned by the
       read/take operations should be ordered by keyhash 
       Ordering by keyhash introduces perfromance degradation
    */
    RTIBool instanceOrderAccessByKeyhash;

    /* Indicates if the dispose of unregister instances must be propagated */
    RTIBool propagateDisposeOfUnregisterInstances;

    /* Indicates if the unregister of disposed instances must be propagated */
    RTIBool propagateUnregisterOfDisposedInstances;

    /*e The maximum allowable number of remote writers per virtual sample */
    int maximalRemoteWritersPerSample;

    /*e When this flag is true the PERSISTENT DataReaders will not communicate reliable 
        with the original writers. Reliability will be done only with persistence services
        writers */
    RTIBool delegateReliability;

    /*e The max length of the payload that can be sent with application
        acknowledgements. Determined by reader resource limits QoS */
    int appAckUserDataMaxLength;

    /*e The minimum time the payload will be available for 
        late-joining writers */
    struct RTINtpTime appAckUserDataMinKeepDuration;

    /* With appAckImmediateSend, batch this number of acks per
       remote writer before sending a message */
    int samplesPerAppAck;
    
    /* The reader count will be needed for GROUP access */
    struct REDAFastBufferPoolGrowthProperty readerCount;

    /* The remote writer count will be needed for GROUP access */
    struct REDAFastBufferPoolGrowthProperty discoveryRemoteWriterCount;
    /* This property is used to force the query condition filter to pass not
     * alive samples, independently of their content. */
    RTIBool _queryConditionAlwaysPassNotAliveSamples;
    /* For Testing Only: Indicates if filtering has to be performed always
       on serialized data */
    RTIBool _alwaysFilterOnSerialized;
    
    /* Pool buffer threshold to store the serialized key
       Set with the property NDDS_DRHISTORY_MEMORYMANAGER_FASTPOOL_POOLBUFFERMAXSIZE */
    int cdrPoolBufferThreshold;

    /* CORE-7296 */
    RTIBool use42eAlignment;

    /* Whether or not to purge all state for disposed or unregistered instances
       before reaching the limit imposed by max_total_instances */
    RTIBool keepMinimumStateForInstances;

    /* Indicates if the keyhash generation is secure. This is set to TRUE
     * when data protection kind is set to ENCRYPTION or the test property
     * dds.type_plugin.force_md5_keyhash is set to true
     */
    RTIBool forceMD5KeyHash;

    /* CORE-7714 */
    RTIBool generateSampleHash;

    /* Set to RTI_TRUE when the property
     * "dds.data_reader.deserialize_sample_signature" is set to 1
     */
    RTIBool deserializeSampleSignature;

    /* Topic name of the reader queue CORE-7751 */
    char *topicName;

    /* Topic name of the reader queue CORE-7751 */
    char *typeName;
};


#define PRES_CST_READER_COLLATOR_PROPERTY_DEFAULT {      \
    /* readerGuid */ \
    MIG_RTPS_GUID_UNKNOWN, \
    /* virtualReaderGuid */ \
    MIG_RTPS_GUID_UNKNOWN, \
    PRES_OCTET_GUID_ZERO, \
    /* sampleCount */                           \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    -1,  /* maximalEntryPerRemoteWriterCount: unlimited */ \
    /* remoteWriterCount */ \
    {2, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* virtualWriterCount */ \
    {2, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    -1,  /* maximalSamplePerInstanceCount: unlimited */     \
    1, /* instanceHashBuckets */ \
    /* registeredInstanceCount */                        \
    {8, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* instanceCount */                        \
    {8, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* remoteWriterCountPerInstance */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* virtualWriterCountPerInstance */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* infoCount */ \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* outstandingReadCount */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    256, /* maximalSamplesPerRead */                       \
    0, /* maximumQueryConditionFilters */                  \
    PRES_BEST_EFFORT_RELIABILITY_QOS_POLICY_DEFAULT,     \
    {PRES_TOPIC_PRESENTATION_QOS,RTI_FALSE,RTI_TRUE},      \
    {RTI_NTP_TIME_MAX},                                    \
    {PRES_SHARED_OWNERSHIP_QOS},                           \
    RTI_FALSE,                                             \
    {PRES_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,     \
     PRES_INSTANCE_SCOPE_DESTINATIONORDER_QOS,             \
     {30, 0} },                                    \
    {RTI_NTP_TIME_ZERO},                                   \
    {PRES_KEEP_LAST_HISTORY_QOS,PRES_NONE_REFILTER_QOS,1}, \
    PRES_READER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT,/* readerDataLifecycleQos */ \
    {PRES_VOLATILE_DURABILITY_QOS,RTI_TRUE}, /* durability qos policy */\
    {PRES_NO_SERVICE_QOS}, /* service qos policy */\
    PRES_TYPE_SUPPORT_QOS_POLICY_DEFAULT, /* typeSupport */\
    RTI_FALSE, \
    PRES_BEST_EFFORT_VIRTUAL_RELIABILITY, /* virtualReliabilityKind */ \
    PRES_AVAILABILITY_QOS_POLICY_DEFAULT, /* availabilityQosPolicy */ \
    RTI_FALSE, /* filterOldSamples */ \
    0, /* requestDepth */ \
    1, /* checkpointFrequency */ \
    RTI_FALSE, /* instanceOrderAccessByKeyhash */ \
    RTI_FALSE, /* propagateDisposeOfUnregisterInstances */ \
    RTI_FALSE, /* propagateUnregisterOfDisposedInstances */ \
    5, \
    RTI_FALSE, \
    0, /* appAckUserDataMaxLength */ \
    RTI_NTP_TIME_ZERO, /* appAckUserDataMinKeepDuration */ \
    1, /* samplesPerAppAck */ \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, /* readerCount */ \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, /* discoveryRemoteWriterCount */ \
    RTI_FALSE, /* _queryConditionAlwaysPassNotAliveSamples */\
    RTI_FALSE, /* _alwaysFilterOnSerialized */ \
    PRES_LENGTH_UNLIMITED, /* cdrPoolBufferThreshold */ \
    RTI_FALSE, /* use42eAlignment */ \
    RTI_TRUE, /* keepMinimumStateForInstances */ \
    RTI_FALSE, /* forceMD5KeyHash */ \
    RTI_FALSE, /* generateSampleHash */ \
    RTI_FALSE, /* deserializeSampleSignature */ \
    NULL, /* topicName */ \
    NULL /* typeName */ \
    }


  #define PRES_CST_READER_COLLATOR_GET_FAILURE_INTERNAL (1)


  #define PRES_CST_READER_COLLATOR_GET_FAILURE_NO_INSTANCE (2)


  #define PRES_CST_READER_COLLATOR_GET_FAILURE_OUT_OF_RESOURCES (3)

extern PRESDllExport RTIBool
PRESCstReaderCollator_hasOutstandingLoans(
    struct PRESCstReaderCollator *me,
    struct REDAWorker *worker);

  
    #define PRES_CST_READER_COLLATOR_READ_TAKE_MAX_COUNT_UNLIMITED (-1)

extern PRESDllExport RTIBool
PRESCstReaderCollator_take(
    struct PRESCstReaderCollator *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount, int maxCount,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask,
    PRESInstanceStateMask iMask,
    int filterIndex,
    struct PRESReaderQueueIndexCondition * indexCondition,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_read(
    struct PRESCstReaderCollator *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount, int maxCount,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask,
    PRESInstanceStateMask iMask,
    int filterIndex,
    struct PRESReaderQueueIndexCondition * indexCondition,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport void
PRESCstReaderCollator_finish(
    struct PRESCstReaderCollator *me,
    void **dataArray, int dataCount,
    struct PRESLoanedSampleInfo **infoArray, int infoCount,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_takeInstance(
    struct PRESCstReaderCollator *me, int *successReason, int *failReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask,
    PRESInstanceStateMask iMask,
    int filterIndex,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_readInstance(
    struct PRESCstReaderCollator *me, int *successReason, int *failReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask,
    PRESInstanceStateMask iMask,
    int filterIndex,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_takeNextInstance(
    struct PRESCstReaderCollator *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount, int maxCount,
    const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask,
    PRESInstanceStateMask iMask,
    int filterIndex,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_readNextInstance(
    struct PRESCstReaderCollator *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount, int maxCount,
    const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask,
    PRESInstanceStateMask iMask,
    int filterIndex,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_takeNextSample(
    struct PRESCstReaderCollator *me, RTIBool *validSample,
    void *data, struct PRESSampleInfo *info,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_readNextSample(
    struct PRESCstReaderCollator *me, RTIBool *validSample,
    void *data, struct PRESSampleInfo *info,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_getKey(
    struct PRESCstReaderCollator *me, int *failReason, void *instance,
    const struct PRESInstanceHandle *handle, struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_getKeyX(
    struct PRESCstReaderCollator *me, int *failReason, void *key,
    const struct PRESInstanceHandle *handle, struct REDAWorker *worker);

extern PRESDllExport struct PRESCstReaderCollatorRemoteWriterQueue *
PRESCstReaderCollator_getRemoteWriterQueue(
    struct PRESCstReaderCollator *me, int *failReason, 
    struct REDASequenceNumber * lastAppProcessedSn,
    const struct MIGRtpsGuid *guid,
    const struct MIGRtpsGuid *virtualGuid,
    const struct MIGRtpsGuid *groupVirtualGuid,
    const struct PRESLifespanQosPolicy *lifespanQos,
    const struct PRESDurabilityQosPolicy * durabilityQos,
    const struct PRESServiceQosPolicy * serviceQos,
    const struct PRESEntityNameQosPolicy * entityNameQos,
    const struct PRESPresentationQosPolicy * presentationQos,
    const struct PRESPropertyQosPolicy * propertyQos,
    RTIBool isSessionRemoteWriter);

extern PRESDllExport struct REDAInlineListUserDataNode *
PRESCstReaderCollator_getRemoteWriterQueueNode(
    struct PRESCstReaderCollator *me,
    struct PRESCstReaderCollatorRemoteWriterQueue * queue);

extern PRESDllExport struct PRESCstReaderCollator *
PRESCstReaderCollatorRemoteWriterQueue_getReaderQueue(
    struct PRESCstReaderCollatorRemoteWriterQueue * queue);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_returnRemoteWriterQueue(
    struct PRESCstReaderCollator *me, 
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    const struct RTINtpTime* receptionTsIn,
    const struct RTINtpTime* now,
    RTIBool addNotAliveSamples);

extern PRESDllExport 
RTIBool PRESCstReaderCollator_returnAllRemoteWriterQueues(
        struct PRESCstReaderCollator *me);

extern PRESDllExport struct PRESCstReaderCollatorRemoteWriterQueue* 
PRESCstReaderCollator_findRemoteWriterQueue(
    const struct PRESCstReaderCollator* me,
    const struct MIGRtpsGuid* virtualGuid);

extern PRESDllExport void 
PRESCstReaderCollator_activateRemoteWriterQueue(
    struct PRESCstReaderCollator *me, 
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_inactivateRemoteWriterQueue(
    struct PRESCstReaderCollator *me, 
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    const struct RTINtpTime* receptionTsIn,
    const struct RTINtpTime* now);

extern PRESDllExport void 
PRESCstReaderCollator_addQueryConditionFilter(
    struct PRESCstReaderCollator *me,
    int index,
    RTI_UINT32 systemKey,
    void *handle,
    PRESContentFilterEvaluate evaluate,
    PRESContentFilterEvaluate evaluateOnSerialized,
    void *filterData,
    RTIBool isKeyOnlyFilter,
    RTIBool isBuiltin,
    struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport void 
PRESCstReaderCollator_removeQueryConditionFilter(
    struct PRESCstReaderCollator *me, int index);

extern PRESDllExport void 
PRESCstReaderCollator_beginInstanceIteration(struct PRESCstReaderCollator *me);

extern PRESDllExport void 
PRESCstReaderCollator_endInstanceIteration(struct PRESCstReaderCollator *me);

extern PRESDllExport struct PRESCstReaderCollatorInstance *
PRESCstReaderCollator_getInstanceIteration(struct PRESCstReaderCollator *me);

extern PRESDllExport void 
PRESCstReaderCollator_getInstanceHandle(
    struct PRESCstReaderCollator *me, 
    struct PRESInstanceHandle *handle, 
    struct PRESCstReaderCollatorInstance *instance);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_checkInstanceDeadline(
    struct PRESCstReaderCollator *me, 
    struct RTINtpTime *nextDeadline, struct RTINtpTime *now, 
    struct PRESCstReaderCollatorInstance *instance);

typedef RTIBool (*PRESCstReaderCollatorTransformSampleFunction)(
    void *out, const void *in, void *transformOption);

typedef enum {
    PRES_CST_READER_COLLATOR_SAMPLE_KIND_DATA       = 0x00,
    PRES_CST_READER_COLLATOR_SAMPLE_KIND_DISPOSED   = 0x01,
    PRES_CST_READER_COLLATOR_SAMPLE_KIND_NO_WRITERS = 0x02
} PRESCstReaderCollatorSampleKind;

extern PRESDllExport RTIBool 
PRESCstReaderCollator_addSample(
    struct PRESCstReaderCollator *me, 
    RTIBool *dataAvailable, RTIBool *sampleLost, 
    PRESSampleLostStatusKind *lostReason,
    RTIBool *sampleRejected, 
    PRESSampleRejectedStatusKind *rejectedReason, 
    struct MIGRtpsKeyHash *rejectedInstanceKeyHash,
    PRESCstReaderCollatorTransformSampleFunction transformFnc, 
    const void *data, void *transformOption,
    const struct MIGRtpsGuid *remoteWriterGuid, 
    const struct MIGRtpsKeyHash *keyHash,
    const struct RTINtpTime *sourceTimestamp, 
    PRESCstReaderCollatorSampleKind sampleKind, 
    const struct RTINtpTime *receptionTimestamp, 
    const struct RTINtpTime *now, 
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_newAnonData(
    struct PRESCstReaderCollator *me,
    RTIBool *dataAvailable, int *lostCount, 
    PRESSampleLostStatusKind *lostReason,
    int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsKeyHash *rejectedInstanceKeyHash,
    const struct COMMENDReaderServiceData *data,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_newData(
    struct PRESCstReaderCollator *me,
    RTIBool *dataAvailable, int *lostCount, 
    PRESSampleLostStatusKind *lostReason,
    int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsKeyHash *rejectedInstanceKeyHash,
    int *receivedInlineQosBitmap,
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    const struct REDASequenceNumber *firstRelevantRangeEndSn,
    RTIBool isMatching,
    const struct COMMENDReaderServiceData *data, 
    const struct PRESReaderServiceLocalData *localData,
    void *decodingKeyHandle,
    int strength,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_commitData(
    struct PRESCstReaderCollator *me,
    int *lostCount, 
    PRESSampleLostStatusKind *lostReason,
    int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsKeyHash *rejectedInstanceKeyHash,
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_lostData(
    struct PRESCstReaderCollator *me,
    int *lostCount, 
    PRESSampleLostStatusKind *lostReason,
    int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsKeyHash *rejectedInstanceKeyHash,
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport int 
PRESCstReaderCollator_getFreeCount(
    struct PRESCstReaderCollator *me, 
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue, 
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_retryCommittal(
    struct PRESCstReaderCollator *me,
    int *lostCount, 
    PRESSampleLostStatusKind *lostReason,
    int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsKeyHash *rejectedInstanceKeyHash,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_pruneAndUpdate(
    struct PRESCstReaderCollator *me, 
    const struct RTINtpTime *now,
    int requiredEntryCount,
    RTIBool updateExpirationTime,
    const struct MIGRtpsGuid *remoteWriterGuid,
    PRESInstanceStateKind targetUpdateKind,
    const struct RTINtpTime* newLeaseIn,
    RTIBool alwaysCalculateState,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport 
RTIBool PRESCstReaderCollator_pruneLifespanExpiredEntries(
    struct PRESCstReaderCollator *me, 
    const struct RTINtpTime *now, /* required */
    int requiredEntryCount,
    RTIBool alwaysCalculateState,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport void
PRESCstReaderCollator_lookupInstance(struct PRESCstReaderCollator *me,
                                     const void* key_holder,
                                     struct PRESInstanceHandle *handle);

extern PRESDllExport void
PRESCstReaderCollator_lookupInstanceX(struct PRESCstReaderCollator *me,
                                      const void* key_holder,
                                      struct PRESInstanceHandle *handle);

extern PRESDllExport void 
PRESCstReaderCollator_setRemoteWriterLifespan(
    struct PRESCstReaderCollator *me, 
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    const struct MIGRtpsGuid *remoteWriterGuid,
    const struct PRESLifespanQosPolicy *lifespanQos,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport void 
PRESCstReaderCollator_setMinimumSeparation(
    struct PRESCstReaderCollator *me, 
    const struct RTINtpTime *minimumSeparation);

extern PRESDllExport void 
PRESCstReaderCollator_setDeadlinePeriod(
    struct PRESCstReaderCollator *me, 
    const struct RTINtpTime *deadlinePeriod);

extern PRESDllExport void 
PRESCstReaderCollator_setContentFilterPolicy(
    struct PRESCstReaderCollator *me, 
    const struct PRESContentFilterQosPolicy *policy);

extern PRESDllExport void
PRESCstReaderCollator_setReaderDataLifecyclePolicy(
    struct PRESCstReaderCollator *me, 
    const struct PRESReaderDataLifecycleQosPolicy *policy,
    const struct RTINtpTime* now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState);

struct PRESLoanedSampleInfoListener;

extern PRESDllExport struct PRESCstReaderCollator *
PRESCstReaderCollator_new(
    const struct PRESCstReaderCollatorProperty *property,
    const struct PRESReaderQueueListener *listener,
    const struct PRESReaderQueueListenerStorage *storage,
    const struct PRESTypePlugin *typePlugin,
    PRESTypePluginEndpointData endpointData,
    struct RTIClock *clock,
    const struct PRESContentFilterQosPolicy *filterPolicy,
    const struct PRESLoanedSampleInfoListener *sampleInfoListener,
    const struct PRESOdbcDatabaseConnection *odbcDatabaseCx,
    struct PRESReaderQueueVirtualWriterList * virtualWriterList,
    struct PRESReaderQueueSecurity *security,
    void * userData);

extern PRESDllExport void
PRESCstReaderCollator_preDelete(struct PRESCstReaderCollator *me);

extern PRESDllExport void
PRESCstReaderCollator_delete(struct PRESCstReaderCollator *me);

extern PRESDllExport void 
PRESCstReaderCollator_getRemoteWriterNextCommittalSn(
    struct PRESCstReaderCollator *me, 
    struct REDASequenceNumber *nextCommittalSn,
    const struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue);

extern PRESDllExport void 
PRESCstReaderCollator_getStatistics(
    struct PRESCstReaderCollator *me, 
    struct PRESPsDataReaderCacheStatus *stats,
    RTIBool getCacheStatus,
    RTIBool resetChangeCounts);

extern PRESDllExport void 
PRESCstReaderCollator_setStatistics(
    struct PRESCstReaderCollator *me, 
    const struct PRESPsDataReaderCacheStatus *stats);

extern PRESDllExport struct PRESReaderQueueVirtualWriterList *
PRESCstReaderCollator_getVirtualWriterList(
    struct PRESCstReaderCollator *me);

extern PRESDllExport
RTIBool PRESCstReaderCollator_acknowledgeVirtualSample(
    struct PRESCstReaderCollator * self,
    RTIBool * modified,
    struct PRESReaderQueueVirtualWriter * virtualWriter,
    const struct MIGRtpsGuid * virtualWriterGuid,
    const struct REDASequenceNumber * sn,
    const struct REDABuffer * userData,
    RTIBool persistNow);

extern PRESDllExport
RTIBool PRESCstReaderCollator_acknowledgeVirtualSamples(
    struct PRESCstReaderCollator * self,
    struct PRESReaderQueueVirtualWriter * virtualWriter,
    const struct MIGRtpsGuid * virtualWriterGuid,
    const struct REDASequenceNumber * firstSn,
    const struct REDASequenceNumber * lastSn,
    const struct REDABuffer * userData);

extern PRESDllExport
RTIBool PRESCstReaderCollator_acknowledgeAllReadSamples(
    struct PRESCstReaderCollator * self,
    const struct REDABuffer * userData);

extern PRESDllExport
RTIBool PRESCstReaderCollator_confirmAcknowledgement(
    struct PRESCstReaderCollator * self,
    const struct MIGRtpsGuid * remoteWriterGuid,
    struct MIGRtpsAppAck * appAckConf,
    const struct RTINtpTime * now);

extern PRESDllExport
RTIBool PRESCstReaderCollatorRemoteWriterQueue_getAcknowledgementState(
    struct PRESCstReaderCollatorRemoteWriterQueue * self,
    struct MIGRtpsAppAck * appAckOut);

extern PRESDllExport
RTIBool PRESCstReaderCollator_commitVirtualWriter(
    struct PRESCstReaderCollator * me,
    struct PRESReaderQueueVirtualWriter * virtualWriter,
    RTIBool * needsToBeRetried,
    int *lostCount,
    PRESSampleLostStatusKind *lostReason,
    int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsKeyHash *rejectedInstanceKeyHash,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport
RTIBool PRESCstReaderCollator_newWriterInfo(
    struct PRESCstReaderCollator *me,
    int *lostCount, 
    PRESSampleLostStatusKind *lostReason,
    int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsKeyHash *rejectedInstanceKeyHash,
    RTIBool * newVirtualWriter,
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    const struct MIGRtpsWriterInfoList *writerInfoList,
    struct REDAWorker *worker);

extern PRESDllExport
struct REDAInlineList *
    PRESCstReaderCollator_getCommittalInfoList(
        struct PRESCstReaderCollator * me);

extern PRESDllExport
struct PRESReaderQueueCommittalInfo *
    PRESCstReaderCollator_getCommittalInfo(
        struct PRESCstReaderCollator * me);

extern PRESDllExport
RTIBool    
PRESCstReaderCollator_getRetryCommitForRejectedSamples(
    struct PRESCstReaderCollator * me);

extern PRESDllExport
void   
PRESCstReaderCollator_resetRetryCommitForRejectedSamples(
    struct PRESCstReaderCollator * me);

extern PRESDllExport
RTIBool
PRESCstReaderCollatorRemoteWriterQueue_getRetryCommittal(
    struct PRESCstReaderCollatorRemoteWriterQueue *me);

extern PRESDllExport
void
PRESCstReaderCollatorRemoteWriterQueue_resetRetryCommittal(
    struct PRESCstReaderCollatorRemoteWriterQueue *me);


struct PRESPsReader;

extern PRESDllExport 
struct PRESReaderQueueIndexCondition *
PRESCstReaderCollator_createIndexCondition(
        struct PRESCstReaderCollator * self,
        struct PRESPsReader *owner,
        const char * indexName,
        struct PRESLoanedSampleInfo * presSampleInfo,
        PRESSampleStateMask sMask,
        PRESViewStateMask vMask,
        PRESInstanceStateMask iMask);

extern PRESDllExport
RTIBool PRESCstReaderCollator_containsIndexCondition(
        struct PRESCstReaderCollator * self,
        struct PRESPsReader *owner,
        struct PRESReaderQueueIndexCondition * presCondition);

extern PRESDllExport 
RTIBool PRESCstReaderCollator_deleteIndexCondition(
        struct PRESCstReaderCollator * self,
        struct PRESPsReader *owner,
        struct PRESReaderQueueIndexCondition * presCondition);

extern PRESDllExport 
RTIBool
PRESCstReaderCollator_createIndex(
        struct PRESCstReaderCollator * self,
        const char * index_name,
        REDAOrderedDataTypeCompareFunction compareFnc,
        struct REDAExclusiveArea* conditionEa,
        int indexConditionUserObjectSize,
        int indexConditionUserObjectAlignment);

extern PRESDllExport 
RTIBool
PRESCstReaderCollator_deleteIndex(
        struct PRESCstReaderCollator * self,
        const char * index_name);

extern PRESDllExport 
void PRESCstReaderCollator_getIndexConditionLists(
   struct PRESCstReaderCollator * self,
   struct REDAInlineList ** outActiveList,
   struct REDAInlineList **outInactivatedList);

extern PRESDllExport 
RTI_UINT32 PRESCstReaderCollator_getReadConditionState(
        struct PRESCstReaderCollator * self);

struct PRESPsService_QueryConditionState;

extern PRESDllExport 
void PRESCstReaderCollator_getQueryConditionState(
         struct PRESCstReaderCollator * self,
         struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport 
RTIBool PRESCstReaderCollator_isInstanceRegistered(
    struct PRESCstReaderCollator *me,
    const struct PRESInstanceHandle *handle);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "pres/pres_cstReaderCollator_impl.h"

#endif /* pres_cstReaderCollator_h */
