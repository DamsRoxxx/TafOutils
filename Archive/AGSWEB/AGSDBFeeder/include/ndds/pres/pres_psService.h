/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)pres_psService.h    generated by: makeheader    Fri Feb 16 13:51:43 2018
 *
 *		built from:	psService.ifc
 */

#ifndef pres_psService_h
#define pres_psService_h


  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef osapi_ntptime_h
    #include "osapi/osapi_ntptime.h"
  #endif
  #ifndef reda_cursor_h
    #include "reda/reda_cursor.h"
  #endif
  #ifndef reda_sequenceNumber_h
    #include "reda/reda_sequenceNumber.h"
  #endif
  #ifndef netio_common_h
    #include "netio/netio_common.h"
  #endif
  #ifndef mig_rtps_h
    #include "mig/mig_rtps.h"
  #endif
  #ifndef writer_history_interface_h
    #include "writer_history/writer_history_interface.h"
  #endif
  #ifndef pres_common_h
    #include "pres/pres_common.h"
  #endif
  #ifndef pres_participant_h
    #include "pres/pres_participant.h"
  #endif
  #ifndef pres_writerStatistics_h
    #include "pres/pres_writerStatistics.h"
  #endif
  #ifndef pres_readerStatistics_h
    #include "pres/pres_readerStatistics.h"
  #endif
  #ifndef cdr_typeCode_h
    #include "cdr/cdr_typeCode.h"
  #endif
  #ifndef cdr_md5_h
    #include "cdr/cdr_md5.h"
  #endif   

#ifdef __cplusplus
    extern "C" {
#endif


#define PRES_PS_LARGE_DATA_43_DATAWRITER_PROPERTY "dds.data_writer.protocol.use_43_large_data_format"
#define PRES_PS_LARGE_DATA_43_DATAREADER_PROPERTY "dds.data_reader.protocol.use_43_large_data_format"


#define PRES_PS_NON_PROGRESSING_NACKING_READER_PROPERTY "dds.data_writer.protocol.set_inactive_non_progressing_nacking_reader"


#define PRES_DISABLE_PREEMPTIVE_HEARTBEAT_PROPERTY "dds.data_writer.protocol.disable_preemptive_heartbeat"


#define PRES_DISABLE_PREEMPTIVE_NACK_PROPERTY "dds.data_reader.protocol.disable_preemptive_nack"


#define PRES_PS_RTPS_PROTOCOL_OVERHEAD_PARTICIPANT_PROPERTY "dds.participant.protocol.rtps_overhead"


#define PRES_PS_DYNAMIC_SEND_WINDOW_RATIO_THRESHOLD_PROPERTY "dds.data_writer.protocol.dynamic_send_window_ratio_threshold"


#define PRES_PS_FORCE_FILTERED_LIVELINESS_PROPERTY "dds.data_writer.protocol.force_filtered_liveliness"


#define PRES_PS_RTPS_PROTOCOL_MAX_RECEIVE_WINDOW_SIZE_PARTICIPANT_PROPERTY "dds.participant.protocol.max_receive_window_size"


#define PRES_PS_RTPS_PROTOCOL_RECEIVE_WINDOW_SIZE_DATAREADER_PROPERTY "dds.data_reader.protocol.receive_window_size"


#define PRES_PS_RTPS_PROTOCOL_OUTSTANDING_NACK_DATAWRITER_PROPERTY "dds.data_writer.protocol.max_inflight_sample_count"


#define PRES_PS_RTPS_PROTOCOL_RTT_SEC_DATAREADER_PROPERTY "dds.data_reader.protocol.round_trip_time_sec"


#define PRES_PS_RTPS_PROTOCOL_RTT_NANOSEC_DATAREADER_PROPERTY "dds.data_reader.protocol.round_trip_time_nanosec"


#define PRES_PS_TAKE_SNAPSHOT_DATAREADER_PROPERTY "dds.data_reader.take_snapshot"


#define PRES_READER_DELEGATE_RELIABILITY "dds.data_reader.reliability.delegate_reliability"
#define PRES_WRITER_DELEGATE_RELIABILITY "dds.data_writer.reliability.delegate_reliability"


#define PRES_WRITER_CRYPTOGRAPHY_TAINT_DATA_PROPERTY "dds.data_writer.cryptography.taint_data"


#define PRES_READER_COMPUTE_SAMPLE_HASH_PROPERTY "dds.data_reader.compute_sample_hash"
#define PRES_WRITER_COMPUTE_SAMPLE_SIGNATURE_PROPERTY "dds.data_writer.compute_sample_signature"
/* This property must be set to 1 if the user wants to deserialize the signature
 * (MIG_RTPS_PID_SAMPLE_SIGNATURE) of incoming samples.
 *
 * Setting the property to 0 will make the reader to ignore the signature. This
 * will also save memory. When the property is set to 1 we have to allocate
 * PRESSampleSignature per sample.
 */
#define PRES_READER_DESERIALIZE_SAMPLE_SIGNATURE_PROPERTY \
        "dds.data_reader.deserialize_sample_signature"


#define PRES_PS_SERVICE_MAX_OBJECT_KEY 0x00FFFFFF


/* This property can take three values:
 * FULLY_ACK
 * PROTOCOL
 * APP_ACK
 * 
 * The property control the criteria under which samples are considered acked
 * wrt the wait_for_acknowledgments API
 */    
#define PRES_WRITER_WAIT_FOR_ACK_MODE "dds.data_writer.ack_mode_in_wait_for_acknowledgments"
/* This is a property that is used 
 * for test purposes in order to introduce an 
 * artificial delay (in seconds) after a timeout
 * error in the waitForAcknowledgments 
 * operation.
 * 
 * The delay is introduced after the take
 * operation on the semaphore returns a TIMEOUT error
 * and before we take the writer EA again.
 * 
 * The idea is to facilitate the testing of a scenario
 * in which a timeout error occurs an immediately
 * after the writer acknowledges the samples.
 * 
 * This situation could cause the next call to 
 * waitForAcknowledgments to unblock even if 
 * there are samples that have not been 
 * acked yet.
 */
#define PRES_WRITER_TIMEOUT_DELAY_IN_WAIT_FOR_ACK "dds.data_writer.timout_delay_in_wait_for_acknowledgments"    


#define PRES_PS_KEY_ONLY_FILTER_OPTIMIZATION_PROPERTY "dds.data_writer.enable_key_only_filter_optimization"
#define PRES_PS_WRITER_SIDE_FILTER_OPTIMIZATION_PROPERTY "dds.data_writer.enable_filter_optimization"
#define PRES_PS_WRITER_TEST_FILTER_ON_SERIALIZED_ONLY_PROPERTY "dds.data_writer.test.filter_on_serialized_only"
#define PRES_PS_WRITER_TEST_ENDPOINT_LINK_EVENT_DELAY_PROPERTY "dds.data_writer.test.endpoint_link_event_delay"


#define PRES_READER_VIRTUAL_OWNERSHIP_PROPERTY "dds.data_reader.virtual_ownership"


#define PRES_READER_QUERY_CONDITION_PASS_NOT_ALIVE_SAMPLES_PROPERTY "dds.data_reader.querycondition.always_pass_not_alive_samples"


#define PRES_READER_TEST_FILTER_ON_SERIALIZED_ONLY_PROPERTY "dds.data_reader.test.filter_on_serialized_only"


#define PRES_READER_ISOLATED_PROPERTY "dds.data_reader.is_isolated"


#define PRES_PS_TYPE_CONSISTENCY_IGNORE_MEMBER_NAMES_PROPERTY \
    "dds.type_consistency.ignore_member_names"


#define PRES_PS_TYPE_CONSISTENCY_IGNORE_SEQUENCE_BOUNDS_PROPERTY \
    "dds.type_consistency.ignore_sequence_bounds"


#define PRES_PS_AUTO_THROTTLE_ENABLE_PROPERTY \
    "dds.domain_participant.auto_throttle.enable"
    
/*e This property enables auto throttle on a DataWriter */
#define PRES_PS_WRITER_AUTO_THROTTLE_ENABLED_PROPERTY_NAME \
    "dds.data_writer.auto_throttle.enable"
    
/*e When auto throttle is enabled on a DataWriter, this property
 * defines the period in number of samples at which the spin is updated */
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_UPDATE_SAMPLE_COUNT_PROPERTY_NAME \
    "dds.data_writer.auto_throttle.spin_update_sample_count"
    
/*e When auto throttle is enabled on a DataWriter, this property
 * defines the spin increment in microseconds*/
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_INCREMENT_PROPERTY_NAME \
    "dds.data_writer.auto_throttle.spin_increment"
   
/*e When auto throttle is enabled on a DataWriter, this property
 * defines the spin decrement in microseconds*/
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_DECREMENT_PROPERTY_NAME \
    "dds.data_writer.auto_throttle.spin_decrement"
    
/*e When auto throttle is enabled on a DataWriter, this property
 * defines the threshold below which the auto throttle algorithm
 * will start decreasing de spin*/
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_LOW_THRESHOLD_PROPERTY_NAME \
    "dds.data_writer.auto_throttle.spin_low_threshold"
    
/*e When auto throttle is enabled on a DataWriter, this property
 * defines the threshold above which the auto throttle algorithm
 * will start increasing de spin*/
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_HIGH_THRESHOLD_PROPERTY_NAME \
    "dds.data_writer.auto_throttle.spin_high_threshold"

/*e This property enables the slow throughput detection on a DataWriter */
#define PRES_PS_WRITER_AUTO_THROTTLE_SLOW_THROUGHPUT_DETECTION_ENABLE_PROPERTY_NAME \
    "dds.data_writer.auto_throttle.slow_throughput_detection_enable"

/*e When the slow throughput detection is enabled on a DataWriter (as well as
* the auto throttle), this property defines the minimum increment of time between
* write calls (in microseconds) that can be detected */
#define PRES_PS_WRITER_AUTO_THROTTLE_SLOW_THROUGHPUT_DETECTION_DELTA_PROPERTY_NAME \
    "dds.data_writer.auto_throttle.slow_throughput_detection_delta"

/*e When auto throttle is enabled on a DataWriter, this property
 * defines the max time that it can spin within a single write call*/
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_MAX_SPIN_TIME_PROPERTY_NAME \
    "dds.data_writer.auto_throttle.max_spin_time"

/*e When auto throttle is enabled on a DataWriter, this property
* defines the spin decrease factor*/
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_FACTOR_DECREMENT_PROPERTY_NAME \
    "dds.data_writer.auto_throttle.spin_factor_decrement"

/*e This property chooses the push pull ratio algorithm to resize
* the send window*/
#define PRES_PS_WRITER_PROTOCOL_RESIZE_SEND_WINDOW_PUSH_PULL_RATIO_PROPERTY_NAME \
    "dds.data_writer.protocol.resize_send_window_based_on_push_pull_ratio"

#define PRES_PS_WRITER_AUTOPURGE_VIRTUAL_GUID \
    "dds.data_writer.autopurge_virtual_guid"

#define PRES_PS_WRITER_AUTO_THROTTLE_ENABLED_PROPERTY_DEFAULT     \
    RTI_FALSE
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_UPDATE_SAMPLE_COUNT_PROPERTY_DEFAULT \
    1
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_INCREMENT_PROPERTY_DEFAULT \
    5
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_DECREMENT_PROPERTY_DEFAULT \
    1
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_LOW_THRESHOLD_PROPERTY_DEFAULT \
    20
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_HIGH_THRESHOLD_PROPERTY_DEFAULT \
    40
#define PRES_PS_WRITER_AUTO_THROTTLE_SLOW_THROUGHPUT_DETECTION_ENABLE_PROPERTY_DEFAULT \
    RTI_TRUE
#define PRES_PS_WRITER_AUTO_THROTTLE_SLOW_THROUGHPUT_DETECTION_DELTA_PROPERTY_DEFAULT \
    0
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_MAX_SPIN_TIME_PROPERTY_DEFAULT \
    1000 /* in microseconds */
#define PRES_PS_WRITER_AUTO_THROTTLE_SPIN_FACTOR_DECREMENT_PROPERTY_DEFAULT \
    70



#define PRES_PS_UNICAST_LOCALPORT_COUNT_MAX   (2)
/*e \ingroup PRESPsServiceModule
  Upper bound limit for partitionMaximumCumulativeLength in PsServiceProperty
 */
#define PRES_PS_PARTITION_MAXIMUM_CUMULATIVE_LENGTH_LIMIT       (256)
/*e \ingroup PRESPsServiceModule
  Upper bound limit for endpointGroupMaximumCumulativeLength in PsServiceProperty
 */
#define PRES_PS_ENDPOINT_GROUP_MAXIMUM_CUMULATIVE_LENGTH_LIMIT  (65535)

#define PRES_PS_SERVICE_ID  (1)


#define PRESPsWriter PRESLocalEndpoint
#define PRESPsReader PRESLocalEndpoint

struct PRESPsSubscriptionParameter {
    /*e immutable */
    struct PRESLocatorDerivableQosPolicy unicastLocator;
    /*e immutable */
    struct PRESReducedLocatorQosPolicy multicastLocator;

    /*e immutable. The topic of the reader. It may be ignored if topic is
      provided from other source, e.g., topicTypeWR. */
    char *topic;
    /*e immutable. The type of the reader. It may be ignored if typeName is
      provided from other source, e.g., topicTypeWR.  */
    char *typeName;

    /*e immutable */
    MIGRtpsObjectId groupOid;

    /*e immutable */
    RTIBool expectsInlineQos;

    /*e immutable. The Type Code of the reader
     */
    struct RTICdrTypeCode *typeCode;

    /*e immutable. The Type Object of the reader
     */
    struct RTICdrTypeObject *typeObject;
    
    /*e immutable. MD5 of the Type Object
     */
    RTICdrOctet typeObjectMd5[CDR_MD5_DIGEST_SIZE];

    /*e immutable. The durability requested by the reader. */
    struct PRESDurabilityQosPolicy durabilityQosPolicy;
    /*e immutable. The reliability requested by the reader. */
    struct PRESReliabilityQosPolicy reliabilityQosPolicy;
    /*e immutable. Receiving queue size. */
    /*i For DDS, set it to the same as maximalSamplePerRemoteWriterCount */
    int recvQueueSize;
    /*e mutable. The minimum separation between two issues. Must >= 0 */
    struct RTINtpTime minimumSeparation;
    /*e immutable. See struct PRESLivelinessQosPolicy. */
    struct PRESLivelinessQosPolicy livelinessQosPolicy;
    /*e immutable. See struct PRESOwnershipQosPolicy */
    struct PRESOwnershipQosPolicy ownershipQosPolicy;
    /*e immutable. See struct PRESPresentationQosPolicy
      Caller doesn't need to fillup this field. We get this from
      group property automatically
     */
    struct PRESPresentationQosPolicy presentationQosPolicy;
    /*e immutable. See struct PRESDestinationOrderQosPolicy */
    struct PRESDestinationOrderQosPolicy destinationOrderQosPolicy;
    /*e mutable. See struct PRESDeadlineQosPolicy */
    struct PRESDeadlineQosPolicy deadlineQosPolicy;
    /*e mutable. See struct PRESLatencyBudgetQosPolicy */
    struct PRESLatencyBudgetQosPolicy latencyBudgetQosPolicy;
    /*e mutable. See struct PRESUserDataQosPolicy */
    struct PRESUserDataQosPolicy userDataQosPolicy;
    /*e mutable. See struct PRESGroupDataQosPolicy */
    struct PRESGroupDataQosPolicy groupDataQosPolicy;
    /*e mutable. See struct PRESTopicDataQosPolicy */
    struct PRESTopicDataQosPolicy topicDataQosPolicy;
    /*e mutable. See struct PRESPartitionQosPolicy */
    struct PRESPartitionQosPolicy partitionQosPolicy;
    /*e mutable. See struct PRESContentFilterProperty */
    struct PRESContentFilterProperty contentFilterProperty;
    /*e mutable. See struct PRESPropertyQosPolicy */
    struct PRESPropertyQosPolicy propertyQosPolicy;

    /*e immutable. Virtual GUID */
    struct MIGRtpsGuid virtualGuid;
    /*e immutable. Service Kind */
    struct PRESServiceQosPolicy serviceQosPolicy;
    /*e immutable */
    MIGRtpsProtocolVersion protocolVersion;
    /*e immutable */
    MIGRtpsVendorId vendorId;
    /*e immutable */
    struct PRESProductVersion productVersion;
    /*e mutable */
    RTIBool isIncompatible;
    /*e immutable */
    RTIBool disableAcks;
    /*e mutable */
    RTIBool expectsVirtualHB;
    /*e immutable */
    struct PRESEntityNameQosPolicy subscriptionName;
    /*e immutable? See CXTYPES-10 */
    struct PRESTypeConsistencyEnforcementQosPolicy typeConsistency;
    /* immutable */
    PRESEndpointSecurityAttributes securityAttributes;
    /*e mutable Epoch to indicate the age of the remote reader property. Used to 
     synchronize discovery information with the built-in ServiceRequest channel */
    RTI_INT64 _propertyChangeEpoch;
};


/*e \ingroup PRESPsServiceModule */
#define PRES_PS_SUBSCRIPTION_PARAMETER_TOPIC_DEFAULT  NULL
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_SUBSCRIPTION_PARAMETER_TYPE_NAME_DEFAULT NULL
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_SUBSCRIPTION_PARAMETER_DURABILITY_QOS_POLICY_DEFAULT \
    {PRES_VOLATILE_DURABILITY_QOS,RTI_TRUE}
#define PRES_PS_SUBSCRIPTION_PARAMETER_RELIABILITY_QOS_POLICY_DEFAULT { \
    PRES_BEST_EFFORT_RELIABILITY_QOS, \
    RTI_NTP_TIME_ZERO, \
    PRES_PROTOCOL_ACKNOWLEDGMENT_MODE \
}
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_SUBSCRIPTION_PARAMETER_RECV_QUEUE_SIZE_DEFAULT (1)
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_SUBSCRIPTION_PARAMETER_MINIMUM_SEPARATION_DEFAULT {0, 0}
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_SUBSCRIPTION_PARAMETER_LIVELINESS_QOS_POLICY_DEFAULT \
    {PRES_AUTOMATIC_LIVELINESS_QOS, /* kind */ \
     RTI_NTP_TIME_MAX, /* leaseDuration */ \
     3 /* assertionsPerLeaseDuration */ }
#define PRES_PS_SUBSCRIPTION_PARAMETER_OWNERSHIP_QOS_POLICY_DEFAULT \
    {PRES_SHARED_OWNERSHIP_QOS}
#define PRES_PS_SUBSCRIPTION_PARAMETER_PRESENTATION_QOS_POLICY_DEFAULT \
    {PRES_INSTANCE_PRESENTATION_QOS, \
    RTI_FALSE, /* coherent_access */ \
    RTI_FALSE /* ordered_access */ }
#define PRES_PS_SUBSCRIPTION_PARAMETER_DESTINATION_ORDER_QOS_POLICY_DEFAULT \
    {PRES_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS, \
     PRES_INSTANCE_SCOPE_DESTINATIONORDER_QOS, \
     {30, 0}}
#define PRES_PS_SUBSCRIPTION_PARAMETER_DEADLINE_QOS_POLICY_DEFAULT \
    {RTI_NTP_TIME_MAX}
#define PRES_PS_SUBSCRIPTION_PARAMETER_LATENCY_BUDGET_QOS_POLICY_DEFAULT \
    {RTI_NTP_TIME_ZERO}
#define PRES_PS_SUBSCRIPTION_PARAMETER_USER_DATA_QOS_POLICY_DEFAULT \
    {{0, 0, NULL}}
#define PRES_PS_SUBSCRIPTION_PARAMETER_TOPIC_DATA_QOS_POLICY_DEFAULT \
    {{0, 0, NULL}}
#define PRES_PS_SUBSCRIPTION_PARAMETER_GROUP_DATA_QOS_POLICY_DEFAULT \
    {{0, 0, NULL}}
#define PRES_PS_SUBSCRIPTION_PARAMETER_PARTITION_QOS_POLICY_DEFAULT \
    {{0, 0, NULL}}
#define PRES_PS_SUBSCRIPTION_PARAMETER_CONTENT_FILTER_PROPERTY_DEFAULT \
    PRES_CONTENT_FILTER_PROPERTY_DEFAULT
#define PRES_PS_SUBSCRIPTION_PARAMETER_PROPERTY_QOS_POLICY_DEFAULT \
    PRES_PROPERTY_QOS_POLICY_DEFAULT
#define PRES_PS_SUBSCRIPTION_PARAMETER_SERVICE_QOS_POLICY_DEFAULT \
    {PRES_NO_SERVICE_QOS}
#define PRES_PS_SUBSCRIPTION_PARAMETER_TYPE_OBJECT_MD5_DEFAULT \
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_SUBSCRIPTION_PARAMETER_CHANGE_EPOCH_UNKNOWN ((RTI_INT64) 0)


  #define PRES_PS_SUBSCRIPTION_PARAMETER_DEFAULT {                        \
    PRES_LOCATOR_DERIVABLE_QOS_POLICY_DEFAULT, /* unicastLocator */       \
    PRES_REDUCED_LOCATOR_QOS_POLICY_DEFAULT, /* multicastLocator */       \
    PRES_PS_SUBSCRIPTION_PARAMETER_TOPIC_DEFAULT, /* topic */             \
    PRES_PS_SUBSCRIPTION_PARAMETER_TYPE_NAME_DEFAULT, /* typeName */      \
    MIG_RTPS_OBJECT_ID_UNKNOWN, /* groupOid */                            \
    RTI_FALSE, /* expectsInlineQos */                                     \
    NULL, /* typeCode */                                                  \
    NULL, /* typeObject */                                                \
    PRES_PS_SUBSCRIPTION_PARAMETER_TYPE_OBJECT_MD5_DEFAULT,               \
    PRES_PS_SUBSCRIPTION_PARAMETER_DURABILITY_QOS_POLICY_DEFAULT,         \
    PRES_PS_SUBSCRIPTION_PARAMETER_RELIABILITY_QOS_POLICY_DEFAULT,        \
    PRES_PS_SUBSCRIPTION_PARAMETER_RECV_QUEUE_SIZE_DEFAULT,               \
    PRES_PS_SUBSCRIPTION_PARAMETER_MINIMUM_SEPARATION_DEFAULT,            \
    PRES_PS_SUBSCRIPTION_PARAMETER_LIVELINESS_QOS_POLICY_DEFAULT,         \
    PRES_PS_SUBSCRIPTION_PARAMETER_OWNERSHIP_QOS_POLICY_DEFAULT ,         \
    PRES_PS_SUBSCRIPTION_PARAMETER_PRESENTATION_QOS_POLICY_DEFAULT,       \
    PRES_PS_SUBSCRIPTION_PARAMETER_DESTINATION_ORDER_QOS_POLICY_DEFAULT,  \
    PRES_PS_SUBSCRIPTION_PARAMETER_DEADLINE_QOS_POLICY_DEFAULT,           \
    PRES_PS_SUBSCRIPTION_PARAMETER_LATENCY_BUDGET_QOS_POLICY_DEFAULT,     \
    PRES_PS_SUBSCRIPTION_PARAMETER_USER_DATA_QOS_POLICY_DEFAULT,          \
    PRES_PS_SUBSCRIPTION_PARAMETER_GROUP_DATA_QOS_POLICY_DEFAULT,         \
    PRES_PS_SUBSCRIPTION_PARAMETER_TOPIC_DATA_QOS_POLICY_DEFAULT,         \
    PRES_PS_SUBSCRIPTION_PARAMETER_PARTITION_QOS_POLICY_DEFAULT,          \
    PRES_PS_SUBSCRIPTION_PARAMETER_CONTENT_FILTER_PROPERTY_DEFAULT,       \
    PRES_PS_SUBSCRIPTION_PARAMETER_PROPERTY_QOS_POLICY_DEFAULT,           \
    MIG_RTPS_GUID_UNKNOWN,                                                \
    PRES_PS_SUBSCRIPTION_PARAMETER_SERVICE_QOS_POLICY_DEFAULT,            \
    MIG_RTPS_PROTOCOL_VERSION, /* protocolVersion */                      \
    MIG_RTPS_VENDOR_ID_UNKNOWN, /* vendorId */                            \
    PRES_PRODUCT_VERSION_DEFAULT, /* productVersion */                    \
    RTI_FALSE, /* isIncompatible */                                       \
    RTI_FALSE, /* disableAcks */                                          \
    RTI_FALSE, /* expectsVirtualHB */                                     \
    PRES_ENTITY_NAME_QOS_POLICY_DEFAULT, /* subscriptionName */           \
    PRES_TYPE_CONSISTENCY_ENFORCEMENT_QOS_DEFAULT,                        \
    PRES_ENDPOINT_SECURITY_ATTRIBUTES_INVALID, /* securityAttributes */   \
    PRES_PS_SUBSCRIPTION_PARAMETER_CHANGE_EPOCH_UNKNOWN,                  \
    }

struct PRESPsPublicationParameter {
    /*e immutable
      FIXME: also need multicastLocator, just like a subscription
    */
    struct PRESLocatorDerivableQosPolicy unicastLocator;

    /*e immutable. The topic of the writer. It may be ignored if topic is
      provided from other source, e.g., topicTypeWR. */
    /*i
     * DDS and Presentation require this string to be immutable, the
     * former because it is initialized with a string received through
     * a public API and the latter because it provides #defines for
     * initializing them with static data. Discovery, however, needs
     * it to be mutable (although it only modifies strings that it
     * created itself). See bug #7800 for mroe discussion.
     */
    char *topic;

    /*e immutable. The type of the writer. It may be ignored if typeName is
     provided from other source, e.g., topicTypeWR. */
    /*i
     * DDS and Presentation require this string to be immutable, the
     * former because it is initialized with a string received through
     * a public API and the latter because it provides #defines for
     * initializing them with static data. Discovery, however, needs
     * it to be mutable (although it only modifies strings that it
     * created itself). See bug #7800 for mroe discussion.
     */
    char *typeName;

    /*e immutable */
    MIGRtpsObjectId groupOid;

    /*e immutable. The Type Code of the writer
     */
    struct RTICdrTypeCode * typeCode;

    /*e immutable. The Type Object of the writer
     */
    struct RTICdrTypeObject * typeObject;

    /*e immutable. MD5 of the Type Object
     */
    RTICdrOctet typeObjectMd5[CDR_MD5_DIGEST_SIZE];
        
    /*e immutable. The reliability offered by the writer. */
    struct PRESReliabilityQosPolicy reliabilityQosPolicy;
    /*e immutable. Whether the writer expects ACK. Deprecated. */
    RTIBool expectsAck;
    /*e immutable. The sending queue size of the writer. Must >= 1 */
    /*i For DDS, should set to maxSamples. */
    int sendQueueSize;
    /*e immutable. The max serialized size of a sample. Must >= 0 */
    /*i This value will be set as the output of the getMaxSizeSerializedFnc in
        the type plugin */
    int maxSampleSerializedSize;
    /*e mutable. The strength of the writer. Must >= 0. See
     struct PRESOwnershipStrengthQosPolicy */
    RTI_INT32 strength;
    /*e mutable. The persistence of the writer. */
    /*i For DDS, leave it as default */
    struct RTINtpTime persistence;
    /*e immutable. See struct PRESLivelinessQosPolicy */
    struct PRESLivelinessQosPolicy livelinessQosPolicy;
    /*e immutable. See struct PRESDurabilityQosPolicy */
    struct PRESDurabilityQosPolicy durabilityQosPolicy;
    /*e immutable. See struct PRESDurabilityServiceQosPolicy */
    struct PRESDurabilityServiceQosPolicy durabilityServiceQosPolicy;
    /*e immutable. See struct PRESOwnershipQosPolicy */
    struct PRESOwnershipQosPolicy ownershipQosPolicy;
    /*e immutable. See struct PRESPresentationQosPolicy
      Caller doesn't need to fillup this field. We get this from
      group property automatically
     */
    struct PRESPresentationQosPolicy presentationQosPolicy;
    /*e immutable. See struct PRESDestinationOrderQosPolicy */
    struct PRESDestinationOrderQosPolicy destinationOrderQosPolicy;
    /*e mutable. See struct PRESDeadlineQosPolicy */
    struct PRESDeadlineQosPolicy deadlineQosPolicy;
    /*e mutable. See struct PRESLatencyBudgetQosPolicy */
    struct PRESLatencyBudgetQosPolicy latencyBudgetQosPolicy;
    /*e mutable. See struct PRESLifespanQosPolicy */
    struct PRESLifespanQosPolicy lifespanQosPolicy;
    /*e mutable. See struct PRESUserDataQosPolicy */
    struct PRESUserDataQosPolicy userDataQosPolicy;
    /*e mutable. See struct PRESGroupDataQosPolicy */
    struct PRESGroupDataQosPolicy groupDataQosPolicy;
    /*e mutable. See struct PRESTopicDataQosPolicy */
    struct PRESTopicDataQosPolicy topicDataQosPolicy;
    /*e mutable. See struct PRESPartitionQosPolicy */
    struct PRESPartitionQosPolicy partitionQosPolicy;
    /*e immutable. See struct PRESLocatorFilterQosProperty */
    struct PRESLocatorFilterQosProperty locatorFilterQosProperty;
    /*e mutable. See struct PRESPropertyQosPolicy */
    struct PRESPropertyQosPolicy propertyQosPolicy;

    /*e immutable. Virtual GUID */
    struct MIGRtpsGuid virtualGuid;
    /*e immutable. Group Virtual GUID. Only used with GROUP access */
    struct MIGRtpsGuid groupVirtualGuid;
    /*e immutable. Service Kind */
    struct PRESServiceQosPolicy serviceQosPolicy;
    /*e immutable */
    MIGRtpsProtocolVersion protocolVersion;
    /*e immutable */
    MIGRtpsVendorId vendorId;
    /*e immutable */
    struct PRESProductVersion productVersion;
    /*e mutable */
    RTIBool isIncompatible;
    /*e immutable */
    RTIBool disableAcks;
    /*e immutable */
    struct PRESEntityNameQosPolicy publicationName;
    /*e immutable */
    struct PRESTopicQueryPublicationProperty topicQueryPublicationProperty;
    /*e immutable */
    PRESEndpointSecurityAttributes securityAttributes;
};


/*e \ingroup PRESPsServiceModule */
#define PRES_PS_PUBLICATION_PARAMETER_TOPIC_DEFAULT NULL
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_PUBLICATION_PARAMETER_TYPE_NAME_DEFAULT NULL
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_PUBLICATION_PARAMETER_RELIABILITY_QOS_POLICY_DEFAULT { \
    PRES_BEST_EFFORT_RELIABILITY_QOS, \
    RTI_NTP_TIME_ZERO, \
    PRES_PROTOCOL_ACKNOWLEDGMENT_MODE \
}
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_PUBLICATION_PARAMETER_EXPECTS_ACK_DEFAULT (RTI_TRUE)
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_PUBLICATION_PARAMETER_SEND_QUEUE_SIZE_DEFAULT (1)
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_PUBLICATION_PARAMETER_MAX_SAMPLE_SERIALIZED_SIZE_DEFAULT (0)
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_PUBLICATION_PARAMETER_STRENGTH_DEFAULT (1)
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_PUBLICATION_PARAMETER_PERSISTENCE_DEFAULT {0, 0}
/*e \ingroup PRESPsServiceModule */
#define PRES_PS_PUBLICATION_PARAMETER_LIVELINESS_QOS_POLICY_DEFAULT \
    {PRES_AUTOMATIC_LIVELINESS_QOS, /* kind */ \
     RTI_NTP_TIME_MAX, /* leaseDuration */ \
     3 /* assertionsPerLeaseDuration */ }
#define PRES_PS_PUBLICATION_PARAMETER_DURABILITY_QOS_POLICY_DEFAULT \
    {PRES_VOLATILE_DURABILITY_QOS,RTI_TRUE}
#define PRES_PS_PUBLICATION_PARAMETER_DURABILITY_SERVICE_QOS_POLICY_DEFAULT { \
    RTI_NTP_TIME_ZERO, /* serviceCleanupDelay */ \
    {PRES_KEEP_LAST_HISTORY_QOS,PRES_NONE_REFILTER_QOS,1}, /* history */ \
    { /* resourceLimits */ \
        REDA_FAST_BUFFER_POOL_GROWTH_PROPERTY_DEFAULT, /* sampleCount */ \
        REDA_FAST_BUFFER_POOL_GROWTH_PROPERTY_DEFAULT, /* instanceCount */ \
        REDA_FAST_BUFFER_POOL_UNLIMITED, /* maxSamplesPerInstance */ \
        1 /* instanceHashBuckets */ \
    } \
}

#define PRES_PS_PUBLICATION_PARAMETER_OWNERSHIP_QOS_POLICY_DEFAULT \
    {PRES_SHARED_OWNERSHIP_QOS}
#define PRES_PS_PUBLICATION_PARAMETER_PRESENTATION_QOS_POLICY_DEFAULT \
    {PRES_INSTANCE_PRESENTATION_QOS, \
    RTI_FALSE, /* coherent_access */ \
    RTI_FALSE /* ordered_access */ }
#define PRES_PS_PUBLICATION_PARAMETER_DESTINATION_ORDER_QOS_POLICY_DEFAULT \
    {PRES_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS, \
     PRES_INSTANCE_SCOPE_DESTINATIONORDER_QOS, \
     {0, 429496729} /* 100ms */ }
#define PRES_PS_PUBLICATION_PARAMETER_DEADLINE_QOS_POLICY_DEFAULT \
    {RTI_NTP_TIME_MAX}
#define PRES_PS_PUBLICATION_PARAMETER_LATENCY_BUDGET_QOS_POLICY_DEFAULT \
    {RTI_NTP_TIME_ZERO}
#define PRES_PS_PUBLICATION_PARAMETER_LIFESPAN_QOS_POLICY_DEFAULT \
    {RTI_NTP_TIME_MAX}
#define PRES_PS_PUBLICATION_PARAMETER_USER_DATA_QOS_POLICY_DEFAULT \
    {{0, 0, NULL}}
#define PRES_PS_PUBLICATION_PARAMETER_TOPIC_DATA_QOS_POLICY_DEFAULT \
    {{0, 0, NULL}}
#define PRES_PS_PUBLICATION_PARAMETER_GROUP_DATA_QOS_POLICY_DEFAULT \
    {{0, 0, NULL}}
#define PRES_PS_PUBLICATION_PARAMETER_PARTITION_QOS_POLICY_DEFAULT \
    {{0, 0, NULL}}
#define PRES_PS_PUBLICATION_PARAMETER_LOCATOR_FILTER_QOS_PROPERTY_DEFAULT \
    PRES_LOCATOR_FILTER_QOS_PROPERTY_DEFAULT
#define PRES_PS_PUBLICATION_PARAMETER_PROPERTY_QOS_POLICY_DEFAULT \
    PRES_PROPERTY_QOS_POLICY_DEFAULT
#define PRES_PS_PUBLICATION_PARAMETER_SERVICE_QOS_POLICY_DEFAULT \
    {PRES_NO_SERVICE_QOS}
#define PRES_PS_PUBLICATION_PARAMETER_TYPE_OBJECT_MD5_DEFAULT \
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}


  #define PRES_PS_PUBLICATION_PARAMETER_DEFAULT {                        \
    PRES_LOCATOR_DERIVABLE_QOS_POLICY_DEFAULT,                           \
    PRES_PS_PUBLICATION_PARAMETER_TOPIC_DEFAULT, /* topic */             \
    PRES_PS_PUBLICATION_PARAMETER_TYPE_NAME_DEFAULT, /* typeName */      \
    MIG_RTPS_OBJECT_ID_UNKNOWN, /* groupOid */                           \
    NULL, /* typeCode */                                                 \
    NULL, /* typeObject */                                               \
    PRES_PS_PUBLICATION_PARAMETER_TYPE_OBJECT_MD5_DEFAULT,               \
    PRES_PS_PUBLICATION_PARAMETER_RELIABILITY_QOS_POLICY_DEFAULT,        \
    PRES_PS_PUBLICATION_PARAMETER_EXPECTS_ACK_DEFAULT,                   \
    PRES_PS_PUBLICATION_PARAMETER_SEND_QUEUE_SIZE_DEFAULT,               \
    PRES_PS_PUBLICATION_PARAMETER_MAX_SAMPLE_SERIALIZED_SIZE_DEFAULT,    \
    PRES_PS_PUBLICATION_PARAMETER_STRENGTH_DEFAULT,                      \
    PRES_PS_PUBLICATION_PARAMETER_PERSISTENCE_DEFAULT,                   \
    PRES_PS_PUBLICATION_PARAMETER_LIVELINESS_QOS_POLICY_DEFAULT,         \
    PRES_PS_PUBLICATION_PARAMETER_DURABILITY_QOS_POLICY_DEFAULT,         \
    PRES_PS_PUBLICATION_PARAMETER_DURABILITY_SERVICE_QOS_POLICY_DEFAULT, \
    PRES_PS_PUBLICATION_PARAMETER_OWNERSHIP_QOS_POLICY_DEFAULT ,         \
    PRES_PS_PUBLICATION_PARAMETER_PRESENTATION_QOS_POLICY_DEFAULT,       \
    PRES_PS_PUBLICATION_PARAMETER_DESTINATION_ORDER_QOS_POLICY_DEFAULT,  \
    PRES_PS_PUBLICATION_PARAMETER_DEADLINE_QOS_POLICY_DEFAULT,           \
    PRES_PS_PUBLICATION_PARAMETER_LATENCY_BUDGET_QOS_POLICY_DEFAULT,     \
    PRES_PS_PUBLICATION_PARAMETER_LIFESPAN_QOS_POLICY_DEFAULT,           \
    PRES_PS_PUBLICATION_PARAMETER_USER_DATA_QOS_POLICY_DEFAULT,          \
    PRES_PS_PUBLICATION_PARAMETER_GROUP_DATA_QOS_POLICY_DEFAULT,         \
    PRES_PS_PUBLICATION_PARAMETER_TOPIC_DATA_QOS_POLICY_DEFAULT,         \
    PRES_PS_PUBLICATION_PARAMETER_PARTITION_QOS_POLICY_DEFAULT,          \
    PRES_PS_PUBLICATION_PARAMETER_LOCATOR_FILTER_QOS_PROPERTY_DEFAULT,   \
    PRES_PS_PUBLICATION_PARAMETER_PROPERTY_QOS_POLICY_DEFAULT,           \
    MIG_RTPS_GUID_UNKNOWN, /* virtual GUID */                            \
    MIG_RTPS_GUID_UNKNOWN, /* group virtual GUID */                      \
    PRES_PS_PUBLICATION_PARAMETER_SERVICE_QOS_POLICY_DEFAULT,            \
    MIG_RTPS_PROTOCOL_VERSION, /* protocolVersion */                     \
    MIG_RTPS_VENDOR_ID_UNKNOWN, /* vendorId */                           \
    PRES_PRODUCT_VERSION_DEFAULT, /* productVersion */                   \
    RTI_FALSE, /* isIncompatible */                                      \
    RTI_FALSE, /* disableAcks */                                         \
    PRES_ENTITY_NAME_QOS_POLICY_DEFAULT, /* publicationName */           \
    PRES_TOPIC_QUERY_PUBLICATION_PROPERTY_DEFAULT,                       \
    PRES_ENDPOINT_SECURITY_ATTRIBUTES_INVALID /* securityAttributes */   \
    }

struct PRESPsWriterResourceLimits {
    /*e immutable. The number of concurrent blocking write thread count policy.
     */
    struct REDAFastBufferPoolGrowthProperty blockingWriteThreadCount;

    /*i immutable. The maximum number of remote readers to filter for
     *  NOTE: This poroperty cannot be configured at API level
     */
    int initialRemoteReaderFilters;

    /*e immutable. The maximum number of remote readers to filter for      */
    int maxRemoteReaderFilters;

    /*e immutable. Initial batches */
    int initialBatches;

    /*e immutable. Max batches */
    int maxBatches;

    /*e immutable. Cookie max length */
    int cookieMaxLength;

    /*e immutable. Instance replacement policy */
    PRESInstanceReplacementPolicy instanceReplacementPolicy;

    /*e immutable. Whether empty instances are replaced first */
    RTIBool replaceEmptyInstances;

    /*e immutable. Whether to autoregister instances as they are written */
    RTIBool autoregisterInstances;

    /*e immutable. Initial virtual writers */
    int initialVirtualWriters;

    /*e immutable. Max virtual writers */
    int maxVirtualWriters;

    /*e immutable. Max remote readers */
    int maxRemoteReaders;

    /*e immutable. Max appack remote readers */
    int maxAppAckRemoteReaders;

    /*e immutable. Number of active TopicQueries
     */
    struct REDAFastBufferPoolGrowthProperty activeTopicQueryCount;
};

typedef enum {
    PRES_PS_SERVICE_WRITER_PROPERTY_NORM             = 0x01,
    PRES_PS_SERVICE_WRITER_PROPERTY_ANON             = 0x02,
    PRES_PS_SERVICE_WRITER_PROPERTY_ANON_BROADCASTER = 0x04,
    PRES_PS_SERVICE_WRITER_PROPERTY_ANON_TRANSPONDER = 0x08,
    PRES_PS_SERVICE_WRITER_PROPERTY_ANON_RESPONDER   = 0x10,
    PRES_PS_SERVICE_WRITER_PROPERTY_ANON_ANNOUNCER   = 0x20
} PRESPsServiceWriterKind;

typedef enum {
    PRES_PS_SERVICE_WRITER_HEARTBEAT_RATE_CHANGE_NONE,
    PRES_PS_SERVICE_WRITER_HEARTBEAT_RATE_CHANGE_NORM,
    PRES_PS_SERVICE_WRITER_HEARTBEAT_RATE_CHANGE_FAST
} PRESPsServiceWriterHeartbeatRateChange;

struct PRESPsWriterProperty {
    /*e immutable. parent property. */
    struct PRESLocalEndpointProperty parent;
    /*e partly mutable. */
    struct PRESPsPublicationParameter parameter;
    /*e immutable. encodes the kind of reader.
      Can't be PRESPsServiceWriterKind because we need to support bitwise
      operation. */
    /*i For DDS, leave it as default, i.e., NORM */
    PRESPsServiceWriterKind writerKindMask;
    /*e immutable */
    struct PRESHistoryQosPolicy history;
    /*e immutable */
    struct PRESResourceLimitsQosPolicy resourceLimits;
    /*e immutable */
    struct PRESPsWriterResourceLimits writerResourceLimits;
    /*e mutable, unsupported */
    struct PRESWriterDataLifecycleQosPolicy writerDataLifecycle;
    /*e immutable. If true, dispose automatically causes unregister. Otherwise,
      user needs to call unregister explicitly. */
    /*i For DDS, leave it as default, i.e., RTI_FALSE */
    RTIBool autoUnregister;
    /*i immutable. State whether we need to match with locally created
        writers. For DDS, leave it as default, i.e., RTI_TRUE */
    RTIBool matchWithLocal;
    /*i immutable. Maximum size of the serialized user sample buffer.
        If this parameter is greater or equal to 0, getMaxSizeSerializedFnc
        method on the type plugin interface will not be called to to get
        the maximum size of the serialized user sample. This value will be
        used instead. */
    int bufferMaxSizeSerialized;
    /*i immutable. Type support passed to the queue. Optional. */
	struct PRESTypeSupportQosPolicy typeSupport;
    /*i immutable. NULL means synchronously writing. */
    struct PRESFlowController *flowController;

    /*e immutable
      We dont send batching information on the wire.
      If we decide to send that information batching should be added
      to PRESPsPublicationParameter.
    */
    struct PRESBatchQosPolicy batch;
    /*e immutable
      The SequenceLocatorFilterPolicy contains the SQL evaluation functions.
      They are not sent on the wire.
      The locatorFilterQosProperty contains the filter expression strings,
      and is sent on the wire.  That is in the PRESPsPublicationParameter */
    struct PRESSequenceLocatorFilterPolicy locatorFilterPolicies;
    /*e immutable
      We do not send disableInlineKeyhash on the wire
    */
    RTIBool disableInlineKeyhash;
    /*e immutable
      We do not send serialize the keys with disposes
    */
    RTIBool serializeKeyWithDispose;

    /*e immutable */
    RTIBool serializeSampleSignature;

    /*e immutable
    */
    struct PRESTransportEncapsulationQosPolicy encapsulation;
    /*e mutable. AvailabilityQosPolicy  */
    struct PRESAvailabilityQosPolicy availabilityQosPolicy;

    /* Collaborative Reliability */
    /*e immutable
    */
    struct REDASequenceNumber initialVirtualSn;
    /*e mutable
    */
    RTI_INT32 publicationPriority;

    /*e immutable
     * Enables or disables topic queries and configures their dispatch policy
     */
    struct PRESTopicQueryDispatchQosPolicy topicQueryDispatch;
};


/*e \ingroup PRESPsServiceModule */
#define PRES_PS_AVAILABILITY_QOS_POLICY_DEFAULT \
    PRES_AVAILABILITY_QOS_POLICY_DEFAULT


/*e \ingroup PRESPsServiceModule */
#define PRES_PS_WRITER_PROPERTY_DEFAULT {                     \
    PRES_LOCAL_ENDPOINT_PROPERTY_DEFAULT, /* parent */        \
    PRES_PS_PUBLICATION_PARAMETER_DEFAULT, /* parameter */    \
    PRES_PS_SERVICE_WRITER_PROPERTY_NORM, /* bitmap */        \
    {PRES_KEEP_LAST_HISTORY_QOS,PRES_NONE_REFILTER_QOS,1}, /* history */\
    { /* resourceLimits */ \
      {1, 4, REDA_FAST_BUFFER_POOL_UNLIMITED}, /* sampleCount */ \
      {1, 4, REDA_FAST_BUFFER_POOL_UNLIMITED}, /* instanceCount */ \
      4, /* maxSamplesPerInstance */ \
      1 /* instanceHashBuckets */ \
    }, \
    { /* writerResourceLimits */                    \
      {1, 4, REDA_FAST_BUFFER_POOL_UNLIMITED}, /* blockingWriteThreadCount */ \
      128,  /* initialRemoteReaderFilters */ \
      -1, /* maxRemoteReaderFilters */ \
      8, /* initialBatches */ \
      REDA_FAST_BUFFER_POOL_UNLIMITED, /* maxBatches */ \
      -1, /* cookieMaxLength */ \
      PRES_UNREGISTERED_INSTANCE_REPLACEMENT, /* instanceReplacement */ \
      RTI_FALSE, /* replaceEmptyInstances */ \
      RTI_FALSE, /* autoRegisterInstances */ \
      1, /* initialVirtualWriters */ \
      -1, /* maxVirtualWriters */ \
      -1, /* maxRemoteReaders */ \
      -1, /* maxAppAckRemoteReaders */ \
      /* activeTopicQueryCount */ \
      {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED} \
    }, \
    { /* writerDataLifecycle */                               \
      RTI_TRUE,                                               \
      RTI_NTP_TIME_MAX,                                       \
      RTI_NTP_TIME_MAX                                        \
    },                                                        \
    RTI_FALSE, /* autoUnregister */                           \
    RTI_TRUE, /* matchWithLocal */                            \
    -1, /* bufferMaxSizeSerialized */                         \
    PRES_TYPE_SUPPORT_QOS_POLICY_DEFAULT, /* typeSupport */   \
    NULL, /* flowController */                                \
    {                                                         \
        RTI_FALSE, /* enable */                               \
        -1, /* maxDataBytes */                                \
        -1, /* maxMetaDataBytes */                            \
        1024, /* maxSamples */                                \
        RTI_NTP_TIME_MAX, /* maxFlushDelay */                 \
        RTI_NTP_TIME_MAX, /* sourceTimestampResolution */     \
        RTI_TRUE, /* threadSafewrite  */                      \
    },                                                        \
    PRES_SEQ_LOCATOR_FILTER_POLICY_DEFAULT,                   \
    RTI_FALSE,                                                \
    RTI_FALSE,                                                \
    RTI_FALSE, /* serializeSampleSignature */                 \
    PRES_TRANSPORT_ENCAPSULATION_QOS_POLICY_DEFAULT,          \
    PRES_PS_AVAILABILITY_QOS_POLICY_DEFAULT,                  \
    REDA_SEQUENCE_NUMBER_AUTO, /* initialVirtualSn */	      \
    PRES_PUBLICATION_PRIORITY_UNDEFINED, /* publicationPriority */ \
    PRES_TOPIC_QUERY_DISPATCH_QOS_POLICY_DEFAULT              \
}

struct PRESPsBeWriterProperty {
    /*e parent property */
    struct PRESPsWriterProperty parent;
};


/*e \ingroup PRESPsServiceModule */
#define PRES_PS_BE_WRITER_PROPERTY_DEFAULT {             \
    PRES_PS_WRITER_PROPERTY_DEFAULT /* parent */         \
}


/*e \ingroup PRESPsServiceModule */
#define PRES_PS_SR_WRITER_PROPERTY_REPEAT_ANNOUNCE_PERIOD_FAST_INVALID {-1, 0}

struct PRESPsSrWriterProperty {
    /*e parent property */
    struct PRESPsWriterProperty parent;
    /*e mutable. When the number of unacknowledged samples reaches or falls
      below this number, the writer will use repeatAnnouncePeriodNorm and a
      callback will be issued. */
    int lowWaterMark;
    /*e mutable. When the number of unacknowledged samples reaches or exceeds
      this number, the writer will use repeatAnnouncePeriodFast and a
      callback will be issued.  The value 0 is not valid. */
    int highWaterMark;
    /*e mutable. The normal rate at which to announce writer's queue status, or
     ask for ack from remote reader. */
    struct RTINtpTime repeatAnnouncePeriodNorm;
    /*e mutable. The fast rate at which to announce writer's queue status, or
     ask for ack from remote reader.  The special value of
     PRES_PS_SR_WRITER_PROPERTY_REPEAT_ANNOUNCE_PERIOD_FAST_INVALID can be set
     to specify that only the normal repeat announce period should be used. */
    struct RTINtpTime repeatAnnouncePeriodFast;
    /*e mutable. The rate for late-joining readers at which to announce
    writer's queue status, or ask for ack from remote reader. */
    struct RTINtpTime lateJoinerAnnouncePeriod;
    /*e mutable. The rate at which to announce virtual writer's queue status */
    struct RTINtpTime repeatAnnounceVirtualPeriod;
    /*e mutable. The number of samples to send between annnouncements of virtual
       writer's queue status */
    int samplesPerAnnounceVirtual;
   /*e mutable. The max number of annnounce retries before setting a remote
      reader to inactive. */
    int maxRetries;
    /*e mutable. The min delay between the time writer receives some message
      from reader and the time writer responds to that message. If it is ZERO,
      it means to send response immediately. */
    struct RTINtpTime responseDelayMin;
    /*e mutable. The max delay between the time writer receives some message
      from reader and the time writer responds to that message. It must be >=
      responseDelayMin. */
    struct RTINtpTime responseDelayMax;
    /*e mutable.  The window during which heartbeats that would trigger
    redundant NACKs are ignored. */
    struct RTINtpTime nackSuppressionDuration;
    /*e mutable. How often a piggyback heartbeat should be inserted. The
      acceptable range is [0, parent.parameter.sendQueueSize]. If it's 0, no
      piggyback heartbeat will be inserted. Otherwise, for every
      int(parent.parameter.sendQueueSize/heartbeatPerSendQueue) number of
      issues, a piggyback heartbeat will be inserted.
    */
    int heartbeatPerSendQueue;
    /*e mutable. Maximum of bytes to send per nack request. If nack asks for
      more repair samples than those fit into the bytes limit, write will wait
      for the next nack to send the rest samples.
     */
    int maxBytesPerNackResponse;
    /*e immutable. If the pushMode == FALSE, everytime a writer writes an issue,
      the issue is simply put into the queue, but does not get sent. Otherwise,
      the issue will be sent out. */
    RTIBool pushMode;
    /*e immutable. If nonProgressingNackIsInactive == TRUE, a reader will be
    treated as INACTIVE if it either doesn't send any ACKNACKs or sends successive
    non-progresssing NACKs (i.e. with the same first sequence number) for more
    than #hbRetriesMax of HB periods */
    RTIBool nonProgressingNackIsInactive;
    /*e mutable. The min delay between two pushs of the same data.
      Not used yet. */
    struct RTINtpTime pushDelayMin;
    /*e mutable.The min delay between two pushs of the same data.
      Not used yet. */
    struct RTINtpTime pushDelayMax;
    /*e mutable. The max number of push retries. Not used yet. */
    int pushAttemptMax;
    /*e mutable */
    struct RTINtpTime minAckDelay;
    /*e mutable */
    struct RTINtpTime maxAckDelay;

    struct RTINtpTime ackDelayMinSeparation;

    RTIBool enableAdaptiveAckDelay;
    RTIBool enableAckDelaySpinWait;

    RTI_INT32 increaseAckDelayScaler;
    RTI_INT32 decreaseAckDelayScaler;

    /*e mutable */
    struct RTINtpTime ackStateUpdateRate;

    RTI_INT32 sendWindowSizeMin;
    RTI_INT32 sendWindowSizeMax;
    struct RTINtpTime sendWindowUpdatePeriod;
    RTI_INT32 sendWindowIncreaseFactor;
    RTI_INT32 sendWindowDecreaseFactor;

    RTI_INT32 multicastResendThreshold;
    RTIBool multicastPeriodicHB;
    
    /* Indicates if the DW will get callbacks where the AppAck
     * has an empty response
     */
    RTIBool propagateAppAckWithNoResponse;    
};


/*e \ingroup PRESPsServiceModule */
#define PRES_PS_SR_WRITER_PROPERTY_DEFAULT {          \
    PRES_PS_WRITER_PROPERTY_DEFAULT, /* parent */     \
    0, /* lowWaterMark */                             \
    1, /* highWaterMark */                            \
    {1, 0}, /* repeatAnnouncePeriodNorm */            \
    PRES_PS_SR_WRITER_PROPERTY_REPEAT_ANNOUNCE_PERIOD_FAST_INVALID, \
    {1, 0}, /* lateJoinerAnnouncePeriod */  \
    RTI_NTP_TIME_MAX, /* repeatAnnounceVirtualPeriod */ \
    PRES_LENGTH_UNLIMITED, /* samplesPerAnnounceVirtual */ \
    10, /* maxRetries */                              \
    {0, 0}, /* responseDelayMin */                    \
    {0, 0}, /* responseDelayMax */                    \
    {0, 0}, /* nackSuppressionDuration */             \
    1, /* heartbeatPerSendQueue */                    \
    9216, /* maxBytesPerNackResponse */               \
    RTI_TRUE, /* pushMode */                          \
    RTI_FALSE, /* nonProgressingNackIsInactive */     \
    {0, 0}, /* pushDelayMin */                        \
    {0, 0}, /* pushDelayMax */                        \
    1, /* pushAttemptMax */                           \
    {0, 4294967}, /* minAckDelay (1ms) */             \
    {1, 0}, /* maxAckDelay (1sec) */                  \
    {0, 429496}, /* minSeparation */                  \
    RTI_TRUE, /* enableAdaptiveAckDelay */            \
    RTI_FALSE, /* enableAckDelaySpinWait */           \
    150, /* increasesAckDelayScaler */                 \
    95, /* decreaseAckDelayScaler */                \
    {3, 0}, /* ackStateUpdateRate */                  \
    PRES_LENGTH_UNLIMITED, /* sendWindowSizeMin */ \
    PRES_LENGTH_UNLIMITED, /* sendWindowSizeMax */ \
    {1, 0}, /* sendWindowUpdatePeriod */ \
    105, /* sendWindowIncreaseFactor */ \
    50, /* sendWindowDecreaseFactor */ \
    2, /* multicastResendThreshold */ \
    RTI_FALSE, /* multicastPeriodicHB */ \
    RTI_TRUE \
}

struct REDAInlineList;

struct PRESPsAnonWriterProperty {
    /*e parent property. */
    struct PRESPsWriterProperty parent;
    /*e immutable. The remote reader's oid to whom the writer will send data,
      and from whom the writer expects to receive response. */
    MIGRtpsObjectId remoteReaderOid;
    /*e mutable. The broadcast rate for broadcaster or transponder. Must > 0 */
    struct RTINtpTime broadcastPeriod;
    /*e mutable. The response delay when a transponder or responder receive
      request from remote reader. Must >= 0. */
    struct RTINtpTime nackResponseDelay;
    /*e where to broadcast to; translates to the peer list in disc */
    struct REDAInlineList* destinations;
    /* Locator in which a participant is announced to the default domain */
    struct RTINetioLocator domainBroadcastLocator;
    /* The rate at which a participant is announced to the default domain. 
     * If ZERO, the participant is not announced periodically
     */
    struct RTINtpTime domainBroadcastPeriod;
};


/*e \ingroup PRESPsServiceModule */
#define PRES_PS_ANON_WRITER_PROPERTY_DEFAULT {           \
    PRES_PS_WRITER_PROPERTY_DEFAULT, /* parent */        \
    MIG_RTPS_OBJECT_ID_UNKNOWN, /* remoteReaderOid */ \
    {0, 0}, /* broadcastPeriod */                     \
    {0, 0}, /* nackResponseDelay */                   \
    NULL, \
    RTI_NETIO_LOCATOR_INVALID, \
    {0,0} \
}

typedef enum {
    PRES_PS_SERVICE_READER_PROPERTY_NORM = 0x01,
    PRES_PS_SERVICE_READER_PROPERTY_ANON = 0x02,
    PRES_PS_SERVICE_READER_PROPERTY_ANON_PROMISCUOUS = 0x04
} PRESPsServiceReaderKind;


#define PRES_AUTO_MAX_TOTAL_INSTANCES 0

struct PRESPsReaderResourceLimits {
    /*e immutable. The maximum allowable number of samples per remote writer. */
    int maxSamplesPerRemoteWriter;

    /*e immutable. Number of remote writer queues. */
    struct REDAFastBufferPoolGrowthProperty remoteWriterCount;

    /*e immutable. Control growth of instance info. */
    struct REDAFastBufferPoolGrowthProperty infoCount;

    /*e immutable. Control growth of remote writers per instance. */
    struct REDAFastBufferPoolGrowthProperty remoteWriterCountPerInstance;

    /* immutable. Control growth of outstanding reads */
    struct REDAFastBufferPoolGrowthProperty outstandingReadCount;

    /*e immutable. The maximum number samples that can be returned from
       read/take. Must be a finite positive number. */
    int maxSamplesPerRead;

    /*e immutable. Determines whether the reader supports receiving fragments samples.
    */
    RTIBool disableFragmentationSupport;

    /*e immutable. The number of fragmented samples for all remote writers.
       Completely independent from maxSamples (full samples), etc.
    */
    struct REDAFastBufferPoolGrowthProperty fragmentedSamples;

    /*e immutable. The maximum number of fragmented samples for a given remote writer.
       Completely independent from maxSamples (full samples), etc.
    */
    int maxFragmentedSamplesPerRemoteWriter;

    /*e immutable. The maximum number of fragments for any samples.
    */
    int maxFragmentsPerSample;

    /*e immutable. Pre-allocation means buffers are allocated to max size (can be
       wasteful), but with dynamic allocation the correct size can be allocated
       (can be undeterministic).
    */
    RTIBool dynamicallyAllocateFragmentedSamples;

    /* immutable. Max total instances (including registered and unregistered instances)
    */
    int maxTotalInstances;

    /*e immutable. Control growth of remote virtual writers  */
    struct REDAFastBufferPoolGrowthProperty remoteVirtualWriterCount;

    /*e immutable. Control growth of remote virtual writers per instance. */
    struct REDAFastBufferPoolGrowthProperty remoteVirtualWriterCountPerInstance;

    /*e immutable. The maximum number of query condition content filters
    */
    int maxQueryConditionFilters;

    /*e immutable. The maximum allowable number of remote writers per sample */
    int maxRemoteWritersPerSample;

    /*e immutable. The maximum reliability receive window size */
    int maxReceiveWindowSize;

    /*e immutable. The maximum size of the application acknowledgment response */
    int maxAppAckResponseLength;

    /*e immutable. Whether or not to keep minimum instance state for deleted 
      instances.
    */
    RTIBool keepMinimumStateForInstances;

    /*e immutable. Number of TopicQueries
     */
    struct REDAFastBufferPoolGrowthProperty topicQueryCount;
};


/*e \ingroup PRESPsServiceModule */
#define PRES_PS_READER_RESOURCE_LIMITS_DEFAULT {              \
    REDA_FAST_BUFFER_POOL_UNLIMITED, /* maxSamplesPerRemoteWriter */ \
    /* remoteWriterCount */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* infoCount */ \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* remoteWriterCountPerInstance */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* outstandingReadCount */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    1024, /* maxSamplesPerRead: should NEVER be unlimited */ \
    RTI_TRUE, /* disableFragmentationSupport */ \
    {4, 1024, REDA_FAST_BUFFER_POOL_UNLIMITED }, /* fragmentedSamples: */ \
    256, /* maxFragmentedSamplesPerRemoteWriter: */ \
    512, /* maxFragmentsPerSample: */ \
    RTI_FALSE, /* dynamicallyAllocateFragmentedSamples: */ \
    PRES_AUTO_MAX_TOTAL_INSTANCES, /* maxTotalInstances */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, /* remoteVirtualWriterCount */\
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, /* remoteVirtualWriterCountPerInstance */\
    4, /* maxQueryConditionFilters */ \
    3, /* maxRemoteWritersPerSample */ \
    256, /* maxReceiveWindowSize */ \
    0, /* appack payload max size */ \
    RTI_TRUE, /* keepMinimumStateForInstances */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED} \
}

struct PRESPsReaderProperty {
    /*e immutable parent property */
    struct PRESLocalEndpointProperty parent;
    /*e partly mutable */
    struct PRESPsSubscriptionParameter parameter;
    /*e immutable encodes the kind of reader.
      Can't be PRESPsServiceReaderKind because we need to support bit operation
    */
    /*i For DDS, leave it as default, i.e., NORM */
    PRESPsServiceReaderKind readerKindMask;
    /*e immutable */
    struct PRESHistoryQosPolicy history;
    /*e immutable */
    struct PRESResourceLimitsQosPolicy resourceLimits;
    /*e immutable */
    struct PRESPsReaderResourceLimits readerResourceLimits;
    /*e mutable, unsupported */
    struct PRESReaderDataLifecycleQosPolicy readerDataLifecycle;
    /*e immutable. If true, onDataOnReaders callback in group/service listener
      will be skipped when we receive new data. */
    /*i For DDS, leave it as default, i.e., RTI_FALSE */
    RTIBool skipOnDataOnReaders;
    /*i immutable. State whether we need to match with local writers.
      For DDS, leave it as default, i.e., RTI_TRUE */
    RTIBool matchWithLocal;
    /*i immutable. Serialize option passed to the queue. Optional. */
    struct PRESTypeSupportQosPolicy typeSupport;
    /*i Flags whether reader expects inlineQoS*/
    RTIBool expectsInlineQos;
    /*i immutable */
    RTIBool propagateDisposeOfUnregisteredInstances;
    /*i immutable */
    RTIBool propagateUnregisterOfDisposedInstances;
    /*i immutable */
    RTIBool deserializeSampleSignature;
    /*e mutable. AvailabilityQosPolicy  */
    struct PRESAvailabilityQosPolicy availabilityQosPolicy;
};


/*e \ingroup PRESPsServiceModule */
#define PRES_PS_READER_PROPERTY_DEFAULT {                     \
    PRES_LOCAL_ENDPOINT_PROPERTY_DEFAULT, /* parent */        \
    PRES_PS_SUBSCRIPTION_PARAMETER_DEFAULT, /* parameter */   \
    PRES_PS_SERVICE_READER_PROPERTY_NORM, /* bitmap */        \
    {PRES_KEEP_LAST_HISTORY_QOS,PRES_NONE_REFILTER_QOS,1}, /* history */\
    { /* resourceLimits */ \
      {1, 4, REDA_FAST_BUFFER_POOL_UNLIMITED}, /* sampleCount */ \
      {1, 4, REDA_FAST_BUFFER_POOL_UNLIMITED}, /* instanceCount */ \
      4, /* maxSamplesPerInstance */ \
      1 /* instanceHashBuckets */ \
    }, \
    PRES_PS_READER_RESOURCE_LIMITS_DEFAULT,                   \
    PRES_READER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT, /* readerDataLifecycle */  \
    RTI_FALSE, /* skipOnDataOnReaders */                      \
    RTI_TRUE, /* matchWithLocal */                            \
    PRES_TYPE_SUPPORT_QOS_POLICY_DEFAULT, /* typeSupport */  \
    RTI_FALSE, /* expectsInlineQos */                        \
    RTI_FALSE,  /* propagateDisposeOfUnregisteredInstances */ \
    RTI_FALSE,  /* propagateUnregisterOfDisposedInstances */ \
    RTI_FALSE, /* deserializeSampleSignature */ \
    PRES_PS_AVAILABILITY_QOS_POLICY_DEFAULT \
}

struct PRESPsBeReaderProperty {
    /*e Partially mutable superclass instance. */
    struct PRESPsReaderProperty parent;
};


/*e \ingroup PRESPsServiceModule
 * Default property values for a best effort reader.
 */
#define PRES_PS_BE_READER_PROPERTY_DEFAULT {         \
    PRES_PS_READER_PROPERTY_DEFAULT, /* parent */    \
}

struct PRESPsSrReaderProperty {
    /*e Partially mutable superclass instance. */
    struct PRESPsReaderProperty parent;
    /*e mutable. Min delay between sending an ACk and receiving a HB. */
    struct RTINtpTime ackDelayMin;
    /*e mutable. Max delay between sending an ACk and receiving a HB. */
    struct RTINtpTime ackDelayMax;
    /*e mutable. The maximum of samples (received or not) to put into one nack
      message.<br>
      TODO: not used yet.
     */
    int maxSamplesPerNack;
    /*e mutable. The rate to send periodic ACKs. If set to ZERO, no periodic
      ACK gets sent. Currently just left as default. It is used in
      commend but not really tested. */
    struct RTINtpTime nackPeriod;
    /*e mutable. The max retries of ACKs before deactivating a remote writer,
      if nothing received from that remote writer during the retry period.
      Currently left as default. It is used in commend but not really tested.
    */
    int nackRetriesMax;

    /*e mutable. To avoid responding to too frequent HBs. */
    struct RTINtpTime heartbeatSuppressionDuration;

    /*e immutable.  Reliability receive window. */
    int receiveWindowSize;

    /*e immutable.  Estimate of round-trip time */
    struct RTINtpTime roundTripTime;

    /*e mutable. Period which reader sends app-acks */
    struct RTINtpTime appAckPeriod;

    /*e mutable. Minimum duration for which an app-ack payload is cached by a reader */
    struct RTINtpTime minAppAckResponseKeepDuration;

    /*e mutable. */
    int samplesPerAppAck;
};


/*e \ingroup PRESPsServiceModule
 * Default property values for a reliable reader.
 */
#define PRES_PS_SR_READER_PROPERTY_DEFAULT {      \
    PRES_PS_READER_PROPERTY_DEFAULT, /* parent */ \
    {0, 0}, /* ackDelayMin */                     \
    {0, 0}, /* ackDelayMax */                     \
    256, /* maxSamplesPerNack */                  \
    {5, 0}, /* nackPeriod */                      \
    1, /* maxNackRetries */                       \
    {0, 0x10000000}, /* heartbeatSupressionDuration */  \
    256, /* receiveWindowSize */                   \
    {0, 0}, /* roundTripTime */                    \
    {5, 0}, /* appAckPeriod */ \
    {0, 0}, /* minAppAckResponseKeepDuration */ \
    1 /* samplesPerAppAck */ \
}

struct PRESPsAnonReaderProperty {
    /*e parent property */
    struct PRESPsSrReaderProperty parent;
    /*e The oid of the remote writer from which the anon reader expects to
      receive data. */
    MIGRtpsObjectId remoteWriterOid;
};


/*e \ingroup PRESPsServiceModule */
#define PRES_PS_ANON_READER_PROPERTY_DEFAULT {          \
    PRES_PS_SR_READER_PROPERTY_DEFAULT, /* parent */    \
    MIG_RTPS_OBJECT_ID_UNKNOWN /* remoteWriterOid */ \
}

struct PRESPsRemoteWriterProperty {
    /*e The properties inherited from our supertype. */
    struct PRESRemoteEndpointProperty parent;
    /*e The parameter values. */
    struct PRESPsPublicationParameter parameter;
    /*e The highest sequence number the remote writer has. Set to UNKNOWN if
      unknown. */
    struct REDASequenceNumber *maxAvailableSn;
    /*e Number of locatorFilter derived sessions */
    RTI_INT32 numberOfSessions;
};


/*e \ingroup PRESPsServiceModule
 * The default property values of a remote writer.
 */
#define PRES_PS_REMOTE_WRITER_PROPERTY_DEFAULT {                  \
    PRES_REMOTE_ENDPOINT_PROPERTY_DEFAULT, /* parent */ \
    PRES_PS_PUBLICATION_PARAMETER_DEFAULT, /* parameter */ \
    NULL, /* maxAvailableSn */          \
    1 /* numberOfSessions */ \
}

struct PRESPsRemoteReaderProperty {
    /*e Superclass instance. */
    struct PRESRemoteEndpointProperty parent;
    /*i Type code name. */
    /* We need this to store typeCodeName for Java, when typecode is > 64k.
     * In that case, typecode is not saved, and creation of CFT fails,
     * because we cannot compile, because the class cannot be looked up in Java.
     * If we have the typecode name, then Java can look up the class, and
     * compile the filter successfully.
     */
    const char *typeCodeName;                
    /*e Parameter. */
    struct PRESPsSubscriptionParameter parameter;
};


/*e \ingroup PRESPsServiceModule
 * The default property values of a remote reader.
 */
#define PRES_PS_REMOTE_READER_PROPERTY_DEFAULT {                \
    PRES_REMOTE_ENDPOINT_PROPERTY_DEFAULT, /* parent */         \
    NULL, /* typeCodeName */                                    \
    PRES_PS_SUBSCRIPTION_PARAMETER_DEFAULT /* parameter */     \
}

struct PRESPsReaderListener;

struct REDAWorker;

typedef void
(*PRESPsReaderListenerOnRequestedDeadlineMissedCallback)(
    const struct PRESPsReaderListener *listener,
    struct PRESPsReader *reader,
    const struct PRESRequestedDeadlineMissedStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsReaderListenerOnRequestedIncompatibleQosCallback)(
    const struct PRESPsReaderListener *listener,
    struct PRESPsReader *reader,
    const struct PRESRequestedIncompatibleQosStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsReaderListenerOnSampleRejectedCallback)(
    const struct PRESPsReaderListener *listener,
    struct PRESPsReader *reader,
    const struct PRESSampleRejectedStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsReaderListenerOnLivelinessChangedCallback)(
    const struct PRESPsReaderListener *listener,
    struct PRESPsReader *reader,
    const struct PRESLivelinessChangedStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsReaderListenerOnSampleLostCallback)(
    const struct PRESPsReaderListener *listener,
    struct PRESPsReader *reader,
    const struct PRESSampleLostStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsReaderListenerOnLivelinessUpdatedCallback)(
    const struct PRESPsReaderListener *listener,
    struct PRESPsReader *reader,
    const struct PRESLivelinessUpdatedStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsReaderListenerOnSubscriptionMatchCallback)(
    const struct PRESPsReaderListener *listener,
    struct PRESPsReader *reader,
    const struct PRESSubscriptionMatchStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsReaderListenerOnDataAvailableCallback)(
    const struct PRESPsReaderListener *listener,
    struct PRESPsReader *reader,
    struct REDAWorker *worker);

struct PRESPsReaderListener {
    PRESPsReaderListenerOnRequestedDeadlineMissedCallback
        onRequestedDeadlineMissed;
    PRESPsReaderListenerOnRequestedIncompatibleQosCallback
        onRequestedIncompatibleQos;
    PRESPsReaderListenerOnSampleRejectedCallback onSampleRejected;
    PRESPsReaderListenerOnLivelinessChangedCallback onLivelinessChanged;
    PRESPsReaderListenerOnSampleLostCallback onSampleLost;
    PRESPsReaderListenerOnSubscriptionMatchCallback onSubscriptionMatch;
    PRESPsReaderListenerOnDataAvailableCallback onDataAvailable;
    /* For discovery usage only for now */
    PRESPsReaderListenerOnLivelinessUpdatedCallback onLivelinessUpdated;
};

struct PRESPsWriterListener;

typedef void
(*PRESPsWriterListenerOnOfferedDeadlineMissedCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    const struct PRESOfferedDeadlineMissedStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsWriterListenerOnOfferedIncompatibleQosCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    const struct PRESOfferedIncompatibleQosStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsWriterListenerOnLivelinessLostCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    const struct PRESLivelinessLostStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsWriterListenerOnLivelinessChangedCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    const struct PRESLivelinessChangedStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsWriterListenerOnPublicationMatchCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    const struct PRESPublicationMatchStatus *status,
    struct REDAWorker *worker);

typedef void
(*PRESPsWriterListenerOnPublicationReliableQueueCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    const struct PRESPublicationReliableQueueStatus *status,
    struct REDAWorker *worker);

typedef void*
(*PRESPsWriterListenerOnDataRequestCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    const struct PRESCookie *cookie,
    struct REDAWorker *worker);

typedef void
(*PRESPsWriterListenerOnDataReturnCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    void* instanceData,
    const struct PRESCookie *cookie,
    struct REDAWorker *worker);

typedef void
(*PRESPsWriterListenerOnSampleRemovedCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    const struct PRESCookie *cookie,
    struct REDAWorker *worker);

typedef void
(*PRESPsWriterListenerOnDestinationUnreachableCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    const struct PRESInstanceHandle *subscriptionHandle,
    const struct RTINetioLocator *destination,
    struct REDAWorker *worker);

typedef void
(*PRESPsWriterListenerOnInstanceReplacedCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    const struct PRESInstanceHandle *instanceHandle,
    struct REDAWorker *worker);

typedef void
(*PRESPsWriterListenerOnApplicationAcknowledgmentCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    struct PRESAcknowledgmentInfo *ackInfo,
    struct REDAWorker *worker);

typedef void
(*PRESPsWriterListenerOnServiceRequestAcceptedCallback)(
    const struct PRESPsWriterListener *listener,
    struct PRESPsWriter *writer,
    const struct PRESServiceRequestAcceptedStatus *status,
    struct REDAWorker *worker);

struct PRESPsWriterListener {
    PRESPsWriterListenerOnOfferedDeadlineMissedCallback
    onOfferedDeadlineMissed;
    PRESPsWriterListenerOnOfferedIncompatibleQosCallback
    onOfferedIncompatibleQos;
    PRESPsWriterListenerOnLivelinessLostCallback onLivelinessLost;
    PRESPsWriterListenerOnLivelinessChangedCallback onLivelinessChanged;
    PRESPsWriterListenerOnPublicationMatchCallback onPublicationMatch;
    PRESPsWriterListenerOnPublicationReliableQueueCallback
        onPublicationReliableQueue;
    PRESPsWriterListenerOnDataRequestCallback onDataRequest;
    PRESPsWriterListenerOnDataReturnCallback onDataReturn;
    PRESPsWriterListenerOnSampleRemovedCallback onSampleRemoved;
    PRESPsWriterListenerOnDestinationUnreachableCallback
        onDestinationUnreachable;
    PRESPsWriterListenerOnInstanceReplacedCallback onInstanceReplaced;
    PRESPsWriterListenerOnApplicationAcknowledgmentCallback
        onApplicationAcknowledgment;
    PRESPsWriterListenerOnServiceRequestAcceptedCallback onServiceRequestAccepted;
};


#define PRESPsWriterGroup PRESGroup
#define PRESPsReaderGroup PRESGroup

struct PRESPsWriterGroupProperty {
    /*e immutable */
    struct PRESGroupProperty parent;
    /*e immutable */
    struct PRESPresentationQosPolicy presentation;
    /*e mutable */
    struct PRESPartitionQosPolicy partition;
    /*e mutable */
    struct PRESGroupDataQosPolicy groupData;
    /*e immutable */
    struct PRESAsynchronousPublisherQosPolicy asynchronousPublisher;
    /*e mutable */
    struct PRESEntityFactoryQosPolicy entityFactory;    
    /*e immutable

        whether this group needs to be destroyed when deleteContainedEntities
        is called on the factory
    */
    RTIBool explicitDestroyOnly;
    /*e immutable */
    struct PRESEntityNameQosPolicy publisherName;
};


    /*e \ingroup PRESPsWriterGroupModule
     * Default values for PRESPsWriterGroupProperty.
     */
#define PRES_PS_WRITER_GROUP_PROPERTY_DEFAULT {                      \
    PRES_GROUP_PROPERTY_DEFAULT,                                     \
    {PRES_INSTANCE_PRESENTATION_QOS, RTI_FALSE, RTI_FALSE},          \
    {{0, 0, NULL}},                                                  \
    {{0, 0, NULL}},                                                  \
    PRES_ASYNCHRONOUS_PUBLISHER_QOS_POLICY_DEFAULT,                  \
    {RTI_TRUE},                                                      \
    RTI_FALSE,                                                       \
    PRES_ENTITY_NAME_QOS_POLICY_DEFAULT /* publisher name */         \
}


struct PRESPsReaderGroupProperty {
    /*e immutable */
    struct PRESGroupProperty parent;
    /*e immutable */
    struct PRESPresentationQosPolicy presentation;
    /*e mutable */
    struct PRESPartitionQosPolicy partition;
    /*e mutable */
    struct PRESGroupDataQosPolicy groupData;
    /*e mutable */
    struct PRESEntityFactoryQosPolicy entityFactory;
    /*e immutable

        whether this group needs to be destroyed when deleteContainedEntities
        is called on the factory
    */
    RTIBool explicitDestroyOnly;
    /*e immutable */
    struct PRESEntityNameQosPolicy subscriberName;
};


    /*e \ingroup PRESPsReaderGroupModule
     * Default values for PRESPsReaderGroupProperty.
     */
#define PRES_PS_READER_GROUP_PROPERTY_DEFAULT {                      \
    PRES_GROUP_PROPERTY_DEFAULT,                                     \
    {PRES_INSTANCE_PRESENTATION_QOS, RTI_FALSE, RTI_FALSE},          \
    {{0, 0, NULL}},                                                  \
    {{0, 0, NULL}},                                                  \
    {RTI_TRUE},                                                      \
    RTI_FALSE,                                                       \
    PRES_ENTITY_NAME_QOS_POLICY_DEFAULT /* subscriber name */        \
}

struct PRESPsReaderGroupListener;

typedef void
(*PRESPsReaderGroupListenerOnDataOnReadersCallback)(
    const struct PRESPsReaderGroupListener *listener,
    struct PRESPsReaderGroup *readerGroup,
    struct REDAWorker *worker);

struct PRESPsReaderGroupListener {
    struct PRESPsReaderListener readerListener;
    PRESPsReaderGroupListenerOnDataOnReadersCallback onDataOnReaders;
};

struct PRESPsWriterGroupListener {
    struct PRESPsWriterListener writerListener;
};

typedef RTIBool
(*PRESPsServiceEntityEnableListenerTopicQueryEnableFnc)(
    void* topicQueryEnableParam,
    void* userObject, 
    struct REDAWorker *worker);


struct PRESPsServiceEntityEnableListener {
    PRESPsServiceEntityEnableListenerTopicQueryEnableFnc
        onTopicQueryEnable;
    void* topicQueryEnableParam;    
};

struct PRESPsServiceEntityFinalizeListener;

typedef void
(*PRESPsServiceEntityFinalizeListenerOnBeforeReaderFinalizeFnc)(
    void* readerFinalizeParam,
    void* userObject, struct REDAWorker *worker);

typedef void
(*PRESPsServiceEntityFinalizeListenerOnBeforeWriterFinalizeFnc)(
    void* writerFinalizeParam,
    void* userObject, struct REDAWorker *worker);

typedef void
(*PRESPsServiceEntityFinalizeListenerOnBeforeReaderGroupFinalizeFnc)(
    void* readerGroupFinalizeParam,
    void* userObject, struct REDAWorker *worker);

typedef void
(*PRESPsServiceEntityFinalizeListenerOnBeforeWriterGroupFinalizeFnc)(
    void* writerGroupFinalizeParam,
    void* userObject, struct REDAWorker *worker);

typedef void
(*PRESPsServiceEntityFinalizeListenerOnBeforeReadConditionFinalizeFnc)(
    void* readConditionFinalizeParam,
    void* userObject, struct REDAWorker *worker);

typedef void
(*PRESPsServiceEntityFinalizeListenerOnBeforeTopicQueryFinalizeFnc)(
    void* topicQueryFinalizeParam,
    void* userObject, struct PRESPsReader *reader, struct REDAWorker *worker);

struct PRESPsServiceEntityFinalizeListener {
    PRESPsServiceEntityFinalizeListenerOnBeforeReaderFinalizeFnc
        onBeforeReaderFinalizeFnc;
    void* readerFinalizeParam;
    PRESPsServiceEntityFinalizeListenerOnBeforeWriterFinalizeFnc
        onBeforeWriterFinalizeFnc;
    void* writerFinalizeParam;

    PRESPsServiceEntityFinalizeListenerOnBeforeReaderGroupFinalizeFnc
        onBeforeReaderGroupFinalizeFnc;
    void* readerGroupFinalizeParam;
    PRESPsServiceEntityFinalizeListenerOnBeforeWriterGroupFinalizeFnc
        onBeforeWriterGroupFinalizeFnc;
    void* writerGroupFinalizeParam;

    PRESPsServiceEntityFinalizeListenerOnBeforeReadConditionFinalizeFnc
        onBeforeReadConditionFinalizeFnc;
    void* readConditionFinalizeParam;

    PRESPsServiceEntityFinalizeListenerOnBeforeTopicQueryFinalizeFnc
        onBeforeTopicQueryFinalizeFnc;
    void* topicQueryFinalizeParam;
};

struct PRESPsServiceActivityListener;

typedef void
(*PRESPsServiceStatusListenerOnNewWriterLocatorPairFnc)(
    void *parameter,
    const struct MIGRtpsGuid *localWriterGuid,
    const struct RTINetioLocator *locator,
    struct REDAWorker *worker);

typedef void
(*PRESPsServiceStatusListenerOnDeletedWriterLocatorPairFnc)(
    void *parameter,
    const struct MIGRtpsGuid *localWriterGuid,
    const struct RTINetioLocator *locator,
    struct REDAWorker *worker);

typedef void
(*PRESPsServiceStatusListenerOnNewMatchingPairFnc)(
    void *parameter,
    const struct MIGRtpsGuid *localEntityGuid,
    const struct MIGRtpsGuid *remoteEntityGuid,
    struct REDAWorker *worker);

typedef void
(*PRESPsServiceStatusListenerOnDeletedMatchingPairFnc)(
    void *parameter,
    const struct MIGRtpsGuid *localEntityGuid,
    const struct MIGRtpsGuid *remoteEntityGuid,
    struct REDAWorker *worker);

struct PRESPsServiceStatusListener {
    void *parameter;

    PRESPsServiceStatusListenerOnNewWriterLocatorPairFnc
	 onNewWriterLocatorPair;
    PRESPsServiceStatusListenerOnDeletedWriterLocatorPairFnc
         onDeletedWriterLocatorPair;
    PRESPsServiceStatusListenerOnNewMatchingPairFnc
    	onNewMatchingPair;
    PRESPsServiceStatusListenerOnDeletedMatchingPairFnc
    	onDeletedMatchingPair;
};

struct PRESPsServiceListener {
    struct PRESPsReaderGroupListener readerGroupListener;
    struct PRESPsWriterGroupListener writerGroupListener;
};


/*e \ingroup PRESPsServiceBuiltinChannelForwarderModule
   Forwarder for interacting with dds c builtin channel samples. It consist of
   function pointers to DDS C Builtin Channel Forwarder implentation.

   A Builtin Channel is a communication channel for providing a set of services:
    - Each channel is identified by a channelTopicName and characterized by a
      set of QoS.
    - Each service is identified by a serviceId. For channels providing only one
      service, the service-id is 0

   To add a new channel and/or service the following changes are needed:
    1) DDS C BuiltinChannelForwarder.c: add a new switch case for the
       channelTopicName/serviceId in the forwarder functions. No changes needed
       for unused forwarder functions
    2) PsService.c: add a new switch case to the dispatchBuiltinChannelSample.
 */
#define PRESPsServiceBuiltinChannelForwarder PRESBuiltinChannelForwarder

struct PRESPsServiceProperty {
    /*e various table properties */
    struct REDATableProperty writerTable, readerTable,
 	remoteWriterTable, remoteReaderTable,
	matchingRemoteWriterTable, matchingRemoteReaderTable,
        writerGroupTable, readerGroupTable, remoteTopicQueryTable;

    struct REDAFastBufferPoolGrowthProperty readConditionPool;
    struct REDAFastBufferPoolGrowthProperty queryConditionPool;

    /*e Destination fan-out max */
    int destinationFanoutMax;

    /*e reader group group data fast buffer setup */
    int readerGroupGroupDataMaximumLength;
    /*e writer group group data fast buffer setup */
    int writerGroupGroupDataMaximumLength;
    /*e reader user data fast buffer setup */
    int readerUserDataMaximumLength;
    /*e writer user data fast buffer setup */
    int writerUserDataMaximumLength;
    /*e topic data buffer setup */
    int topicDataMaximumLength;
    /*e partition table setup
      Maximum cumulative length of all the partition name strings,
      including comma and terminating null.
      This value cannot be greater then
      PRES_PS_PARTITION_MAXIMUM_CUMULATIVE_LENGTH_LIMIT */
    int partitionMaximumCumulativeLength;
    /*e Content filter property setup
      Maximum length of the filter property */
    int contentFilterPropertyMaxLength;
    /*e Size of user object to be stored in writer group */
    int writerGroupUserObjectSize;
    /*e Alignment user object to be stored in writer group */
    int writerGroupUserObjectAlignment;
    /*e Size of user object to be stored in writer */
    int writerUserObjectSize;
    /*e Alignment of user object to be stored in writer */
    int writerUserObjectAlignment;
    /*e Size of user object to be stored in reader group */
    int readerGroupUserObjectSize;
    /*e Alignment user object to be stored in reader group */
    int readerGroupUserObjectAlignment;
    /*e Size of user object to be stored in reader */
    int readerUserObjectSize;
    /*e Alignment of user object to be stored in reader */
    int readerUserObjectAlignment;
    /*e Size of user object to be stored in read condition */
    int readConditionUserObjectSize;
    /*e Alignment user object to be stored in read condition */
    int readConditionUserObjectAlignment;
    /*e Size of user object to be stored in query condition */
    int queryConditionUserObjectSize;
    /*e Alignment user object to be stored in query condition */
    int queryConditionUserObjectAlignment;
    /*e Size of user object to be stored in index condition */
    int indexConditionUserObjectSize;
    /*e Alignment user object to be stored in index condition */
    int indexConditionUserObjectAlignment;
    /*e The maximum rate at which to check for liveliness of remote writers.
        The smaller value between this and the minimum liveiness lease
	duration among all local readers will be used as the actual purge
	period.
     */
    struct RTINtpTime maxPurgePeriod;

    /*e Determine if the default partition element is treated as a special
        value that matches any partition */
    RTIBool defaultPartitionMatchAll;

    /*e Determine if it is allowed for an entity to not belonging to any
        physical partition */
    RTIBool allowNoPartition;

    /*e Maximum number of properties associated to a data writer*/
    int writerMaxPropertyLength;
    /*e Maximum string length of the properties associated to a data writer.
        The string length is defined as the cumulative length in bytes
        (not including NULL terminated char) of all
        the pair (name,value) associated to the writer properties */
    int writerMaxPropertyStringLength;
    /*e Maximum number of properties associated to a data reader*/
    int readerMaxPropertyLength;
    /*e Maximum string length of the properties associated to a data reader.
        The string length is defined as the cumulative length in bytes
        (not including NULL terminated char) of all
        the pair (name,value) associated to the reader properties */
    int readerMaxPropertyStringLength;

    /* Maximum length of Locator Filter Sequence */
    int locatorFilterSeqMaxLength;
    /* Maximum length of Locator Filter Expression */
    int locatorFilterExpressionMaxLength;

    int maxEndpointGroups;
    /*e Maximum string length of all the endpoint groups associated
        with availabilityQosPolicy.
        The string length is defined as the cumulative length in bytes
        (not including NULL terminated char) of all role names
        associated with the groups.
    */
    int maxEndpointGroupCumulativeCharacters;

};


/*e \ingroup PRESPsServiceModule
  Default value of maximum length of groupData
 */
#define PRES_PS_GROUP_DATA_MAXIMUM 256

/*e \ingroup PRESPsServiceModule
  Default value of maximum length of userData
 */
#define PRES_PS_USER_DATA_MAXIMUM 256

/*e \ingroup PRESPsServiceModule
  Default value of maximum length of property list
 */
#define PRES_PS_PROPERTY_LIST_MAXIMUM 32

/*e \ingroup PRESPsServiceModule
  Default value of maximum length of property string
 */
#define PRES_PS_PROPERTY_STRING_MAXIMUM 1024

/*e \ingroup PRESPsServiceModule
  Default value of maximum cumulative length for partition
 */
#define PRES_PS_PARTITION_MAXIMUM_CUMULATIVE_LENGTH_DEFAULT 0


/*e \ingroup PRESPsServiceModule
  Default value of maximum length of property list
 */
#define PRES_PS_ENDPOINT_GROUPS_MAXIMUM 32


/*e \ingroup PRESPsServiceModule
 * Default value of PRESPsServiceProperty instances.
 */
#define PRES_PS_SERVICE_PROPERTY_DEFAULT {                         \
 /* writerTable */                            \
    {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
 /* readerTable */                            \
    {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
 /* remoteWriterTable */                      \
    {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
 /* remoteReaderTable */                      \
    {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
 /* matchingRemoteWriterTable */              \
    {{4,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
 /* matchingRemoteReaderTable */              \
    {{4,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
 /* writerGroupTable */              \
    {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
 /* readerGroupTable */              \
    {{8,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
 /* remoteTopicQueryTable */ \
    {{1,REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, 1},\
 /* readConditionPool */              \
    {4, REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, \
 /* queryConditionPool */              \
    {4, REDA_FAST_BUFFER_POOL_UNLIMITED,REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    PRES_PARTICIPANT_IPADDRESS_COUNT_MAX, /* destinationFanoutMax */      \
    PRES_PS_GROUP_DATA_MAXIMUM, /* writerGroupGroupDataMaximumLength */ \
    PRES_PS_GROUP_DATA_MAXIMUM, /* readerGroupGroupDataMaximumLength */ \
    PRES_PS_USER_DATA_MAXIMUM, /* writerUserDataMaximumLength */ \
    PRES_PS_USER_DATA_MAXIMUM, /* readerUserDataMaximumLength */ \
    PRES_PARTICIPANT_TOPIC_DATA_MAXIMUM, /* topicDataMaximumLength */ \
    PRES_PS_PARTITION_MAXIMUM_CUMULATIVE_LENGTH_DEFAULT,           \
    PRES_CONTENT_FILTER_PROPERTY_LEN_MAX,                          \
    0, /* writerGroupUserObjectSize */                             \
    0, /* writerGroupUserObjectAlignment */                        \
    0, /* writerUserObjectSize */                                  \
    0, /* writerUserObjectAlignment */                             \
    0, /* readerGroupUserObjectSize */                             \
    0, /* readerGroupUserObjectAlignment */                        \
    0, /* readerUserObjectSize */                                  \
    0, /* readerUserObjectAlignment */                             \
    0, /* readConditionUserObjectSize */                           \
    0, /* readConditionUserObjectAlignment */                      \
    0, /* queryConditionUserObjectSize */                          \
    0, /* queryConditionUserObjectAlignment */                     \
    0, /* indexConditionUserObjectSize */                          \
    0, /* indexConditionUserObjectAlignment */                     \
    {60, 0}, /* maxPurgePeriod */                                  \
    RTI_FALSE, /* defaultPartitionMatchAll */                      \
    RTI_FALSE, /* allowNoPartition */                               \
    PRES_PS_PROPERTY_LIST_MAXIMUM, /* writerMaxPropertyLength */   \
    PRES_PS_PROPERTY_STRING_MAXIMUM, /* writerMaxPropertyStringLength */ \
    PRES_PS_PROPERTY_LIST_MAXIMUM, /* readerMaxPropertyLength */   \
    PRES_PS_PROPERTY_STRING_MAXIMUM, /* readerMaxPropertyStringLength */ \
    PRES_LOCATOR_FILTER_DEFAULT_SEQ_LEN_MAX,                       \
    PRES_LOCATOR_FILTER_DEFAULT_EXPRESSION_LEN_MAX,                \
    PRES_PS_ENDPOINT_GROUPS_MAXIMUM,                               \
    PRES_PS_ENDPOINT_GROUP_MAXIMUM_CUMULATIVE_LENGTH_LIMIT         \
}

struct PRESInlineQosExpected {
    /* DURABILITY */
    struct PRESDurabilityQosPolicy durabilityQos;
    /* PRESENTATION */
    struct PRESPresentationQosPolicy presentationQos;
    /* DEADLINE */
    struct PRESDeadlineQosPolicy deadlineQos;
    /* LATENCY_BUDGET */
    struct PRESLatencyBudgetQosPolicy latencyBudgetQos;
    /* OWNERSHIP */
    struct PRESOwnershipQosPolicy ownershipQos;
    /* OWNERSHIP_STRENGTH */
    struct PRESOwnershipStrengthQosPolicy ownershipStrengthQos;
    /* LIVELINESS */
    struct PRESLivelinessQosPolicy livelinessQos;
    /* PARTITION */
    struct PRESPartitionQosPolicy partitionQos;
    /* RELIABILITY */
    struct PRESReliabilityQosPolicy reliablityQos;
    /* TRANPORT_PRIORITY */
    struct PRESTransportPriorityQosPolicy tranportPriorityQos;
    /* LIFESPAN */
    struct PRESLifespanQosPolicy lifespanQos;
    /* DESTINATION_ORDER */
    struct PRESDestinationOrderQosPolicy destinationOrderQos;
};


#define PRES_INLINE_QOS_EXPECTED_DEFAULT { \
PRES_PS_PUBLICATION_PARAMETER_DURABILITY_QOS_POLICY_DEFAULT,    \
PRES_PS_PUBLICATION_PARAMETER_PRESENTATION_QOS_POLICY_DEFAULT,  \
PRES_PS_PUBLICATION_PARAMETER_DEADLINE_QOS_POLICY_DEFAULT,      \
PRES_PS_PUBLICATION_PARAMETER_LATENCY_BUDGET_QOS_POLICY_DEFAULT,      \
PRES_PS_PUBLICATION_PARAMETER_OWNERSHIP_QOS_POLICY_DEFAULT, \
{PRES_PS_PUBLICATION_PARAMETER_STRENGTH_DEFAULT},    \
PRES_PS_PUBLICATION_PARAMETER_LIVELINESS_QOS_POLICY_DEFAULT,    \
PRES_PS_PUBLICATION_PARAMETER_PARTITION_QOS_POLICY_DEFAULT, \
PRES_PS_PUBLICATION_PARAMETER_RELIABILITY_QOS_POLICY_DEFAULT,   \
{0}, /* transport priority */ \
PRES_PS_PUBLICATION_PARAMETER_LIFESPAN_QOS_POLICY_DEFAULT,  \
PRES_PS_PUBLICATION_PARAMETER_DESTINATION_ORDER_QOS_POLICY_DEFAULT \
}

struct PRESParticipant;

struct PRESPsService;

struct PRESLoanedSampleInfoListener;


struct PRESPsServiceDescription {    
    /* @brief The participant the service will be registered with. */
    struct PRESParticipant * participant;
    /* @brief Network interface configuration */
    struct RTINetioConfigurator * configuratorIn;
    /* @brief Property used to configure the service. */
    struct PRESPsServiceProperty property;
    /* @brief Worker factory. Optional */
    struct REDAWorkerFactory * workerFactory;
    /* @brief Database for saving entity information.*/
    struct REDADatabase * database;
    /* @brief Clock to be used to get time.*/
    struct RTIClock * clock;
    /* @brief Clock used to get source/reception timestamps. */
    struct RTIClock * timestampClock;
    /* @brief  Exclusive area to be used for all tables. */
    struct REDAExclusiveArea * tableEa;
    /* @brief Exclusive area to be used for remote endpoints and intra transport. */
    struct REDAExclusiveArea * remoteEa;
    /* @brief  */
    struct REDAExclusiveArea * blockingWriteEa; 
    /* @brief Listener for monitoring events Optional. */
    const struct PRESPsServiceStatusListener * statusListener;
    /* @brief Enabler listener to receive notifications when local entities
       are enabled. Optional. */
    const struct PRESPsServiceEntityEnableListener * enableListener;
    /* @brief Finalize listener to receive notifications when local entities
       are deleted. Optional. */
    const struct PRESPsServiceEntityFinalizeListener * finalizeListener;
    /* @brief */
    const struct PRESLoanedSampleInfoListener * sampleInfoListener;    
    /* @brief Service listener. Optional. */
    const struct PRESPsServiceListener *listener;
    /* @brief Indicates the communication status changes be informed through 
     * the listener if listener is not NULL.*/
    PRESStatusKindMask listenerMask;
    /* @brief Builtin channel forwarder for interacting with DDSC builtin
     * channels from PRES. */
    const struct PRESPsServiceBuiltinChannelForwarder *builtinChannelForwarder;
};


#define PRESPsServiceDescription_INITIALIZER {\
    NULL, /* participant */\
    NULL, /* configuratorIn */ \
    PRES_PS_SERVICE_PROPERTY_DEFAULT, /* property */\
    NULL, /* workerFactory */\
    NULL, /* database */\
    NULL, /* clock */\
    NULL, /* timestampClock */\
    NULL, /* tableEa */\
    NULL, /* remoteEa */\
    NULL, /* blockingWriterEa */\
    NULL, /* statusListener */\
    NULL, /* enableListener */\
    NULL, /* finalizeListener */\
    NULL, /* sampleInfoListener */\
    NULL, /* listener */\
    0,    /* mask */\
    NULL  /* builtinChannelForwarder */\
}

extern PRESDllExport 
struct PRESPsService * PRESPsService_new(
        struct PRESPsServiceDescription * serviceDescription,
        struct REDAWorker *worker);

extern PRESDllExport struct PRESPsService *
PRESPsService_new_deprecated(struct PRESParticipant *participant,
                  struct RTINetioConfigurator* configuratorIn,
		  struct PRESPsServiceProperty *property,
		  struct REDAWorkerFactory *workerFactory,
		  struct REDADatabase *db,
		  struct RTIClock *clock, struct REDAExclusiveArea *tableEa,
		  struct REDAExclusiveArea *remoteRecordEa,
		  struct REDAExclusiveArea *blockingWriteEa,
		  const struct PRESPsServiceStatusListener *statusListener,
		  const struct PRESPsServiceEntityFinalizeListener
		  *finalizeListener,
		  const struct PRESLoanedSampleInfoListener *sampleInfoListener,
		  const struct PRESPsServiceListener *listener,
		  PRESStatusKindMask listenerMask,
		  struct REDAWorker *worker);

extern PRESDllExport void
PRESPsService_getProperty(struct PRESPsService *me,
                          struct PRESPsServiceProperty *property,
                          struct REDAWorker *worker);

extern PRESDllExport void
PRESPsService_setStatusListener(
    struct PRESPsService *me,
    const struct PRESPsServiceStatusListener *statusListener,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESPsService_getRemoteReaderProperty(
    struct PRESPsService* me, int *failReason,
    struct PRESPsRemoteReaderProperty *property,
    const struct MIGRtpsGuid *localWriterGuid,
    const struct MIGRtpsGuid *remoteReaderGuid,
    struct REDAWorker* worker);

extern PRESDllExport
void PRESPsService_returnRemoteReaderProperty(
    struct PRESPsService* me, 
    struct PRESPsRemoteReaderProperty *property,
    struct REDAWorker* worker);

extern PRESDllExport
RTIBool PRESPsService_getRemoteWriterProperty(
    struct PRESPsService* me, int *failReason,
    struct PRESPsRemoteWriterProperty *property,
    const struct MIGRtpsGuid *localReaderGuid,
    const struct MIGRtpsGuid *remoteWriterGuid,
    struct REDAWorker* worker);

extern PRESDllExport
void PRESPsService_returnRemoteWriterProperty(
    struct PRESPsService* me, 
    struct PRESPsRemoteWriterProperty *property,
    struct REDAWorker* worker);

extern PRESDllExport
int PRESPsService_getUserGroupCount(struct PRESPsService *service,
				    MIGRtpsRWType type);

extern PRESDllExport
RTIBool PRESPsService_lockAllGroups(struct PRESPsService *service,
				    int *failReason,
				    MIGRtpsRWType type,
				    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESPsService_unlockAllGroups(struct PRESPsService *service,
				      int *failReason,
				      MIGRtpsRWType type,
				      struct REDAWorker *worker);


#define PRESPsServiceIterator REDACursor

extern PRESDllExport
struct PRESPsServiceIterator *
PRESPsService_getIterator(struct PRESPsService *service,
			  int *failReason,
			  MIGRtpsRWType type,
			  struct REDAWorker *worker);

extern PRESDllExport
void PRESPsService_returnIterator(struct PRESPsService *me,
				  struct PRESPsServiceIterator *iter);

extern PRESDllExport
struct PRESGroup* PRESPsService_getNextGroup(
    struct PRESPsService *me,
    int *failReason,
    struct PRESPsServiceIterator *iter,
    PRESGroupSuffix groupSuffix,
    struct REDAWorker *worker);


#define PRESLocalReaderIterator REDACursor

extern PRESDllExport
struct PRESLocalReaderIterator *
PRESPsService_getLocalReaderIterator(struct PRESPsService *service,
              int *failReason,
              struct REDAWorker *worker);

extern PRESDllExport
void PRESPsService_returnLocalReaderIterator(struct PRESPsService *me,
                  struct PRESLocalReaderIterator *iter);

extern PRESDllExport
struct PRESPsReader* PRESPsService_getNextLocalReader(
    struct PRESPsService *me,
    int *failReason,
    RTIBool *isAnonymous,
    RTIBool *isReliable,
    struct PRESLocalReaderIterator *iter,
    struct REDAWorker *worker);


#define PRESLocalWriterIterator REDACursor

extern PRESDllExport
struct PRESLocalWriterIterator *
PRESPsService_getLocalWriterIterator(struct PRESPsService *service,
              int *failReason,
              struct REDAWorker *worker);

extern PRESDllExport
void PRESPsService_returnLocalWriterIterator(struct PRESPsService *me,
                  struct PRESLocalWriterIterator *iter);

extern PRESDllExport
struct PRESPsWriter* PRESPsService_getNextLocalWriter(
    struct PRESPsService *me,
    int *failReason,
    RTIBool *isAnonymous,
    RTIBool *isReliable,
    struct PRESLocalWriterIterator *iter,
    struct REDAWorker *worker);


#define PRESRemoteWriterIterator REDACursor

extern PRESDllExport
RTIBool PRESPsService_beginGetRemoteWriters(
    struct PRESPsService *self,
    struct PRESRemoteWriterIterator ** iter,
    RTI_INT32 *maxRemoteWriters,
    struct REDAWorker *worker); 

extern PRESDllExport
RTIBool PRESPsService_endGetRemoteWriters(
    struct PRESPsService *self,
    struct PRESRemoteWriterIterator * iter,
    struct REDAWorker *worker); 

extern PRESDllExport
RTIBool PRESPsService_getNextRemoteWriter(
    struct PRESPsService *self,
    int *failReason,
    RTIBool includeLocalEndpoint,
    struct PRESRemoteWriterIterator *iter,
    struct PRESInstanceHandle *handle,
    struct REDAWorker *worker); 


#define PRESRemoteReaderIterator REDACursor

extern PRESDllExport
RTIBool PRESPsService_beginGetRemoteReaders(
    struct PRESPsService *self,
    struct PRESRemoteReaderIterator ** iter,
    RTI_INT32 *maxRemoteReaders,
    struct REDAWorker *worker); 

extern PRESDllExport
RTIBool PRESPsService_endGetRemoteReaders(
    struct PRESPsService *self,
    struct PRESRemoteReaderIterator * iter,
    struct REDAWorker *worker); 

extern PRESDllExport
RTIBool PRESPsService_getNextRemoteReader(
    struct PRESPsService *self,
    int *failReason,
    RTIBool includeLocalEndpoint,
    struct PRESRemoteReaderIterator *iter,
    struct PRESInstanceHandle *handle,
    struct REDAWorker *worker); 

struct PRESPsWriterStatisticsListener;

struct PRESPsReaderStatisticsListener;

typedef void
(*PRESPsWriterStatisticsListenerOnMatchedReaderStatisticsRequestCallback)
(struct PRESPsWriterStatisticsListener *presStatsListener,
 struct PRESPsWriter *presWriter,
 struct PRESPsWriterMatchedReaderStatistics *presStats,
 const struct MIGRtpsGuid *matchedReader,
 struct REDAWorker *worker);

typedef void
(*PRESPsWriterStatisticsListenerOnMatchedDestinationStatisticsRequestCallback)
(struct PRESPsWriterStatisticsListener *presStatsListener,
 struct PRESPsWriter *presWriter,
 struct PRESPsWriterMatchedDestinationStatistics *presStats,
 const struct RTINetioLocator *matchedLocator,
 struct REDAWorker *worker);

struct PRESStatisticsListener {
    void *listener_data;
};

struct PRESPsWriterStatisticsListener {
    /* mirrors DDS_C as_listener struct, but exposed as ptr */
    struct PRESStatisticsListener as_listener;

    PRESPsWriterStatisticsListenerOnMatchedReaderStatisticsRequestCallback
        onMatchedReaderStatisticsRequest;

    PRESPsWriterStatisticsListenerOnMatchedDestinationStatisticsRequestCallback
        onMatchedDestinationStatisticsRequest;

};

typedef void
(*PRESPsReaderStatisticsListenerOnMatchedWriterStatisticsRequestCallback)
(struct PRESPsReaderStatisticsListener *presStatsListener,
 struct PRESPsReader *presReader,
 struct PRESPsReaderMatchedWriterStatistics *presStats,
 const struct MIGRtpsGuid *matchedWriter,
 struct REDAWorker *worker);

struct PRESPsReaderStatisticsListener {
    struct PRESStatisticsListener as_listener;

    PRESPsReaderStatisticsListenerOnMatchedWriterStatisticsRequestCallback
        onMatchedWriterStatisticsRequest;
};

extern PRESDllExport
RTIBool PRESPsService_registerWriterHistoryPlugin(
    struct PRESPsService *me,
    int *failReason,
    const char * pluginName,
    struct NDDS_WriterHistory_Plugin * plugin,
    struct REDAWorker *worker);

extern PRESDllExport struct NDDS_WriterHistory_Plugin *
PRESPsService_getWriterHistoryPlugin(
    struct PRESPsService *me,
    const char * name,
    struct REDAWorker *worker);

extern PRESDllExport void
PRESPsService_setSpinPerMicrosecond(
	struct PRESPsService *me,
    RTI_UINT64 spinPerMicrosecond);

extern PRESDllExport 
RTIBool PRESPsService_getLocalEndpointPropertyChangeEpoch(
        struct PRESPsService *me,
        int * failReason,
        RTI_INT64 * propertyChangeEpoch,
        struct PRESLocalEndpoint * endpoint,
        struct REDAWorker * worker);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* pres_psService_h */
