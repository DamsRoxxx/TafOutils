/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)pres_common.h    generated by: makeheader    Fri Feb 16 13:51:43 2018
 *
 *		built from:	common.ifc
 */

#ifndef pres_common_h
#define pres_common_h


  #ifndef osapi_ntptime_h
    #include "osapi/osapi_ntptime.h"
  #endif
 #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
 #endif
 #ifndef osapi_utility_h
    #include "osapi/osapi_utility.h"
 #endif
 #ifndef osapi_hash_h
    #include "osapi/osapi_hash.h"
 #endif 
 #ifndef osapi_alignment_h
    #include "osapi/osapi_alignment.h"
 #endif
 #ifndef osapi_thread_h
    #include "osapi/osapi_thread.h"
 #endif
 #ifndef reda_fastBuffer_h
    #include "reda/reda_fastBuffer.h"
 #endif
 #ifndef reda_weakReference_h
    #include "reda/reda_weakReference.h"
 #endif
 #ifndef event_jobDispatcher_h
    #include "event/event_jobDispatcher.h"
 #endif
 #ifndef event_activeGenerator_h
    #include "event/event_activeGenerator.h"
 #endif
 #ifndef netio_common_h
    #include "netio/netio_common.h" /*for RTI_NETIO_ALIAS_LIST_SEPARATOR*/
 #endif
 #ifndef mig_rtps_h
    #include "mig/mig_rtps.h"
 #endif
 #ifndef cdr_type_h
    #include "cdr/cdr_type.h"
 #endif
 #ifndef cdr_encapsulation_h
    #include "cdr/cdr_encapsulation.h"
 #endif
 #ifndef mig_generator_h
    #include "mig/mig_generator.h"
 #endif
  #ifndef pres_dll_h
    #include "pres/pres_dll.h"
  #endif
  #ifndef pres_log_h
    #include "pres/pres_log.h"
  #endif
 #ifndef pres_condition_h
    #include "pres/pres_condition.h"
 #endif

#ifdef __cplusplus
    extern "C" {
#endif

extern PRESDllExport NDDS_Transport_Port_t
PRESRtps_getWellKnownMulticastPort(
    int domain_id, NDDS_Transport_Port_t port_base, 
    int domain_id_gain, int port_offset);

extern PRESDllExport NDDS_Transport_Port_t
PRESRtps_getWellKnownUnicastPort(
    int domain_id, int participant_id, NDDS_Transport_Port_t port_base, 
    int domain_id_gain, int participant_id_gain, int port_offset);

struct PRESSampleInfo;

struct PRESFilterSampleInfo;

struct PRESExpressionProperty;

struct PRESDDSSequence;


#define PRES_PARTICIPANT_DISCOVERY_INITIAL_PARTICIPANT_ANNOUNCEMENTS_ON_ENABLE_PROPERTY "dds.participant.discovery_config.initial_participant_announcements_on_enable"
#define PRES_PARTICIPANT_DISCOVERY_USE_STATELESS_PARTICIPANT_DISCOVERY_READER_PROPERTY_NAME "dds.participant.discovery_config.use_stateless_participant_discovery_reader"
#define PRES_PARTICIPANT_DISCOVERY_DISABLE_SIGNATURE_VALIDATION_PROPERTY_NAME "dds.participant.discovery_config.disable_signature_validation"
#define PRES_PARTICIPANT_DISCOVERY_DISABLE_RECEIVED_DISCOVERY_PROTECTION_NAME "dds.participant.discovery_config.disable_received_discovery_protection"
#define PRES_PARTICIPANT_DISCOVERY_DISABLE_RTI_ENDPOINT_SECURITY_ATTRIBUTES_PROPAGATION_NAME "dds.participant.discovery_config.disable_rti_endpoint_security_attributes_propagation"

#define PRES_PARTICIPANT_DISCOVERY_SEND_PARTICIPANT_ANNOUNCEMENT_ON_DISCOVERY_PROPERTY "dds.participant.inter_participant_data_writer.protocol.send_participant_announcement_on_discovery"
#define PRES_PARTICIPANT_DISCOVERY_BROADCAST_PARTICIPANT_ANNOUNCEMENT_ON_DISCOVERY_PROPERTY "dds.participant.inter_participant_data_writer.protocol.broadcast_participant_announcement_on_discovery"
#define PRES_INTER_PARTICIPANT_DISABLE_PREEMPTIVE_NACK_PROPERTY "dds.participant.inter_participant_data_reader.protocol.disable_preemptive_nack"
#define PRES_INTER_PARTICIPANT_DISABLE_PREEMPTIVE_HEARTBEAT_PROPERTY "dds.participant.inter_participant_data_writer.protocol.disable_preemptive_heartbeat"


  #define PRES_OWNERSHIP_STRENGTH_QOS_POLICY_VALUE_MIN (-2147483647-1)


  #define PRES_TIME_BASED_FILTER_QOS_POLICY_MINIMUM_SEPARATION_MAX {100000000,0}


  #define PRES_DEADLINE_QOS_POLICY_DEADLINE_PERIOD_MAX {100000000,0}


  #define PRES_LIFESPAN_QOS_POLICY_LIFESPAN_DURATION_MAX {100000000,0}

typedef enum {
    /*e
     * Volatile.
     */
    PRES_VOLATILE_DURABILITY_QOS,
    
    /*e
     * Transient Local.
     */
    PRES_TRANSIENT_LOCAL_DURABILITY_QOS,

    /*e
     * Transient.
     */
    PRES_TRANSIENT_DURABILITY_QOS,
    
    /*e
     * Persistent.
     */
    PRES_PERSISTENT_DURABILITY_QOS
} PRESDurabilityQosPolicyKind;

typedef enum {
    /*e
     * No service
     */
    PRES_NO_SERVICE_QOS,

    /*e
     * Persistence service.
     */
    PRES_PERSISTENCE_SERVICE_QOS,
    
    /*e
     * Queuing service.
     */
    PRES_QUEUING_SERVICE_QOS,
    
    /*e
     * Routing Service.
     */
    PRES_ROUTING_SERVICE_QOS,
    
    /*e
     * Recording Service.
     */
    PRES_RECORDING_SERVICE_QOS,
    
    /*e
     * Replay Service.
     */
    PRES_REPLAY_SERVICE_QOS,

    /*e
     * Database Integration Service.
     */
    PRES_DATABASE_INTEGRATION_SERVICE_QOS,

    /*e
     * Web Integration Service.
     */
    PRES_WEB_INTEGRATION_SERVICE_QOS

    /* 
     * CORE-8245 IMPORTANT! When adding a new enumerator, make sure to add it
     * to DISCBuiltin_deserializeServiceQosPolicy in disc.2.0/srcC/builtin/Cdr.c
     */

} PRESServiceQosPolicyKind;

typedef enum {
    PRES_INSTANCE_PRESENTATION_QOS,
    PRES_TOPIC_PRESENTATION_QOS,
    PRES_GROUP_PRESENTATION_QOS,
    PRES_HIGHEST_OFFERED_PRESENTATION_QOS
} PRESPresentationQosPolicyAccessScopeKind;

typedef enum {
    /*e
     * Shared ownership.
     */
    PRES_SHARED_OWNERSHIP_QOS,

    /*e
     * Exclusive ownership.
     */
    PRES_EXCLUSIVE_OWNERSHIP_QOS
} PRESOwnershipQosPolicyKind;

typedef enum {
    /*e
     * Automatic.
     */
    PRES_AUTOMATIC_LIVELINESS_QOS,
    
    /*e
     * Manual by participant.
     */
    PRES_MANUAL_BY_PARTICIPANT_LIVELINESS_QOS,
    
    /*e
     * Manual by topic.
     */
    PRES_MANUAL_BY_TOPIC_LIVELINESS_QOS
} PRESLivelinessQosPolicyKind;

typedef enum {
    /*e
     * Best-effort (not reliable).
     */
    PRES_BEST_EFFORT_RELIABILITY_QOS = 0x01,
    
    /*e
     * Strict reliable.
  Guaranteed delivery enforced by publication.
  <UL>
    <LI>advantage
      <OL>
        <LI>messages are fully acknowledged
        <LI>the pub makes sure all messages are received and
        blocks the user from pumping more data in the
        system if this would lead to messaged being lost
        <LI>the pub KNOWS whether all subs have received an issue 
        or not; the user is alerted in case a sub becomes unresponsive
      </OL>
    <LI>disadvantage
      <OL>
        <LI>the throughput is essentially limited by the SLOWEST sub
    <LI>the pub must keep state on each sub (space & management overhead)
      </OL>
  </UL>
     */
    PRES_RELIABLE_RELIABILITY_QOS = 0x02
} PRESReliabilityQosPolicyKind;

typedef enum {
    /*e
     * Use only protocol acknowledgment (disables 
     * application acknowledgment)
     */
    PRES_PROTOCOL_ACKNOWLEDGMENT_MODE, /* default */
    /*e 
     * Automatically send application acknowledgments
     */
    PRES_APPLICATION_AUTO_ACKNOWLEDGMENT_MODE,
    /*e
     * Application acknowledgment will ACK up to
     * and including the specified VSN
     */
    PRES_APPLICATION_ORDERED_ACKNOWLEDGMENT_MODE,
    /*e
     * Application acknowledgment will only ACK the
     * specified VSN
     */
    PRES_APPLICATION_EXPLICIT_ACKNOWLEDGMENT_MODE
} PRESReliabilityQosPolicyAcknowledgmentModeKind;

typedef enum {
    /*e
     * Zero pad the cdr stream
     */
    PRES_ZERO_CDR_PADDING,
    
    /*e
     * No zero padding in the cdr stream
     */
    PRES_NOT_SET_CDR_PADDING,
    
    /*e
     * Auto zero padding
     */
    PRES_AUTO_CDR_PADDING
} PRESCdrPaddingKind;

typedef enum {
    /*e
     * Order by reception timestamp.
     */
    PRES_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,

    /*e
     * Order by source timestamp.
     */
    PRES_BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS
} PRESDestinationOrderQosPolicyKind;

typedef enum {
    PRES_INSTANCE_SCOPE_DESTINATIONORDER_QOS,
    PRES_TOPIC_SCOPE_DESTINATIONORDER_QOS
} PRESDestinationOrderQosPolicyScopeKind;

typedef enum {
    /*e
     * Keep just the last value.
     */
    PRES_KEEP_LAST_HISTORY_QOS,

    /*e
     * Keep all values.
     */
    PRES_KEEP_ALL_HISTORY_QOS
} PRESHistoryQosPolicyKind;

typedef enum {
    /*e
     * Refilter all the samples when reader subscribes
     */
     PRES_ALL_REFILTER_QOS,

    /*e
     * Never refilter samples that exists when a reader
     * subscribes
     */
     PRES_NONE_REFILTER_QOS,

    /*e
     * Refilter only when the reader requests a
     * sample that was written before the reader
     * was created.
     */
     PRES_ON_DEMAND_REFILTER_QOS
} PRESRefilterQosPolicyKind;

struct PRESSequenceOctet {
    /*e
      maximum capacity of sequence
    */
    RTI_UINT32 _maximum;
    /*e
      actual length of data in sequence
    */
    RTI_UINT32 _length;
    /*e
      pointer to first element in sequence
    */
    RTICdrOctet *_buffer;
};


#define PRES_SEQUENCE_OCTET_DEFAULT {       \
    0, /* maximum */                        \
    0, /* length */                         \
    NULL /* buffer */                       \
}

extern PRESDllExport
unsigned int PRESSequenceOctet_getMaxSizeSerialized(
    unsigned int size, int maxLength);

struct PRESUserDataQosPolicy {
    /*e
      Sequence of octet representating user data
    */
    struct PRESSequenceOctet data;
};

struct PRESEntityNameQosPolicy {
    /*e
      pointer to the name
    */
    RTICdrChar *name;
    /*e
      pointer to the role name
    */
    RTICdrChar *roleName;
};


#define PRES_ENTITY_NAME_QOS_POLICY_DEFAULT {       \
    NULL, /* name */                       \
    NULL, /* roleName */                  \
}

extern int PRESEntityNameQosPolicy_compare(const void* l, const void* r);

extern RTIBool PRESEntityNameQosPolicy_copy(struct PRESEntityNameQosPolicy* self, 
                                            const struct PRESEntityNameQosPolicy* src);

struct PRESGroupDataQosPolicy {
    /*e
      Sequence of octet representating group data
    */
    struct PRESSequenceOctet data;
};

typedef enum {
    /*e
     * Semaphore blocking
     */
    PRES_SEMAPHORE_BLOCKING_KIND,

    /*e
     * Spin lock blocking
     */
    PRES_SPIN_BLOCKING_KIND
} PRESThreadBlockindKind;

struct PRESAsynchronousPublisherQosPolicy {
    /*e
     * Disables async. pub
     */
    RTIBool disableAsyncWrite;
    /*e
     * Async. pub thread priority
     */
    int asyncWritePriority;
    /*e
     * Async. pub thread stack size
     */
    int asyncWriteStackSize;
    /*e
     * Async. pub thread options
     */
    int asyncWriteOptions;
    /*e
     * Async. pub thread allowed CPUs
     */
    struct RTIOsapiCpuBitmap asyncWriteBitmap;

    /*e 
     * Disables async. batching
     */
    RTIBool disableAsyncBatch;
    /*e
     * Async. batching thread priority
     */
    int asynchBatchThreadPriority;
    /*e
     * Async. batching thread stack size
     */
    int asynchBatchThreadStackSize;
    /*e
     * Async. batching thread options
     */
    int asynchBatchThreadOptions;
    /*e
     * Async. batching thread allowed CPUs
     */
    struct RTIOsapiCpuBitmap asynchBatchThreadBitmap;
    /*e 
     * Async. batching thread blocking kind
     */
    PRESThreadBlockindKind asynchBatchBlockingKind;

    RTIBool disableTopicQueryPublication;

    /*e
     * Topic query thread priority
     */
    int topicQueryPublicationThreadPriority;
    /*e
     * Topic query thread stack size
     */
    int topicQueryPublicationThreadStackSize;
    /*e
     * Topic query thread options
     */
    int topicQueryPublicationThreadOptions;
    /*e
     * Topic query thread allowed CPUs
     */
    struct RTIOsapiCpuBitmap topicQueryPublicationThreadBitmap;

};


#define PRES_ASYNCHRONOUS_PUBLISHER_QOS_POLICY_DEFAULT { \
    RTI_FALSE, /*disabled*/ \
    RTI_OSAPI_THREAD_PRIORITY_DEFAULT, /*priority*/ \
    RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT, /*stackSize*/ \
    RTI_OSAPI_THREAD_OPTION_DEFAULT, /*options*/ \
    RTI_OSAPI_CPU_BITMAP_DEFAULT, /*bitmap*/ \
    RTI_TRUE, /* disbaled async. batching */ \
    RTI_OSAPI_THREAD_PRIORITY_DEFAULT, /*priority*/ \
    RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT, /*stackSize*/ \
    RTI_OSAPI_THREAD_OPTION_DEFAULT, /*options*/ \
    RTI_OSAPI_CPU_BITMAP_DEFAULT, /*bitmap*/ \
    PRES_SEMAPHORE_BLOCKING_KIND, \
    RTI_FALSE, /* disableTopicQueryPublication */ \
    RTI_OSAPI_THREAD_PRIORITY_DEFAULT, /*TQ priority*/ \
    RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT, /*TQ stackSize*/ \
    RTI_OSAPI_THREAD_OPTION_DEFAULT, /*TQ options*/ \
    RTI_OSAPI_CPU_BITMAP_DEFAULT /*TQ bitmap*/ \
}

struct PRESTopicDataQosPolicy {
    /*e
      Sequence of octet representating topic data
    */
    struct PRESSequenceOctet data;
};

struct PRESDurabilityQosPolicy {
    /*e
     * Durability kind.
     */
    PRESDurabilityQosPolicyKind kind;
    /*e
     * Direct communication 
     * If kind is equal to PRES_TRANSIENT_DURABILITY_QOS or
     * PRES_PERSISTENCE_DURABILITY_QOS and directCommunication is RTI_FALSE
     * The data reader will not communicate directly with the data writers
     * offering persistence or transient durability. All the communication
     * will go through the persistence service.
     */
    RTIBool directCommunication;
};


  #define PRES_DURABILITY_QOS_POLICY_DEFAULT { \
    PRES_VOLATILE_DURABILITY_QOS, /* kind */ \
    RTI_FALSE /* directCommunication */ \
  }

extern PRESDllExport
int PRESDurabilityQosPolicy_compare(
        const struct PRESDurabilityQosPolicy *l,
        const struct PRESDurabilityQosPolicy *r);

struct PRESPresentationQosPolicy {
    /*e
      determines the largest scope spanning the entities for which the order
      and coherency of changes can be preserved.
     */
    PRESPresentationQosPolicyAccessScopeKind accessScope;
    /*e
      specify and receive coherent changes
     */
    RTIBool coherentAccess;
    /*e
      see the relative order of changes
     */
    RTIBool orderedAccess;
};

extern PRESDllExport
int PRESPresentationQosPolicy_compare(
        const struct PRESPresentationQosPolicy *l,
        const struct PRESPresentationQosPolicy *r);

struct PRESCoherentSetQosPolicy {
    /*e
      Starting sequence number of the coherent set
     */
    struct REDASequenceNumber setFirstSn;
};

struct PRESDeadlineQosPolicy {
    /*e
     * How long the application should wait until considering the
     * deadline to be expired.
     */
    struct RTINtpTime deadlinePeriod;
};

struct PRESLatencyBudgetQosPolicy {
    /*e
     * Duration of latency.
     */
    struct RTINtpTime duration;
};

struct PRESOwnershipQosPolicy {
    /*e
     * Ownership kind.
     */
    PRESOwnershipQosPolicyKind kind;
};

extern PRESDllExport
int PRESOwnershipQosPolicy_compare(
        const struct PRESOwnershipQosPolicy *l,
        const struct PRESOwnershipQosPolicy *r);

struct PRESOwnershipStrengthQosPolicy {
    RTI_INT32 value;
};

struct PRESLivelinessQosPolicy {
    /*e
     * Kind of liveliness desired.
     */
    PRESLivelinessQosPolicyKind kind;
    
    /*e
     * Duration of liveliness.
     */
    struct RTINtpTime leaseDuration;

    /*e
     * The number of liveliness assertions to send per lease duration.
     * Not propagated.
     */
    RTI_INT32 assertionsPerLeaseDuration;
};

extern PRESDllExport
int PRESLivelinessQosPolicy_compare(
        const struct PRESLivelinessQosPolicy *l,
        const struct PRESLivelinessQosPolicy *r);

struct PRESTimeBasedFilterQosPolicy {
    /*e datareader does not want to receive more than one vlaue each
      minimumSeparation, regardless of hwo fast the changes orccur. */
    struct RTINtpTime minimumSeparation;
};

struct PRESTypeSupportQosPolicy {
    /*e Option passed to the serialize function
     */
    void *pluginData;

    /*e Determines whether or not to zero-pad the cdr stream
     */
    PRESCdrPaddingKind cdrPaddingKind;
};

extern PRESDllExport
RTIBool PRESTypeSupportQosPolicy_equal(
   const struct PRESTypeSupportQosPolicy* originalValue, 
   const struct PRESTypeSupportQosPolicy* setValue);


#define PRES_TYPE_SUPPORT_QOS_POLICY_DEFAULT { \
NULL, /* pluginData */\
PRES_AUTO_CDR_PADDING /* cdrPaddingKind */\
}

typedef void* (*PRESContentFilterCompile)
    (RTI_UINT32 systemKey, void* filter_object, const char* expression,
    const char** parameters, RTI_INT32 param_length, const void *typeCode, const char* typeCodeName,
    void *old_handle, RTI_INT32* errorcode);

typedef void (*PRESContentFilterWriterCompile)
    (void* filter_object,void *writer_filter_data, struct PRESExpressionProperty * prop,
     const char* expression,const char* parameters, RTI_INT32 param_length, const void *typeCode, 
     const char* typeCodeName,struct REDAWeakReference * reader,RTI_INT32* errorcode);

typedef RTI_INT32 (*PRESContentFilterEvaluate)
    (RTI_UINT32 systemKey, void* filter_object, void* handle, const void* sample, const struct PRESFilterSampleInfo * meta_data );

typedef struct PRESDDSSequence * (*PRESContentFilterWriterEvaluate)
    (void* filter_object, void *writer_filter_data, 
     const void* sample, const struct PRESFilterSampleInfo * meta_data, RTIBool evaluateOnSerialized);

typedef void (*PRESContentFilterWriterReturnLoan)
    (void* filter_object, void *writer_filter_data, struct PRESDDSSequence * cookies);

typedef void (*PRESContentFilterFinalize)
    (RTI_UINT32 systemKey, void* filter_object, void* handle);

typedef void (*PRESContentFilterWriterFinalize)
    (void* filter_object, void *writer_filter_data,struct REDAWeakReference * reader);

typedef RTI_INT32 (*PRESContentFilterQuery)
    (RTI_UINT32 systemKey, void * filter_object, void * handle);

typedef void* (*PRESContentFilterWriterAttach)
    (void* filter_object, void* reserved,RTI_INT32* errorcode);

typedef void (*PRESContentFilterWriterDetach)
    (void* filter_object, void* writer_filter_data);


#define PRES_CONTENT_FILTER_STATE_UNKNOWN 0
#define PRES_CONTENT_FILTER_STATE_PASSED  1
#define PRES_CONTENT_FILTER_STATE_DROPPED 2
#define PRES_CONTENT_FILTER_SIGNATURE_DEFAULT {{0,0,0,0}}
#define PRES_CONTENT_FILTER_SIGNATURE_MAX     (4)
#define PRESContentFilterSignature_isEqual(__left,__right) \
 (((__left)->signature[0]==(__right)->signature[0]) ? \
 (((__left)->signature[1]==(__right)->signature[1]) ? \
 (((__left)->signature[2]==(__right)->signature[2]) ? \
 (((__left)->signature[3]==(__right)->signature[3]) ? 1 :0) : 0) :0) :0)

struct PRESContentFilterSignature {
    int signature[PRES_CONTENT_FILTER_SIGNATURE_MAX];

};

struct PRESContentFilter {

    PRESContentFilterCompile compile;
    PRESContentFilterWriterCompile writerCompile;
    PRESContentFilterEvaluate evaluate;
    PRESContentFilterWriterEvaluate writerEvaluate;
    PRESContentFilterEvaluate evaluateOnSerialized;
    PRESContentFilterQuery query;
    PRESContentFilterFinalize finalizeFunc;
    PRESContentFilterWriterFinalize writerFinalize;
    PRESContentFilterWriterAttach writerAttach;
    PRESContentFilterWriterDetach writerDetach;
    PRESContentFilterWriterReturnLoan writerReturnLoan;
    RTIBool isBuiltin;
    void *filter_object;
};


#define PRESContentFilter_INITIALIZER { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, RTI_TRUE, NULL }

struct PRESTypeAllocationParams {
    RTICdrBoolean allocatePointers;
    RTICdrBoolean allocateOptionalMembers;
    RTICdrBoolean allocateMemory;
};

struct PRESTypeDeallocationParams {
    RTICdrBoolean deletePointers;
    RTICdrBoolean deleteOptionalMembers;
};

struct PRESDDSSequence {
/* NOTE(V.V.IMP): The members below should match exactly to a DDS_SEQUENCE members */
    RTIBool _owned;
    void * _contiguous_buffer;
    void ** _discontiguous_buffer;
    RTICdrUnsignedLong _maximum;
    RTICdrUnsignedLong _length;
    RTICdrLong _sequence_init;
    void* _read_token1;
    void* _read_token2;
    struct PRESTypeAllocationParams _elementAllocParams;
    struct PRESTypeDeallocationParams _elementDeallocParams;
    RTICdrUnsignedLong _absolute_maximum;
/* New members can be added after this. */
};


#define PRESTypeAllocationParams_INITIALIZER { \
    RTI_CDR_BOOLEAN_TRUE, \
    RTI_CDR_BOOLEAN_FALSE, \
    RTI_CDR_BOOLEAN_TRUE \
}
#define PRESTypeDeallocationParams_INITIALIZER { \
    RTI_CDR_BOOLEAN_TRUE, \
    RTI_CDR_BOOLEAN_TRUE \
}
#define PRES_DDS_SEQUENCE_MAGIC_NUMBER 0x7344L
#define PRES_DDS_SEQUENCE_INITIALIZER { \
    RTI_TRUE, \
    NULL, \
    NULL, \
    0L, \
    0L, \
    PRES_DDS_SEQUENCE_MAGIC_NUMBER, \
    NULL, \
    NULL, \
    PRESTypeAllocationParams_INITIALIZER, \
    PRESTypeDeallocationParams_INITIALIZER, \
    RTI_INT32_MAX \
}

extern PRESDllExport
void * PRESDDSSequence_get(
        const struct PRESDDSSequence* self, 
        RTICdrUnsignedLong i, 
        RTICdrUnsignedLong size);

extern PRESDllExport
void PRESDDSSequence_loanContiguous(
        struct PRESDDSSequence *self,
        void *buffer,
        RTICdrUnsignedLong newLength /* = newMax */);

struct PRESDDSCookie {
    struct PRESDDSSequence value;
};

struct PRESContentFilterQosPolicy {
    /*i Unique key for each user of a filter */
    RTI_UINT32 systemKey;
    /*i Handle to pass to the evaluate function */
    void *handle;
    /*i Function that filters a sample */
    PRESContentFilterEvaluate evaluate;
    /*i Function that filters a sample on serialized*/
    PRESContentFilterEvaluate evaluateOnSerialized;
    /*i Function used to query the properties of the filter */
    PRESContentFilterQuery query;
    /*i Function that finalizes the use of this filterPolicy */
    PRESContentFilterFinalize finalizeFunc;
    /*i Filter Signature */ 
    struct PRESContentFilterSignature signature;
    /*i Weak reference to filter type */
    struct REDAWeakReference filterWR;
    /*i Apply filter */
    RTIBool doFilter;
    /*i API layer filter object */
    /* NOTE: This is NOT the same filter_data supplied in the DDS_x API.
       In actual use, the presentation filter_data is the entire API layer
       filter structure, of which one memmber is the DDS_x API filter_data.
       Wraper functions are required to translate between the two. */
    void *filter_object;
    /*i is Builtin or custom filter*/
    RTIBool isBuiltin;

};

struct PRESSequenceString {
    /*i The number of characters allocated in the 'string' field.*/
    RTI_UINT32 _maximum;

    /*i The logical number of characters in the 'string' field.*/
    RTI_UINT32 _length;

    /*e
     * The strings in this sequence, delimited by a character of the
     * client's choosing.
     */
    char *str;
};

extern PRESDllExport
RTIBool PRESSequenceString_copy(
    struct PRESSequenceString * dst,
    const struct PRESSequenceString * src);

extern PRESDllExport
void PRESSequenceString_initialize(
    struct PRESSequenceString * self);

extern PRESDllExport
void PRESSequenceString_finalize(
    struct PRESSequenceString * self);

struct PRESPartitionQosPolicy {
    /*e
      A list of strings.
    */
    struct PRESSequenceString name;
};

struct PRESProperty {
    /*i
        @brief Property name. The name containing a NULL
        terminated string. 
    */
    char *name;
    /*i
        @brief Property value. The value containing a NULL
        terminated string. 
    */
    char *value;
    /*i
        @brief Indicates if the property must be propagated or not.
    */
    RTIBool propagate;
};

extern PRESDllExport
RTIBool PRESProperty_isPropertyValueTrue(const char * value);

extern PRESDllExport
RTIBool PRESProperty_copy(struct PRESProperty * dst, const struct PRESProperty * src);

struct PRESSequenceProperty {
    /*i The maximum number of elements in the property list*/
    RTI_UINT32 _maximum;
    
    /*i The number of elements in the property list */
    RTI_UINT32 _length;
    
    /*e The name, value pairs in this sequence */
    struct PRESProperty *_buffer;
    
    /*e Maximum length of the string buffer*/
    RTI_UINT32 _string_maximum;
    
    /*e Current length of string buffer */
    RTI_UINT32 _string_length;
    
    /*e Area allocated for storing string */
    char *_string_buffer;
};

struct PRESPropertyQosPolicy {
    struct PRESSequenceProperty data;
};


#define PRES_PROPERTY_QOS_POLICY_DEFAULT {{0,0,NULL,0,0,NULL}}


#define PRES_STATISTICS_QOS_POLICY_DEFAULT {RTI_FALSE}


#define PRES_PARTITION_DEFAULT ""


#define  PRES_PARTITION_QOS_POLICY_NAME_SEPARATOR RTI_NETIO_ALIAS_LIST_SEPARATOR

struct PRESReliabilityQosPolicy {
    /*e
     * Reliability kind.
     */
    PRESReliabilityQosPolicyKind kind;
    /*e
     * Max blocking time.
     */
    struct RTINtpTime maxBlockingTime;
    /*e
     * Application acknowledgment kind
     */
    PRESReliabilityQosPolicyAcknowledgmentModeKind acknowledgmentKind;
};


  #define PRES_RELIABLE_RELIABILITY_QOS_POLICY_DEFAULT { \
    PRES_RELIABLE_RELIABILITY_QOS, /* kind */ \
    {0,0}, /* maxBlockingTime */ \
    PRES_PROTOCOL_ACKNOWLEDGMENT_MODE /* acknowledgmentKind */ \
    }

#define PRES_BEST_EFFORT_RELIABILITY_QOS_POLICY_DEFAULT { \
    PRES_BEST_EFFORT_RELIABILITY_QOS, /* kind */ \
    {0,0}, /* maxBlockingTime */ \
    PRES_PROTOCOL_ACKNOWLEDGMENT_MODE /* acknowledgmentKind */ \
    }

struct PRESDestinationOrderQosPolicy {
    /*e
     * Which destination order.
     */
    PRESDestinationOrderQosPolicyKind kind;
    /*e
     * Filter scope for destination order.
     */
    PRESDestinationOrderQosPolicyScopeKind scope;
    /*e
     * Timestamp tolerance
     */
    struct RTINtpTime srcTimeTol;
};

extern PRESDllExport
int PRESDestinationOrderQosPolicy_compare(
        const struct PRESDestinationOrderQosPolicy *l,
        const struct PRESDestinationOrderQosPolicy *r);

struct PRESHistoryQosPolicy {
    /*e
     * Keep all vs. keep just the last value.
     */
    PRESHistoryQosPolicyKind kind;

    /*e 
     * What to do with stored samples 
     * when a new remote reader subscribes
     */
    PRESRefilterQosPolicyKind refilter;
    
    /*e
     * How many values to keep.
     */
    RTI_INT32 depth;
};

extern PRESDllExport
int PRESHistoryQosPolicy_compare(
        const struct PRESHistoryQosPolicy *l,
        const struct PRESHistoryQosPolicy *r);

struct PRESTransportPriorityQosPolicy {
    /*e
     * The value of the priority.
     */
    RTI_INT32 value;
};

struct PRESLifespanQosPolicy {
    /*e
     * The value of the lifespan duration.
     */
    struct RTINtpTime duration;
};

struct PRESWriterDataLifecycleQosPolicy {
    /*e
     * Whether each time a DataWriter will automatically dispose instances when
     * they are unregistered.
     */
    RTIBool autodisposeUnregisteredInstances;
    /*e
     * Maximum duration for which the DataWriter will maintain samples for an
     * instance once it has been unregistered.
     */
    struct RTINtpTime autopurgeUnregisteredInstancesDelay;
    /*e
     * Minimum duration for which the DataWriter will maintain an
     * instance once it has been disposed.
     */
    struct RTINtpTime autopurgeDisposedInstancesDelay;
};

struct PRESReaderDataLifecycleQosPolicy {
    /*e
     * Maximum duration for which the DataReader will maintain samples for an
     * instance once there are no writers for it.
     */
    struct RTINtpTime autopurgeNowriterSamplesDelay;
    /*e
     * Maximum duration for which the DataReader will maintain samples for an
     * instance once it has been disposed.
     */
    struct RTINtpTime autopurgeDisposedSamplesDelay;
    /*e
     * Minimum duration for which the DataReader will maintain an instance
     * once it has been disposed.
     */
    struct RTINtpTime autopurgeDisposedInstancesDelay;
};


  #define PRES_READER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT { \
    RTI_NTP_TIME_MAX, /*autopurgeNowriterSamplesDelay*/ \
    RTI_NTP_TIME_MAX, /*autopurgeDisposedSamplesDelay*/ \
    RTI_NTP_TIME_MAX /*autopurgeDisposedInstancesDelay*/ \
    }

struct PRESEntityFactoryQosPolicy {
    /*e Whether the entity acting as a factory automatically enables the 
     *  instances it creates when enable is called.
     */
    RTIBool autoenableContainedEntities;
};

struct PRESResourceLimitsQosPolicy {
    /*e Control growth of number of samples. */
    struct REDAFastBufferPoolGrowthProperty sampleCount;
    
    /*e Control growth of number of instances. */
    struct REDAFastBufferPoolGrowthProperty instanceCount;
    
    /*e
     * The maximum number of samples per instance.
     */
    RTI_INT32 maxSamplesPerInstance;

    /*e
     * Number of hash buckets for instances.
     */
    RTI_INT32 instanceHashBuckets;
};

extern PRESDllExport
int PRESResourceLimitsQosPolicy_compare(
        const struct PRESResourceLimitsQosPolicy *l,
        const struct PRESResourceLimitsQosPolicy *r);

extern PRESDllExport
RTIBool PRESResourceLimitQos_limitExceeded(int limit, int current);

extern PRESDllExport
RTIBool PRESResourceLimitQos_limitReached(int limit, int current);

struct PRESDurabilityServiceQosPolicy {
    /*e service_cleanup_delay */
    struct RTINtpTime serviceCleanupDelay;

    struct PRESHistoryQosPolicy history;

    /*e this has more info than we need, but we will only serialize what
      is in the spec (max...) */
    struct PRESResourceLimitsQosPolicy resourceLimits;
};

extern PRESDllExport
int PRESDurabilityServiceQosPolicy_compare(
        const struct PRESDurabilityServiceQosPolicy *l,
        const struct PRESDurabilityServiceQosPolicy *r);

struct PRESServiceQosPolicy {
    /*e
     * Service kind
     */
    PRESServiceQosPolicyKind kind;
};

extern PRESDllExport
int PRESServiceQosPolicy_compare(
        const struct PRESServiceQosPolicy *l,
        const struct PRESServiceQosPolicy *r);


#define PRES_LENGTH_UNLIMITED -1

/*e \ingroup PRESQosModule
 * Auto length 
 */
#define PRES_LENGTH_AUTO COMMEND_LENGTH_AUTO

/*e \ingroup PRESQosModule
 * Unlimited length as a String (to be used in Property QoS)
 */
#define PRES_LENGTH_UNLIMITED_STR   "-1"

/*i \ingroup PRESQosModule
 * Identifies a non-set value
 */
#define PRES_VALUE_NOT_SET  -2

struct PRESBatchQosPolicy {
    /*e
     * Enable/Disable batching
     */
    RTIBool enable;
    /*e
     * Maximum size of a batch in bytes 
     */
    RTI_INT32 maxDataBytes;
    /*e
     * Maximum size of a batch meta data in bytes
     */
    RTI_INT32 maxMetaDataBytes;
    /*e
     * Maximum number of samples in a batch
     */
    RTI_INT32 maxSamples;
    /*e
     * Batch flush delay
     */
    struct RTINtpTime maxFlushDelay;
    /*e
     * Source timestamp resolution
     */
    struct RTINtpTime sourceTimestampResolution;
    /*e
     * Thread safe write
     */
    RTIBool threadSafeWrite;
};


#define PRES_FILTER_SIGNATURE_BITMAP_LENGTH (1)
#define PRES_FILTER_SIGNATURE_LENGTH_MAX    (4)

struct PRESInlineParameterQos {
    /* for directed write */
    int directed_write_pid; /* int = 2 shorts, which covers pid and length */
    struct MIGRtpsGuid readerGuid;

    int coherency_pid; /* int = 2 shorts, which covers pid and length */
    struct REDASequenceNumber coherentSetFirstSn;

    int    signature_pid; /* int = 2 shorts, which covers pid and length */
    int    signatureBitmapLength;
    int    signatureBitmap[PRES_FILTER_SIGNATURE_BITMAP_LENGTH];
    int    signatureLength;
    struct PRESContentFilterSignature signature[PRES_FILTER_SIGNATURE_LENGTH_MAX];
        /* common for all inline parameters */
    int sentinel;
};

typedef RTI_UINT32 PRESStatusKind;

typedef RTI_UINT32 PRESStatusKindMask;


  /*e \ingroup PRESStatusModule
   * Inconsistent topic status.
   */
  #define PRES_INCONSISTENT_TOPIC_STATUS          (PRESStatusKind)(0x0001 << 0)
  /*e \ingroup PRESStatusModule
   * Sample lost status.
   */
  #define PRES_SAMPLE_LOST_STATUS                 (PRESStatusKind)(0x0001 << 1)
  /*e \ingroup PRESStatusModule
   * Data on readers status.
   */
  #define PRES_DATA_ON_READERS_STATUS             (PRESStatusKind)(0x0001 << 2)
  /*e \ingroup PRESStatusModule
   * Sample rejected status.
   */
  #define PRES_SAMPLE_REJECTED_STATUS             (PRESStatusKind)(0x0001 << 3)
  /*e \ingroup PRESStatusModule
   * Liveliness changed status.
   */
  #define PRES_LIVELINESS_CHANGED_STATUS          (PRESStatusKind)(0x0001 << 4)
  /*e \ingroup PRESStatusModule
   * Requested deadline missed status.
   */
  #define PRES_REQUESTED_DEADLINE_MISSED_STATUS   (PRESStatusKind)(0x0001 << 5)
  /*e \ingroup PRESStatusModule
   * Requested incompatible QoS status.
   */
  #define PRES_REQUESTED_INCOMPATIBLE_QOS_STATUS  (PRESStatusKind)(0x0001 << 6)
  /*e \ingroup PRESStatusModule
   * Data available status.
   */
  #define PRES_DATA_AVAILABLE_STATUS              (PRESStatusKind)(0x0001 << 7)
  /*e \ingroup PRESStatusModule
   * Liveliness lost status.
   */
  #define PRES_LIVELINESS_LOST_STATUS             (PRESStatusKind)(0x0001 << 8)
  /*e \ingroup PRESStatusModule
   * Offered deadline missed status.
   */
  #define PRES_OFFERED_DEADLINE_MISSED_STATUS     (PRESStatusKind)(0x0001 << 9)
  /*e \ingroup PRESStatusModule
   * Incompatible QoS status.
   */
  #define PRES_OFFERED_INCOMPATIBLE_QOS_STATUS    (PRESStatusKind)(0x0001 << 10)
  /*e \ingroup PRESStatusModule
   * Extend liveliness changed QoS status.
   */
  #define PRES_LIVELINESS_CHANGED_STATUS_X        (PRESStatusKind)(0x0001 << 11)
  /*e \ingroup PRESStatusModule
   * Extend liveliness updated QoS status.
   */
  #define PRES_LIVELINESS_UPDATED_STATUS_X        (PRESStatusKind)(0x0001 << 12)
  /*e \ingroup PRESStatusModule
   * Publication match status.
   */
  #define PRES_PUBLICATION_MATCH_STATUS           (PRESStatusKind)(0x0001 << 13)
  /*e \ingroup PRESStatusModule
   * Subscription match status.
   */
  #define PRES_SUBSCRIPTION_MATCH_STATUS          (PRESStatusKind)(0x0001 << 14)
  /*e \ingroup PRESStatusModule
   * Publication reliable queue status.
   */
  #define PRES_PUBLICATION_RELIABLE_QUEUE_STATUS_X (PRESStatusKind)(0x0001 <<15)
  /*e \ingroup PRESStatusModule
   * Destination unreachable status.
   */
  #define PRES_DESTINATION_UNREACHABALE_STATUS_X    (PRESStatusKind)(0x00000001 <<16)
  /*e \ingroup PRESStatusModule
   * Sample removed status.
   */
  #define PRES_SAMPLE_REMOVED_STATUS_X             (PRESStatusKind)(0x00000001 <<17)
  /*e \ingroup PRESStatusModule
   * Writer instance replaced status.
   */
  #define PRES_WRITER_INSTANCE_REPLACED_STATUS_X   (PRESStatusKind)(0x00000001 <<18)
    /*e \ingroup PRESStatusModule
   * Writer instance replaced status.
   */
  #define PRES_WRITER_APP_ACK_STATUS_X              (PRESStatusKind)(0x00000001 <<19)
  /*e \ingroup PRESStatusModule
   * Request match status.
   */
  #define PRES_SERVICE_REQUEST_ACCEPTED_STATUS_X    (PRESStatusKind)(0x0001 <<20)
  /*e \ingroup PRESStatusModule
   * All statuses, exluding PRES_LIVELINESS_UPDATED_STATUS_X and 
   * PRES_DESTINATION_UNREACHABALE_STATUS_X (until it has a status)
   */
  /* (Edward): unmask onDestUnreachable until it has status */
  #define PRES_STATUS_KIND_MASK_ALL             (PRESStatusKindMask)(0x001eefff)
  /*e \ingroup PRESStatusModule
   * No statuses.
   */
  #define PRES_STATUS_KIND_MASK_NONE            (PRESStatusKindMask)(0x0)

typedef enum {
    /*e
      sample is not rejected
    */
    PRES_NOT_REJECTED,
    /*e
      sample is rejected because instance limit is exceeded
    */
    PRES_REJECTED_BY_INSTANCE_LIMIT,
    /*e
      Sample is rejected because sample limit is exceeded
     */
    PRES_REJECTED_BY_SAMPLE_LIMIT,
    /*e
      sample is rejected because sample per instance limit is exceeded
    */
    PRES_REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT,
    /*e
      sample is rejected because remote writers limit is exceeded
    */
    PRES_REJECTED_BY_REMOTE_WRITERS_LIMIT,
    /*e
      sample is rejected because remote writers per instance limit is exceeded
    */
    PRES_REJECTED_BY_REMOTE_WRITERS_PER_INSTANCE_LIMIT,
    /*e
      sample is rejected because samples per remote writer limit is exceeded
    */
    PRES_REJECTED_BY_SAMPLES_PER_REMOTE_WRITER_LIMIT,
    /*e
      sample is rejected because virtual writers limit is exceeded
    */
    PRES_REJECTED_BY_VIRTUAL_WRITERS_LIMIT,
    /*e
      sample is rejected because remote writers per virtual sample limit is exceeded
    */
    PRES_REJECTED_BY_REMOTE_WRITERS_PER_SAMPLE_LIMIT,
    /*e 
      sample is rejected because the number of samples for a remote writer in
      the virtual queue is exceeded.
    */
    PRES_REJECTED_BY_REMOTE_WRITER_SAMPLES_PER_VIRTUAL_QUEUE_LIMIT
} PRESSampleRejectedStatusKind;

typedef enum {
    /*e
      sample is not rejected
    */
    PRES_NOT_LOST,
    /*e
      sample is lost because the DataWriter removes it from its cache
    */
    PRES_LOST_BY_WRITER,
    /*e
      sample is lost because instance limit is exceeded
    */
    PRES_LOST_BY_INSTANCE_LIMIT,
    /*e
      sample is rejected because remote writers per instance limit is exceeded
    */
    PRES_LOST_BY_REMOTE_WRITERS_PER_INSTANCE_LIMIT,
    /*e
      sample is lost because the associated coherent set is not complete
    */
    PRES_LOST_BY_INCOMPLETE_COHERENT_SET,
    /*e
      sample is lost because is part of a large coherent set
    */
    PRES_LOST_BY_LARGE_COHERENT_SET,
    /*e
      sample is lost because samples per remote writer limit is exceeded
    */
    PRES_LOST_BY_SAMPLES_PER_REMOTE_WRITER_LIMIT,
    /*e
      sample is lost because virtual writers limit is exceeded
    */
    PRES_LOST_BY_VIRTUAL_WRITERS_LIMIT,
    /*e
      sample is lost because remote writers per sample limit is exceeded
    */
    PRES_LOST_BY_REMOTE_WRITERS_PER_SAMPLE_LIMIT,
    /*e
      sample is lost because reliability timeout expires
    */
    PRES_LOST_BY_AVAILABILITY_WAITING_TIME,
    /*
      sample is lost because the number of samples for a remote writer in
      the virtual queue is exceeded.    
    */
    PRES_LOST_BY_REMOTE_WRITER_SAMPLES_PER_VIRTUAL_QUEUE_LIMIT,
    /*
      sample is lost because there was not enough memory to add the sample
    */
    PRES_LOST_BY_OUT_OF_MEMORY
} PRESSampleLostStatusKind;

typedef enum {
    /*e PRESInvalidQosPolicy */
    PRES_INVALID_QOS_POLICY,

    /*e PRESUserDataQosPolicy */
    PRES_USER_DATA_QOS_POLICY,

    /*e PRESDurabilityQosPolicy */
    PRES_DURABILITY_QOS_POLICY,

    /*e PRESPresentationQosPolicy */
    PRES_PRESENTATION_QOS_POLICY,

    /*e PRESDeadlineQosPolicy */
    PRES_DEADLINE_QOS_POLICY,

    /*e PRESLatencyBudgetQosPolicy */
    PRES_LATENCY_BUDGET_QOS_POLICY,

    /*e PRESOwnershipQosPolicy */
    PRES_OWNERSHIP_QOS_POLICY,

    /*e PRESOwnershipStrengthQosPolicy */
    PRES_OWNERSHIP_STRENGTH_QOS_POLICY,

    /*e PRESLivelinessQosPolicy */
    PRES_LIVELINESS_QOS_POLICY,

    /*e PRESTimeBasedFilterQosPolicy */
    PRES_TIME_BASED_FILTER_QOS_POLICY,

    /*e PRESPartitionQosPolicy */
    PRES_PARTITION_QOS_POLICY,

    /*e PRESReliabilityQosPolicy */
    PRES_RELIABILITY_QOS_POLICY,

    /*e PRESDestinationOrderQosPolicy */
    PRES_DESTINATION_ORDER_QOS_POLICY,

    /*e PRESHistoryQosPolicy */
    PRES_HISTORY_QOS_POLICY,

    /*e PRESResourceLimitsQosPolicy */
    PRES_RESOURCE_LIMITS_QOS_POLICY,

    /*e PRESContentFilterQosPolicy */
    PRES_CONTENTFILTER_QOS_POLICY,

    /*e PRESEntityFactoryQosPolicy */
    PRES_ENTITY_FACTORY_QOS_POLICY,

    /*e PRESWriterDataLifecycleQosPolicy */
    PRES_WRITER_DATA_LIFECYCLE_QOS_POLICY,

    /*e PRESReaderDataLifecycleQosPolicy */
    PRES_READER_DATA_LIFECYCLE_QOS_POLICY,

    /*e PRESTopicDataQosPolicy */
    PRES_TOPIC_DATA_QOS_POLICY,

    /*e PRESGroupDataQosPolicy */
    PRES_GROUP_DATA_QOS_POLICY,
    
    /*e PRESAsynchronousPublisherQosPolicy */
    PRES_ASYNCHRONOUS_PUBLISHER_QOS_POLICY,

    /*e PRESTransportPriorityQosPolicy */
    PRES_TRANSPORT_PRIORITY_QOS_POLICY,

    /*e PRESLifespanQosPolicy */
    PRES_LIFESPAN_QOS_POLICY,

    /*e PRESDurabilityServiceQosPolicy */
    PRES_DURABILITY_SERVICE_QOS_POLICY,

    /*e PRESPublishModeQosPolicy */
    PRES_PUBLISH_MODE_QOS_POLICY,

    /*e PRESServiceQosPolicy */
    PRES_SERVICE_QOS_POLICY,

    /*e PRESBatchQosPolicy */
    PRES_BATCH_QOS_POLICY,

    /*e PRESSLocatorFilterQosProperty */
    PRES_LOCATOR_FILTER_QOS_POLICY,

    /* PRESAvailabilityQosPolicy */
    PRES_AVAILABILITY_QOS_POLICY,

    /*e PRESTypeConsistencyEnforcementQosPolicy */
    PRES_TYPE_CONSISTENCY_ENFORCEMENT_QOS_POLICY,
    
    /*e PRESTopicQueryDispatchQosPolicy */
    PRES_TOPIC_QUERY_DISPATCH_QOS_POLICY
} PRESQosPolicyId;

struct PRESQosPolicyCount {
    /*e
      ID for a participant qos policy.
     */
    PRESQosPolicyId policyId;
    /*e
      Number of times in which the qos is incompatible.
     */
    RTI_INT32 count;
};


/*e \ingroup PRESStatusModule 
  Policy index for reliability qos
*/
  #define PRES_INCOMPATIBLE_RELIABILITY_QOS_POLICY_INDEX (0)
/*e \ingroup PRESStatusModule 
  Policy index for ownership qos
*/
  #define PRES_INCOMPATIBLE_OWNERSHIP_QOS_POLICY_INDEX (1)
/*e \ingroup PRESStatusModule 
  Policy index for presentation qos
*/
  #define PRES_INCOMPATIBLE_PRESENTATION_QOS_POLICY_INDEX (2)
/*e \ingroup PRESStatusModule 
  Policy index for liveliness qos
*/
  #define PRES_INCOMPATIBLE_LIVELINESS_QOS_POLICY_INDEX (3)
/*e \ingroup PRESStatusModule 
  Policy index for durability qos
*/
  #define PRES_INCOMPATIBLE_DURABILITY_QOS_POLICY_INDEX (4)
/*e \ingroup PRESStatusModule 
  Policy index for deadline qos
*/
  #define PRES_INCOMPATIBLE_DEADLINE_QOS_POLICY_INDEX (5)
/*e \ingroup PRESStatusModule 
  Policy index for latency budget qos
*/
  #define PRES_INCOMPATIBLE_LATENCY_BUDGET_QOS_POLICY_INDEX (6)
/*e \ingroup PRESStatusModule 
  Policy index for destination order qos
*/
  #define PRES_INCOMPATIBLE_DESTINATION_ORDER_QOS_POLICY_INDEX (7)
/*e \ingroup PRESStatusModule 
  The maximum number of QoS that can be incompatible between reader and
  writer pair.
*/
  #define PRES_INCOMPATIBLE_QOS_POLICY_MAX (8)


  /*e \ingroup PRESStatusModule 
   * Queue event index for queue empty
   */
  #define PRES_QUEUE_EMPTY_QUEUE_EVENT_INDEX     (0)
  /*e \ingroup PRESStatusModule 
   * Queue event index for queue full
   */
  #define PRES_QUEUE_FULL_QUEUE_EVENT_INDEX      (1)
  /*e \ingroup PRESStatusModule 
   * Queue event index for low water mark
   */
  #define PRES_LOW_WATER_MARK_QUEUE_EVENT_INDEX  (2)
  /*e \ingroup PRESStatusModule 
   * Queue event index for high water mark
   */
  #define PRES_HIGH_WATER_MARK_QUEUE_EVENT_INDEX (3)
  /*e \ingroup PRESStatusModule 
   * The maximum number of (publication) reliable queue events.
   */
  #define PRES_QUEUE_EVENT_MAX                   (4)

typedef enum {
    /*e 
      Invalid queue event
    */
    PRES_INVALID_QUEUE_EVENT = -1,
    /*e 
      Queue empty (i.e. no unacknowledged samples)
    */
    PRES_QUEUE_EMPTY_QUEUE_EVENT = PRES_QUEUE_EMPTY_QUEUE_EVENT_INDEX,
    /*e
      Queue full (i.e. all available samples are unacknowledged)
    */
    PRES_QUEUE_FULL_QUEUE_EVENT = PRES_QUEUE_FULL_QUEUE_EVENT_INDEX,
    /*e 
      Low water mark (i.e. number of unacknowledged samples has decreased
      such that it has reached or fallen below user-specified low water mark.
    */
    PRES_LOW_WATER_MARK_QUEUE_EVENT = PRES_LOW_WATER_MARK_QUEUE_EVENT_INDEX,
    /*e 
      High water mark (i.e. number of unacknowledged samples has dincreased
      such that it has reached or surpassed user-specified high water mark.
    */
    PRES_HIGH_WATER_MARK_QUEUE_EVENT = PRES_HIGH_WATER_MARK_QUEUE_EVENT_INDEX
} PRESQueueEventId;

struct PRESQueueEventCount {
    /*e
      ID for a (publication) reliable queue event.
     */
    PRESQueueEventId eventId;
    /*e
      Number of times the queue event has occurred.
     */
    RTI_INT32 count;
    /*e
      The incremental number of times the queue event has occurred since the
      last time the listener was called or the status was read.
     */
    RTI_INT32 countChange;
};

struct PRESSampleLostStatus {
    /*e
      Total cumulative count of all samples lost across of instances of topics
      subscribed by the subscriber
    */
    RTI_INT32 totalCount;
    /*e
      The incremental number of samples lost since the last time the
      listener was called or the status was read.
    */
    RTI_INT32 totalCountChange;
    /*e
      Reason for losing the last sample
    */
    PRESSampleLostStatusKind lastReason;
};

struct PRESInconsistentTopicStatus {
    /*e
     * Total count.
     */
    RTI_INT32 totalCount;
    
    /*e
     * Total count change.
     */
    RTI_INT32 totalCountChange;
};

struct PRESRequestedIncompatibleQosStatus {
    /*e
      Total cumulative count taht concerned data reader discovered a
      data writer for the same topic with an offered qos that is
      incompatible with that requested by the data reader
    */
    RTI_INT32 totalCount;
    /*e
      The change in total count since the last time the listener was
      called or the status was read
     */
    RTI_INT32 totalCountChange;
    /*e
      The policy id of one of the policies that was found to be incompatible
      the last me an incompatibility was detected.
     */
    PRESQosPolicyId lastPolicyId;
    /*e
      A list containing for each policy the total number of times that 
      the concerned data reader discovered a data writer for the
      same topic with an offered qos that is incompatible with that requested
      by the data reader.
    */
    struct PRESQosPolicyCount policies[PRES_INCOMPATIBLE_QOS_POLICY_MAX];
};

struct PRESLivelinessLostStatus {
    /*e
      Total cumulative count of hte number of times the data writer failed
      to actively signal its liveliness within the offered liveliness period.
     */
    RTI_INT32 totalCount;
    /*e
      The change in total count since the last itme the listener was called
      or the status was read.
     */
    RTI_INT32 totalCountChange;
};

struct PRESOfferedIncompatibleQosStatus {
    /*e
      The total cumulative count the concerned data writer discovered a
      data reader for the same topic with a requested QoS that is 
      incompatible with that offered by the data writer.
     */
    RTI_INT32 totalCount;
    /*e
      The change in total count since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 totalCountChange;
    /*e
      The policy ID of one of the policies that was found to be incompatible
      the last time an incompatiblity was detected.
    */
    PRESQosPolicyId lastPolicyId;
    /*e
      A list containing for each policy the total numbre of times that
      the concerned data writer discovered a data reader for the same topic
      with a requested QoS that is incompatible with
      that offered by the data writer
    */
    struct PRESQosPolicyCount policies[PRES_INCOMPATIBLE_QOS_POLICY_MAX];
};

struct PRESLivelinessUpdatedStatus {
    /*e
      Last guid of the remote writer whose liveliness has be updated.
    */
    struct MIGRtpsGuid lastGuid;
};

struct PRESPublicationReliableQueueStatus {
    /*e
      The id of the last event on the reliable queue.
     */
    PRESQueueEventId lastQueueEventId;
    /*e
      A list containing for each queue event the total number of times that 
      event has occurred and the incremental number of times since the
      listener was called or the status was read.
    */
    struct PRESQueueEventCount queueEvents[PRES_QUEUE_EVENT_MAX];
    /*e
      The total number of unacknowledged samples in the reliable writer queue.
     */
    RTI_INT32 unacknowledgedSampleCount;
    /*i
      The maximum number of unacknowledged samples in the reliable writer queue.
     */
    RTI_INT32 unacknowledgedSampleCountPeak;
};

typedef enum {
    /*e
      Indicates invalid sample state
     */
    PRES_SAMPLE_STATE_INVALID = 0,
    /*e
      Indicates read sample state
     */
    PRES_SAMPLE_STATE_READ = 0x0001 << 0,
    /*e
      Indicates not read sample state
     */
    PRES_SAMPLE_STATE_NOT_READ = 0x0001 << 1
} PRESSampleStateKind;

typedef enum {
    /*e
      Indicates invalid view state
     */
    PRES_VIEW_STATE_INVALID = 0,
    /*e
      Indicates new view state
     */
    PRES_VIEW_STATE_NEW = 0x0001 << 0,
    /*e
      Indicates not new view state
    */
    PRES_VIEW_STATE_NOT_NEW = 0x0001 << 1
} PRESViewStateKind;

typedef enum {
    /*e
      Indicates invalid instance state
    */
    PRES_INSTANCE_STATE_INVALID = 0,
    /*e
      Indicates alive instance state
    */
    PRES_INSTANCE_STATE_ALIVE = 0x0001 << 0,
    /*e
      Indicates not alive disposed instance state
    */
    PRES_INSTANCE_STATE_NOT_ALIVE_DISPOSED = 0x0001 << 1,
    /*e
      Indicates not alive no writers instance state
    */
    PRES_INSTANCE_STATE_NOT_ALIVE_NO_WRITERS = 0x0001 << 2
} PRESInstanceStateKind;

typedef enum {
    /*e
      Indicates invalid stream kind
    */
    PRES_STREAM_KIND_INVALID = 0,
    /*e
      Indicates live stream kind
    */
    PRES_STREAM_KIND_LIVE = 0x0001 << 0,
    /*e
      Indicates topic query stream kind
    */
    PRES_STREAM_KIND_TOPIC_QUERY = 0x0001 << 1
} PRESStreamKind;

struct PRESIeeeTime {
    /*e Seconds */
    RTI_INT32 sec;
    /*e Nano seconds */
    RTI_UINT32 nanosec;
};


/*e \ingroup PRESCommonModule
  Invalid IEEE time
*/
#define PRES_IEEE_TIME_INVALID { -1L, 0UL }

extern PRESDllExport
int PRESIeeeTime_compare(const struct PRESIeeeTime left,
             const struct PRESIeeeTime right);

struct PRESOctetGuid {
    RTI_UINT8 value[16];
};


#define PRES_OCTET_GUID_ZERO {{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }}


#define PRES_OCTET_GUID_UNKNOWN PRES_OCTET_GUID_ZERO

extern PRESDllExport
RTIBool PRESOctetGuid_isZero(
        const struct PRESOctetGuid * self);

extern PRESDllExport
void PRESOctetGuid_setZero(
        struct PRESOctetGuid * self);

extern PRESDllExport
RTIBool PRESOctetGuid_isUnknown(
        const struct PRESOctetGuid * self);

extern PRESDllExport
void PRESOctetGuid_setUnknown(
        struct PRESOctetGuid * self);

extern PRESDllExport
void PRESOctetGuid_from_mig_guid(
        struct PRESOctetGuid * self,
        const struct MIGRtpsGuid * other);

extern PRESDllExport
void PRESOctetGuid_copy(
        struct PRESOctetGuid * dst,
        const struct PRESOctetGuid * src);

extern PRESDllExport
int PRESOctetGuid_compare(
        const struct PRESOctetGuid * self,
        const struct PRESOctetGuid * other);

extern PRESDllExport
void PRESOctetGuid_to_mig_guid(
        const struct PRESOctetGuid * self,
        struct MIGRtpsGuid * other);



/*e \ingroup PRESSampleStateModule
  Read sample state mask
 */
  #define PRES_SAMPLE_STATE_MASK_BIT_READ          (0x00000001)
/*e \ingroup PRESSampleStateModule
  Not read sample state mask
 */
  #define PRES_SAMPLE_STATE_MASK_BIT_NOT_READ      (0x00000002)
/*e \ingroup PRESSampleStateModule
  All sample states mask
 */
  #define PRES_SAMPLE_STATE_MASK_ALL               (0xffffffff)

/*e \ingroup PRESViewStateModule
  New view state mask
 */
  #define PRES_VIEW_STATE_MASK_BIT_NEW                      (0x00000001)
/*e \ingroup PRESViewStateModule
  Not new view state mask
 */
  #define PRES_VIEW_STATE_MASK_BIT_NOT_NEW                  (0x00000002)
/*e \ingroup PRESViewStateModule
  All view states mask
 */
  #define PRES_VIEW_STATE_MASK_ALL                          (0xffffffff)

/*e \ingroup PRESInstanceStateModule
  Alive instance state mask
 */
  #define PRES_INSTANCE_STATE_MASK_BIT_ALIVE                (0x00000001)
/*e \ingroup PRESInstanceStateModule
  Not alive disposed instance state mask
 */
  #define PRES_INSTANCE_STATE_MASK_BIT_NOT_ALIVE_DISPOSED   (0x00000002)
/*e \ingroup PRESInstanceStateModule
  Not alive no writers instance state mask
 */
  #define PRES_INSTANCE_STATE_MASK_BIT_NOT_ALIVE_NO_WRITERS (0x00000004)
/*e \ingroup PRESInstanceStateModule
  Not alive instance state mask
 */
  #define PRES_INSTANCE_STATE_MASK_BIT_NOT_ALIVE            (0x00000006)
/*e \ingroup PRESInstanceStateModule
  All instance states mask
 */
  #define PRES_INSTANCE_STATE_MASK_ALL                      (0xffffffff)
/*e \ingroup PRESStreamKindModule
  Live stream kind mask
 */
  #define PRES_STREAM_KIND_MASK_BIT_LIVE                    (0x00000001)

/*e \ingroup PRESStreamKindModule
  TopicQuery stream kind mask
 */
  #define PRES_STREAM_KIND_MASK_BIT_TOPIC_QUERY             (0x00000002)

/*e \ingroup PRESStreamKindModule
  Stream kind mask
 */
  #define PRES_STREAM_KIND_MASK_ALL                         (0xffffffff)

typedef RTI_UINT32 PRESSampleStateMask;

typedef RTI_UINT32 PRESViewStateMask;

typedef RTI_UINT32 PRESInstanceStateMask;

typedef RTI_UINT32 PRESStreamKindMask;


/*e \ingroup PRESErrorModule
  No error
 */
  #define PRES_RETURN_OK /*                   (0) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 0)
/*e \ingroup PRESErrorModule
  Generic error
 */
  #define PRES_RETURN_ERROR /*                (1) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 1)
/*e \ingroup PRESErrorModule
  Unsupported feature
 */
  #define PRES_RETURN_UNSUPPORTED /*          (2) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 2)
/*e \ingroup PRESErrorModule
  Running out of resources
 */
  #define PRES_RETURN_OUT_OF_RESOURCES /*     (3) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 3)
/*e \ingroup PRESErrorModule
  entity not enabled
 */
  #define PRES_RETURN_NOT_ENABLED /*          (4) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 4)
/*e \ingroup PRESErrorModule
  Cannot change immutable policy
 */
  #define PRES_RETURN_IMMUTABLE_POLICY /*     (5) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 5)
/*e \ingroup PRESErrorModule
  Policies are inconsistent
 */
  #define PRES_RETURN_INCONSISTENT_POLICY /*  (6) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 6)
/*e \ingroup PRESErrorModule
  Try to destroy entities that is not empty
 */
  #define PRES_RETURN_ENTITY_NOT_EMPTY /*     (7) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 7)
/*e \ingroup PRESErrorModule
  Entity not found in factory
 */
  #define PRES_RETURN_NOT_FOUND /*            (8) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 8)
/*e \ingroup PRESErrorModule
  Instance not found
 */
  #define PRES_RETURN_NO_INSTANCE /*          (9) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 9)
/*e \ingroup PRESErrorModule
  Timeout
 */
  #define PRES_RETURN_TIMEOUT /*              (10) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 10)
/*e \ingroup PRESErrorModule
  record already exists
 */
  #define PRES_RETURN_ALREADY_EXISTS /*       (11) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 11)
/*e \ingroup PRESErrorModule
  Source timestamp is out of order.  */
  #define PRES_RETURN_TIMESTAMP_OUT_OF_ORDER /* (12) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 12)
/*e \ingroup PRESErrorModule
  Bad parameter.
 */
  #define PRES_RETURN_BAD_PARAMETER /* (13) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 13)
/*e \ingroup PRESErrorModule
  Waitset has a thread blocking on it already.
 */
  #define PRES_RETURN_WAITSET_BLOCKED /* (14) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 14)
/*e \ingroup PRESErrorModule
  Condition not attached to waitset
 */
  #define PRES_RETURN_CONDITION_NOT_ATTACHED /* (15) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 15)
/*e \ingroup PRESErrorModule
  No coherent set.
 */
  #define PRES_RETURN_NO_COHERENT_SET /* (16) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 16)
/*e \ingroup PRESErrorModule
  No call to suspendPublications.
 */
  #define PRES_RETURN_NO_SUSPEND_PUBLICATIONS_CALL /* (17) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 17)
/*e \ingroup PRESErrorModule
  No coherent set.
 */
  #define PRES_RETURN_NO_BEGIN_ACCESS_CALL /* (18) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 18)
/*e \ingroup PRESErrorModule
  entity ignored by user
 */
  #define PRES_RETURN_IGNORED /*          (19) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 19)
/*e \ingroup PRESErrorModule
  Precondition not met
 */
  #define PRES_RETURN_PRECONDITION_NOT_MET /* (20) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 20)
/*e \ingroup PRESErrorModule
  Collator is full
 */
  #define PRES_RETURN_FULL  /* (21) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 21)
/*e \ingroup PRESErrorModule
  Sequence number is out of order.  */
  #define PRES_RETURN_SEQUENCE_OUT_OF_ORDER /* (22) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 22)
/*e \ingroup PRESErrorModule
  participant ignored by user (remote_peer)
 */
  #define PRES_RETURN_REMOVED_LOCATOR  /* (23) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 23)
/*e \ingroup PRESErrorModule
 *  notifying discovery plugins of remote participant is pending authorization,
 *  and therefore endpoint discovery should not be triggered yet.
 */
  #define PRES_RETURN_PENDING_AUTHORIZATION /* (24) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 24)

typedef RTI_UINT32 PRESServiceId;


/*e \ingroup PRESServiceIdModule
  Unknown service id
 */
#define PRES_SERVICE_ID_UNKNOWN (0)

typedef union RTIOsapiAlignmentUnionOfAllDataTypes PRESWord;

typedef enum {
    /*e
     * Created
     */
    PRES_ENTITY_STATE_CREATED,
    
    /*e
     * Enabled.
     */
    PRES_ENTITY_STATE_ENABLED,

    /*e
     * Ready to be destroyed.
     */
    PRES_ENTITY_STATE_PREDESTROY,

    /*e
     * Destroyed.
     */
    PRES_ENTITY_STATE_DESTROYED
    
} PRESEntityState;

struct PRESStatusCondition {
    struct PRESCondition _base;
    PRESStatusKindMask _statusMask;
    PRESStatusKindMask _resetStatusMask;
};

struct PRESEntity {
    /*i enabled state */
    PRESEntityState state;
    /*i Global unique identifier for the entity */
    struct MIGRtpsGuid guid;
    /*i Participant to which entity belongs */
    struct PRESParticipant *participant;
    /*i status condition which belongs to this entity*/
    struct PRESStatusCondition statusCondition;
    /*i Pointer to user object stored with entity */
    PRESWord *userObject;
};

typedef RTI_UINT32 PRESEndpointSecurityAttributes;


#define PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_ACCESS_PROTECTED           (0x00000001 << 0)
#define PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_DISCOVERY_PROTECTED        (0x00000001 << 1)
#define PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_SUBMESSAGE_PROTECTED       (0x00000001 << 2)
#define PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_PAYLOAD_SIGNED             (0x00000001 << 3)
#define PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_PAYLOAD_ENCRYPTED          (0x00000001 << 4)
#define PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_LIVELINESS_PROTECTED       (0x00000001 << 5)
#define PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_NON_PROPAGABLE             (0x00000001 << 30)
#define PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_INVALID                    (0x00000001 << 31)
#define PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_ENCODING \
    (PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_SUBMESSAGE_PROTECTED \
     | PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_PAYLOAD_SIGNED \
     | PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_PAYLOAD_ENCRYPTED)

#define PRES_ENDPOINT_SECURITY_ATTRIBUTES_DEFAULT 0
#define PRES_ENDPOINT_SECURITY_ATTRIBUTES_INVALID \
    PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_INVALID

#define PRESEndpointSecurityAttributes_isPropagable(att) \
        ((att & PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_NON_PROPAGABLE) == 0)

#define PRESEndpointSecurityAttributes_isValid(att) \
        ((att & PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_INVALID) == 0)

#define PRESEndpointSecurityAttributes_isDiscoveryProtected(att) \
        ((att & PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_DISCOVERY_PROTECTED) != 0)

#define PRESEndpointSecurityAttributes_isPayloadSigned(att) \
        ((att & PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_PAYLOAD_SIGNED) != 0)
#define PRESEndpointSecurityAttributes_isPayloadEncrypted(att) \
        ((att & PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_PAYLOAD_ENCRYPTED) != 0)
#define PRESEndpointSecurityAttributes_isPayloadProtected(att) \
        (PRESEndpointSecurityAttributes_isPayloadSigned(att) \
                || PRESEndpointSecurityAttributes_isPayloadEncrypted(att))

#define PRESEndpointSecurityAttributes_isEncoding(att) \
        ((att & PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_ENCODING) != 0)

#define PRESEndpointSecurityAttributes_isLivelinessProtected(att) \
        ((att & PRES_ENDPOINT_SECURITY_ATTRIBUTES_IS_LIVELINESS_PROTECTED) != 0)

#define PRESEndpointSecurityAttributes_compare(left, right) \
        (!PRESEndpointSecurityAttributes_isValid(left) \
                && !PRESEndpointSecurityAttributes_isValid(right) ? 0 : \
                        REDAOrderedDataType_compareInt(&left, &right))

struct PRESEndpointSecurity {
    PRESEndpointSecurityAttributes attributes;
    void *interceptorHandle; /* key material */
};


#define PRES_ENDPOINT_SECURITY_DEFAULT \
{ \
    PRES_ENDPOINT_SECURITY_ATTRIBUTES_DEFAULT, \
    NULL /* interceptorHandle */ \
}

struct PRESLocalEndpoint {
    /*e Endpoint extends entity */
    struct PRESEntity parent;
    /*i The group to which teh endpoint belongs */
    struct PRESGroup *_group;
    /*i References the record in the Participant LocalTopic table containing
       the topic and associated type of the endpoint */
    struct REDAWeakReference _localTopicWR;
    /*i References the record in the Participant TopicType table containing
       the topic and associated type of the endpoint
       This value is invalid before the topic is enabled.
    */
    struct REDAWeakReference _topicTypeWR;
    /*i The service to which the endpoint belongs */
    struct PRESService *_service;
    /*i The service keeps its own table of endpoints this is a WR into that 
      other table */
    struct REDAWeakReference _endpointWR;

    /* putting in a hack, which will be addressed later.
     * for making getStatusChanges consistent
     */
     RTIBool _onDataAvailableStatusFlag;

     /* Indicates if batching is enabled in a DataWriter */
     RTIBool _batchEnabled;
     /* WriterHistoryDriver pointer (used for batching) 
        when thread safe write is RTI_FALSE
     */
     struct PRESWriterHistoryDriver * _whDriver;

     struct PRESEndpointSecurity _security;
};

struct PRESLocalEndpointProperty {
    /*e
      ID of service from which the local endpoint is created
    */
    int serviceId;

    /*e transport priority for netio send/receive resource created for
      this endpoint */
    /*e mutable, unsupported */
    struct PRESTransportPriorityQosPolicy transportPriority;

    /*e desired transport plugin alias for this endpoint */
    struct RTINetioAliasList transportAliasList;

    /*i desired security state for this endpoint */
    struct PRESEndpointSecurity security;
};


/*e \ingroup PRESEntityModule
  Default value of local endpoint property
*/
#define PRES_LOCAL_ENDPOINT_PROPERTY_DEFAULT {   \
    PRES_SERVICE_ID_UNKNOWN,                 \
    {0}, /* transportPriority */                 \
    RTI_NETIO_ALIAS_LIST_DEFAULT, /*transportAliasList */ \
    PRES_ENDPOINT_SECURITY_DEFAULT /* security */ \
}

struct PRESRemoteEndpointProperty {
    /*e
      ID of service from which the remote endpoint is asserted.
    */
    int serviceId;
};


/*e \ingroup PRESEntityModule
  Default value of remote endpoint property
*/
#define PRES_REMOTE_ENDPOINT_PROPERTY_DEFAULT {  \
    PRES_SERVICE_ID_UNKNOWN          \
}

struct PRESEventThread {
    int refCount;
    struct RTIEventTimer * timer;
    struct RTIEventActiveGeneratorListener activeListener;
    struct RTIEventGeneratorListener listener;
    struct RTIEventActiveGenerator * generator;
    struct RTIOsapiSemaphore * terminateSem;
    int eventStorageSize;
};

struct PRESOriginalWriterInfo {
    /*e
     * Original writer guid
     */
    struct MIGRtpsGuid writerGuid;
    /*e
     * Original writer sequence number
     */
    struct REDASequenceNumber sequenceNumber;
};


#define PRES_ORIGINAL_WRITER_INFO_UNKNOWN \
{MIG_RTPS_GUID_UNKNOWN, REDA_SEQUENCE_NUMBER_UNKNOWN}

struct PRESGroup {
    /*e
      PRESGroup is one kind of entity
     */
    struct PRESEntity _parent;
    /*i
      Weak reference to the group record in the group table.
     */
    struct REDAWeakReference _groupWR;
    /*i
      EA used by the group.
     */
    struct REDAExclusiveArea *_groupEa;
    /*i
      Pointer to the service from which the group is created
    */
    struct PRESService *_service;

    /* putting in a hack, which will be addressed later.
     * for making getStatusChanges consistent
     */
     RTIBool _onDataOnReadersStatusFlag;

     /*i Event generator for batching 
     */
     struct PRESEventThread _batchEventGenerator;

     /*i Event generator for topic-query dispatching
      */
      struct PRESEventThread _topicQueryDispatchEventGenerator;

     /*i This field contains the virtual GUID and virtual SN associated with
         the publisher.
         The field is only used when PresentationQosPolicy is set to GROUP. */
     struct PRESOriginalWriterInfo _virtualInfo;

     /*i This field contains the list of writer infos across all writer-sessions. */
     struct MIGRtpsWriterInfoList _writerInfoList;
     struct REDAInlineList _writerInfoListInlineList;

     /* These member are only used by Subscribers configured with GROUP order access */
     /* TODO: Move this to Subscriber specific storage */
     struct PRESPresentationQosPolicy _presentationQosPolicy;
     struct REDAObjectPerWorker * _sampleIteratorPerWorker;
     struct PRESReaderQueueVirtualWriterList * _virtualWriterList;
};

struct PRESGroupProperty {
    /*e
      ID of the service that the group is created from
    */
    int serviceId;
};


/*e \ingroup PRESEntityModule
  Default value of group property
*/
#define PRES_GROUP_PROPERTY_DEFAULT {  \
    PRES_SERVICE_ID_UNKNOWN /* serviceId */         \
}

typedef enum {
    PRES_DISALLOW_TYPE_COERCION,
    PRES_ALLOW_TYPE_COERCION
} PRESTypeConsistencyKind;

struct PRESTypeConsistencyEnforcementQosPolicy {
    PRESTypeConsistencyKind kind;
};


#define PRES_TYPE_CONSISTENCY_ENFORCEMENT_QOS_DEFAULT { \
    PRES_ALLOW_TYPE_COERCION                     \
}

extern PRESDllExport
int PRESTypeConsistencyEnforcementQosPolicy_compare(
        const struct PRESTypeConsistencyEnforcementQosPolicy *l,
        const struct PRESTypeConsistencyEnforcementQosPolicy *r);

typedef enum {
    /*e
      unknown group
     */
    PRES_GROUP_SUFFIX_UNKNOWN_GROUP = 0x00,
    /*e
      normal user writer group
    */
    PRES_GROUP_SUFFIX_NORMAL_USER_WRITER_GROUP = 0x08,
    /*e
      normal user reader group
    */
    PRES_GROUP_SUFFIX_NORMAL_USER_READER_GROUP = 0x09,
    
    /*e
      reserved user writer group
    */
    PRES_GROUP_SUFFIX_RESERVED_USER_WRITER_GROUP = 0x48,
    /*e
      reserved user reader group
    */
    PRES_GROUP_SUFFIX_RESERVED_USER_READER_GROUP = 0x49,

    /*e
      normal meta writer group
    */
    PRES_GROUP_SUFFIX_NORMAL_META_WRITER_GROUP = 0x88,
    /*e
      normal meta reader group
    */
    PRES_GROUP_SUFFIX_NORMAL_META_READER_GROUP = 0x89,
    
    /*e
      reserved meta writer group
    */
    PRES_GROUP_SUFFIX_RESERVED_META_WRITER_GROUP = 0xc8,
    /*e
      reserved meta reader group
    */
    PRES_GROUP_SUFFIX_RESERVED_META_READER_GROUP = 0xc9,

    /*e
      normal user virtual reader group
    */
    PRES_GROUP_SUFFIX_NORMAL_USER_VIRTUAL_READER_GROUP = 0x3e
} PRESGroupSuffix;

extern PRESDllExport
RTIBool PRESGroupSuffix_fromObjectSuffix(MIGRtpsObjectSuffix osx);

typedef enum {
    /*e
      unknown group
     */
    PRES_TOPIC_SUFFIX_UNKNOWN_TOPIC = 0x00,
    /*e
      normal user topic
    */
    PRES_TOPIC_SUFFIX_NORMAL_USER_TOPIC = 0x0a,
    /*e
      reserved user topic
    */
    PRES_TOPIC_SUFFIX_RESERVED_USER_TOPIC = 0x4a,
    /*e
      normal meta topic
    */
    PRES_TOPIC_SUFFIX_NORMAL_META_TOPIC = 0x8a,
    /*e
      reserved meta topic
    */
    PRES_TOPIC_SUFFIX_RESERVED_META_TOPIC = 0xca,

    /*e
      normal user virtual topic
    */
    PRES_TOPIC_SUFFIX_NORMAL_USER_VIRTUAL_TOPIC = 0x3f
} PRESTopicSuffix;

extern PRESDllExport
RTIBool PRESTopicSuffix_isTopic(MIGRtpsObjectSuffix osx);

struct PRESTopicImmutableProperty {
    /*e
     * Durability QoS policy.
     */
    struct PRESDurabilityQosPolicy durability;
    
    /*e Durability service QoS policy. */
    struct PRESDurabilityServiceQosPolicy durabilityService;
    
    /*e
     * Ownership QoS policy.
     */
    struct PRESOwnershipQosPolicy ownership;
    
    /*e
     * Liveliness QoS policy.
     */
    struct PRESLivelinessQosPolicy liveliness;
    
    /*e
     * Reliability QoS policy.
     */
    struct PRESReliabilityQosPolicy reliability;
    
    /*e
     * Destination order QoS policy.
     */
    struct PRESDestinationOrderQosPolicy destinationOrder;
    
    /*e
     * History QoS policy.
     */
    struct PRESHistoryQosPolicy history;
    
    /*e
     * Resource limits QoS policy.
     */
    struct PRESResourceLimitsQosPolicy resourceLimits;

    /*e
        whether this topic need to be destroyed when deleteContainedEntities
        is called on factroy*/
    RTIBool explicitDestroyOnly;
};

struct PRESTopicMutableProperty {
    /*e
     * Deadline QoS policy.
     */
    struct PRESDeadlineQosPolicy deadline;
    
    /*e
     * Latency budget QoS policy.
     */
    struct PRESLatencyBudgetQosPolicy latencyBudget;

    /*e
     * Transport priority qos policy.
     */
    struct PRESTransportPriorityQosPolicy transportPriority;

    /*e
     * Lifespan qos policy.
     */
    struct PRESLifespanQosPolicy lifespan;

    /*e
     * Topic data qos policy.
     */
    struct PRESTopicDataQosPolicy topicData;
};

struct PRESTopicProperty {
    /*e
     * The immutable portion of a topic property.
     */
    struct PRESTopicImmutableProperty immutable_part;
    
    /*e
     * The mutable portion of a topic property.
     */
    struct PRESTopicMutableProperty mutable_part;
};


/*e \ingroup PRESEntityModule
  Default value of topic property.
*/
#define PRES_TOPIC_PROPERTY_DEFAULT {                               \
  { /* immutable_part */ \
   { /* durability */ \
       PRES_VOLATILE_DURABILITY_QOS, /* kind */ \
       RTI_FALSE /* directCommunication */  \
   }, \
   { /* durabilityServiceQosPolicy */ \
       RTI_NTP_TIME_ZERO, /* serviceCleanupDelay */ \
       {PRES_KEEP_LAST_HISTORY_QOS, PRES_NONE_REFILTER_QOS, 1}, /* history */ \
       { /* resourceLimits */ \
         REDA_FAST_BUFFER_POOL_GROWTH_PROPERTY_DEFAULT, /* sampleCount */ \
         REDA_FAST_BUFFER_POOL_GROWTH_PROPERTY_DEFAULT, /* instanceCount */ \
         REDA_FAST_BUFFER_POOL_UNLIMITED, /* maxSamplesPerInstance */ \
         1 /* instanceHashBuckets */ \
       } \
   }, /* durabilityServiceQosPolicy */ \
   {PRES_SHARED_OWNERSHIP_QOS}, /* ownership */                     \
   { /* liveliness */ \
       PRES_AUTOMATIC_LIVELINESS_QOS, /* kind */  \
       RTI_NTP_TIME_MAX, /* leaseDuration */ \
       0 /* assertionsPerLeaseDuration */ \
   }, \
   PRES_BEST_EFFORT_RELIABILITY_QOS_POLICY_DEFAULT, /* reliability */ \
   {PRES_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,                 \
    PRES_INSTANCE_SCOPE_DESTINATIONORDER_QOS,       \
    {30, 0} }, /* destinationOrder */ \
   {PRES_KEEP_LAST_HISTORY_QOS, PRES_NONE_REFILTER_QOS, 1}, /* history */ \
   { /* resourceLimits */ \
     REDA_FAST_BUFFER_POOL_GROWTH_PROPERTY_DEFAULT, /* sampleCount */ \
     REDA_FAST_BUFFER_POOL_GROWTH_PROPERTY_DEFAULT, /* instanceCount */ \
     REDA_FAST_BUFFER_POOL_UNLIMITED, /* maxSamplesPerInstance */ \
     1 /* instanceHashBuckets */ \
   }, \
   RTI_FALSE /* explicitDestroyOnly */ \
  } /* end immutable */,                                            \
  { /* mutable_part */ \
   {RTI_NTP_TIME_MAX} /* deadline */,                                      \
   {RTI_NTP_TIME_ZERO} /* latencyBudget */,                                \
   {0} /* transportPriority */,                                            \
   {RTI_NTP_TIME_MAX} /* lifespan */,                                      \
   {{0, 0, NULL}} /* topicData */ \
  } /* end mutable */                                                    \
}

struct PRESContentFilteredTopicMutableProperty {
    /*e Filtering policy
         */ 
    struct PRESContentFilterQosPolicy filterPolicy;
};


/*e \ingroup PRESEntityModule
  Default value of content filter Qos policy property.
*/
#define PRES_CONTENT_FILTER_QOS_POLICY_DEFAULT \
{0,\
 NULL,\
 (PRESContentFilterEvaluate)NULL,\
 (PRESContentFilterEvaluate)NULL,\
 (PRESContentFilterQuery)NULL, \
 (PRESContentFilterFinalize)NULL,\
 PRES_CONTENT_FILTER_SIGNATURE_DEFAULT,\
 REDA_WEAK_REFERENCE_INVALID,\
 RTI_FALSE,\
 NULL,\
 RTI_TRUE}

#define PRES_CONTENTFILTEREDTOPIC_PROPERTY_MUTABLE_DEFAULT {\
PRES_CONTENT_FILTER_QOS_POLICY_DEFAULT\
}


struct PRESContentFilteredTopicImmutableProperty {
    /*e A compile function for the filter expression 
    */
    PRESContentFilterCompile compile;
    /*e An eval function that operates on a sample
     */
    PRESContentFilterEvaluate evaluate;
    /*e An eval function that operates on a sample serialized
     */
    PRESContentFilterEvaluate evaluateOnSerialized;
    /*e Function called to determine the kind of
        content filter topic (keyOnly or not)
    */
    PRESContentFilterQuery query;
    /*e Function called when a policy is no longer used
     */
    PRESContentFilterFinalize finalizeFunc;
    /*e An handle to the filter object supplied dring registration. This 
      information is to be passed to the wraper functions for compile, etc.
     */
    /* NOTE: This is NOT the same filter_data supplied in the DDS_x API.
       In actual use, the presentation filter_object is the entire API layer
       filter structure, of which one memmber is the DDS_x API filter_data.
       Wraper functions are required to translate between the two. */
    void *filter_object;

    RTIBool explicitDestroyOnly;
};

extern PRESDllExport void* PRESContentFilterSQLCompile(/* RTI_UINT32,void*,const char*,const char**,RTI_INT32,const void*,const char*,void*,RTI_INT32* */);

extern PRESDllExport RTI_INT32 PRESContentFilterSQLEvaluate(/* RTI_UINT32,void*,void*,const struct PRESFilterSampleInfo* */);

extern PRESDllExport RTI_INT32 PRESContentFilterSQLEvaluateOnSerialized(/* RTI_UINT32,void*,void*,const struct PRESFilterSampleInfo* */);

extern PRESDllExport void PRESContentFilterSQLFinalize(/* RTI_UINT32,void*,void* */);

extern PRESDllExport RTI_INT32 PRESContentFilterSQLQuery(/* RTI_UINT32,void*,void* */);


/*e \ingroup PRESEntityModule
  Name of the default content filtering function
*/
#define PRES_CONTENTFILTEREDTOPIC_DEFAULT_FILTERNAME "RTISQLFILTER"

/*e \ingroup PRESEntityModule
  Maximum lenght of the content filtered topic properties sent over
  the wire. This length includes the length of the content filter name (CFN)
  , related topic name (RTN), filter expression (FE), filter parameters (FP) 
  and filter name (FN). The following expression must always be valid. Note that 
  length(FE) means the number of non-null octets + 1 for the null terminator
  length(CFN) + length(RTP) + length(FN)+length(FE)+length(FP) 
        < PRES_CONTENTFILTER_PROPERTY_DATA_LEN_MAX
*/
#define PRES_CONTENT_FILTER_PROPERTY_LEN_MAX  (256)

#define PRES_CONTENTFILTEREDTOPIC_PROPERTY_IMMUTABLE_DEFAULT {\
PRESContentFilterSQLCompile                  ,\
PRESContentFilterSQLEvaluate                 ,\
PRESContentFilterSQLEvaluateOnSerialized     ,\
PRESContentFilterSQLQuery                    ,\
PRESContentFilterSQLFinalize                 ,\
NULL                                         ,\
RTI_FALSE                                     \
}

struct PRESContentFilteredTopicProperty {
    /*e
     * The immutable portion of a content filtered topic property.
     */
    struct PRESContentFilteredTopicImmutableProperty immutable_part;
    
    /*e
     * The mutable portion of a content filtered topic property.
     */
    struct PRESContentFilteredTopicMutableProperty mutable_part;
};


/*e \ingroup PRESEntityModule
  Default value of topic property.
*/
#define PRES_CONTENTFILTEREDTOPIC_PROPERTY_DEFAULT { \
PRES_CONTENTFILTEREDTOPIC_PROPERTY_IMMUTABLE_DEFAULT, \
PRES_CONTENTFILTEREDTOPIC_PROPERTY_MUTABLE_DEFAULT   \
}

struct PRESContentFilterProperty {
    /*e
      Sequence of octet representating user data
    */
    struct PRESSequenceOctet propertyData;
    char *contentFilterName;
    char *relatedTopicName;
    char *filterName;
    char *filterExpression; 
    char *filterParameters;
    int parameterLength;
};


#define PRES_CONTENT_FILTER_PROPERTY_DEFAULT \
{{0,0,NULL},NULL,NULL,NULL,NULL,NULL,0}


/*e \ingroup PRESParticipantModule
 * Maximum number of IP address count.
 */
#define PRES_PARTICIPANT_IPADDRESS_COUNT_MAX   (RTI_NETIO_RTPS_LOCATOR_LIST_MAX_SIZE)

/*e \ingroup PRESParticipantModule
 * Reduced maximum number of IP address count. Used for multicast.
 */
#define PRES_PARTICIPANT_IPADDRESS_REDUCED_COUNT_MAX   (RTI_NETIO_RTPS_LOCATOR_REDUCED_LIST_MAX_SIZE)


struct PRESLocatorQosPolicy {
    /*e list size */
    int count;
    /*e */
    struct RTINetioLocator locatorList[PRES_PARTICIPANT_IPADDRESS_COUNT_MAX];
};


/*e \ingroup PRESParticipantModule
  Default locator Qos policy value
*/
  #define PRES_LOCATOR_QOS_POLICY_DEFAULT { \
       0, /* count */ \
       RTI_NETIO_RTPS_LOCATOR_LIST_DEFAULT, \
  }

/*e \ingroup PRESParticipantModule
 * Similar to PRESLocatorQosPolicy, but with a reduced max. number of locators.
 *
 * NOTE: if you change this structure, you also need to do the same change on
 * PRESLocatorQosPolicy. Also, you cannot add members to the end of this
 * structure.
 */
struct PRESReducedLocatorQosPolicy {
    /*e list size */
    int count;
    /*e */
    struct RTINetioLocator locatorList[PRES_PARTICIPANT_IPADDRESS_REDUCED_COUNT_MAX];
};



/*e \ingroup PRESParticipantModule
  Default locator Qos policy value
*/
  #define PRES_REDUCED_LOCATOR_QOS_POLICY_DEFAULT { \
       0, /* count */ \
       RTI_NETIO_RTPS_LOCATOR_REDUCED_LIST_DEFAULT, \
  }

/*e \ingroup PRESParticipantModule
  Possible values for ignoredEntityReplacementPolicy.
*/
typedef enum {
    /*e @brief Default value for Participant's ignoredEntityReplacementPolicy,
     *         no replacement is done, ignore will fail if the ignored_entity
     *         table is full.
     */
    PRES_NO_REPLACEMENT_IGNORED_ENTITY_REPLACEMENT,

    /*e @brief If the ignored_entity table is full, the record that has been
     *         not updated for a longer time will be replaced.
     */
    PRES_NOT_ALIVE_FIRST_IGNORED_ENTITY_REPLACEMENT
} PRESIgnoredEntityReplacementPolicy;




extern PRESDllExport RTIBool
PRESLocatorQosPolicy_copy(
    struct PRESLocatorQosPolicy* to, const struct PRESLocatorQosPolicy* from);


extern PRESDllExport
int PRESLocatorQosPolicy_compare(const void* l, const void* r);



/*e \ingroup PRESQosModule
  Default maximum number of locator filters per writer.
 */
#define PRES_LOCATOR_FILTER_DEFAULT_SEQ_LEN_MAX    (32)
/*e \ingroup PRESQosModule
  Default maximum length of each locator filter expression (excluding NULL).
 */
#define PRES_LOCATOR_FILTER_DEFAULT_EXPRESSION_LEN_MAX    (255)
/*e \ingroup PRESQosModule
  Maximum length of filter name (including terminating NULL)
 */
#define PRES_LOCATOR_FILTER_NAME_LEN_MAX    (256)

  
/*e \ingroup PRESQosModule 
  Reserved values for publication priority
*/

  #define PRES_PUBLICATION_PRIORITY_UNDEFINED COMMEND_PUBLICATION_PRIORITY_UNDEFINED
  #define PRES_PUBLICATION_PRIORITY_AUTOMATIC COMMEND_PUBLICATION_PRIORITY_AUTOMATIC


/*e \ingroup PRESQosModule
  @brief format of a locator filter.
*/
struct PRESLocatorFilterProperty {
    struct PRESLocatorQosPolicy locators;
    struct PRESSequenceOctet filterExpression;
    RTI_INT32 publicationPriority;
};



#define PRES_LOCATOR_FILTER_DEFAULT {PRES_LOCATOR_QOS_POLICY_DEFAULT, {0}, \
        PRES_PUBLICATION_PRIORITY_UNDEFINED}


/*e \ingroup PRESQosModule
    PRESSequenceLocatorFilterProperty: 
    Stored as array of PRESLocatorFilterProperty, followed by
    an array of strings, each of length locatorFilterExpressionMaxLength
*/
/* Note: the presence of_seq_buffer (not NULL) and seq_length != 0 is used
         to note the existence of a valid PRESSequenceLocatorFilterProperty.
         However, the presence of _data_buffer is used to note an allocated
         buffer for this property. To show no memory is available for string
         allocation, set _data_length equal to _data_maximum.
*/
struct PRESSequenceLocatorFilterProperty {
    /*i The maximum number of elements in the property list*/
    RTI_UINT32 _seq_maximum;
    
    /*i The number of elements in the property list */
    RTI_UINT32 _seq_length;
    
    /*e The locator filter entries in this sequence */
    struct PRESLocatorFilterProperty *_seq_buffer;
    
    /*e The filter name */
    char *_filter_name;

    /*e Maximum length of the data buffer*/
    RTI_UINT32 _data_maximum;
    
    /*e Current length of data buffer */
    RTI_UINT32 _data_length;
    
    /*e Area allocated for storing data */
    char *_data_buffer;
};


/* \ingroup PRESQosModule
    LocatorFilter Qos. Used to pass a sequence of locator filter properties. 
*/
struct PRESLocatorFilterQosProperty {
    struct PRESSequenceLocatorFilterProperty data;
};



#define PRES_SEQ_LOCATOR_FILTER_PROPERTY_DEFAULT {0,0,NULL,NULL,0,0,NULL}
#define PRES_LOCATOR_FILTER_QOS_PROPERTY_DEFAULT {{0,0,NULL,NULL,0,0,NULL}}


/*e \ingroup PRESQosModule
  @brief format of a locator filter.
*/
struct PRESLocatorFilterPolicy {
    /*i Handle to pass to the evaluate function */
    void *handle;
    /*i Attributes of this filterPolicy */
    RTIBool isEmptyFilter;
    RTIBool isKeyOnlyFilter;
    RTIBool isMetaOnlyFilter;
};


/*e \ingroup PRESQosModule
    PRESSequenceLocatorFilterPolicy: 
    Stored as array of PRESLocatorFilterPolicy
*/
struct PRESSequenceLocatorFilterPolicy {
    /*i Unique key for each user of a filter */
    RTI_UINT32 systemKey;
    /*i Function that compilesthe filter expression */
    PRESContentFilterCompile    compile;
    /*i Function that filters a sample */
    PRESContentFilterEvaluate   evaluate;
    /*i Function that filters a sample on serialized */
    PRESContentFilterEvaluate   evaluateOnSerialized;
    /*i Function that returns attributes of a filter */
    PRESContentFilterQuery      queryFunc;
    /*i Function that finalizes the use of a filterPolicy */
    PRESContentFilterFinalize   finalizeFunc;
    /*i Indicates if the filter associated is builtin or custom */
    RTIBool isBuiltin;
    /*i API layer filter object */
    /* NOTE: This is NOT the same filter_data supplied in the DDS_x API.
       In actual use, the presentation filter_data is the entire API layer
       filter structure, of which one memmber is the DDS_x API filter_data.
       Wraper functions are required to translate between the two. */
    void *filter_object;
    /*i The maximum number of elements in the property list*/
    RTI_UINT32 _seq_maximum;
    /*i The number of elements in the property list */
    RTI_UINT32 _seq_length;
    /*e The locator filter entries in this sequence */
    struct PRESLocatorFilterPolicy *_seq_buffer;
};



#define PRES_LOCATOR_FILTER_POLICY_DEFAULT {NULL,RTI_TRUE,RTI_FALSE,RTI_FALSE}

#define PRES_SEQ_LOCATOR_FILTER_POLICY_DEFAULT { 0, \
 (PRESContentFilterCompile)NULL,\
 (PRESContentFilterEvaluate)NULL,\
 (PRESContentFilterEvaluate)NULL,\
 (PRESContentFilterQuery)NULL,\
 (PRESContentFilterFinalize)NULL,\
 RTI_TRUE,\
 NULL,\
  0,0,NULL}


struct PRESLocatorFilterMatchStatus {
    RTIBool isMatched;
    RTIBool isSessionAsserted;
    /* weak references */
    struct REDAWeakReference commendSrrWR;
    struct REDAWeakReference commendBerWR;
};


struct PRESSequenceLocatorFilterMatchStatus {
    RTI_UINT32 _seq_maximum;
    RTI_UINT32 _seq_length;
    struct PRESLocatorFilterMatchStatus *_seq_buffer;
};



#define PRES_LOCATOR_FILTER_MATCH_STATUS_DEFAULT {0}
#define PRES_SEQ_LOCATOR_FILTER_MATCH_STATUS_DEFAULT {0,0,NULL}


extern RTIBool
PRESLocatorFilterQosProperty_copy(
    struct PRESLocatorFilterQosProperty * out,
    const struct PRESLocatorFilterQosProperty * in);


extern int
PRESLocatorFilterQosProperty_compare(
    const struct PRESLocatorFilterQosProperty *left,
    const struct PRESLocatorFilterQosProperty *right);


extern RTIBool
PRESSequenceLocatorFilterPolicy_copy(
    struct PRESSequenceLocatorFilterPolicy * out,
    const struct PRESSequenceLocatorFilterPolicy * in);


extern int
PRESSequenceLocatorFilterPolicy_compare(
    const struct PRESSequenceLocatorFilterPolicy *left,
    const struct PRESSequenceLocatorFilterPolicy *right);


/* ----------------------------------------------------------------- */

/*e \ingroup PRESQosModule
  Default property qos policy
*/



/* ----------------------------------------------------------------- */

/* flow controller */

typedef enum {
    PRES_FLOWCONTROLLER_SCHED_POLICY_EDF,
    PRES_FLOWCONTROLLER_SCHED_POLICY_HPF,
    PRES_FLOWCONTROLLER_SCHED_POLICY_RR
} PRESFlowControllerSchedPolicy;


/*e \ingroup PRESEntityModule
  @brief Property used to configure a flow controller.
*/
struct PRESFlowControllerProperty {
    PRESFlowControllerSchedPolicy schedPolicy;
    struct RTIEventJobDispatcherTokenBucketProperty bucketProperty;
};



#define PRES_FLOW_CONTROLLER_PROPERTY_DEFAULT \
{ \
    PRES_FLOWCONTROLLER_SCHED_POLICY_EDF, \
    RTI_EVENT_JOB_DISPATCHER_TOKEN_BUCKET_PROPERTY_DEFAULT \
}


/* ----------------------------------------------------------------- */

/* local endpoint configuration listener */

struct PRESLocalEndpointConfigListener;


/*e \defgroup PRESLocalEndpointConfigListenerModule PRESLocalEndpointConfigurationListener
  \ingroup PRESCommonModule
*/

/*e \ingroup PRESLocalEndpointConfigListenerModule
  @note symmetry wrt
  PRESLocalEndpointConfigListenerOnAfterLocalEndpointDestructionCallback.
 */
typedef void
(*PRESLocalEndpointConfigListenerOnAfterLocalEndpointEnabledCallback)(
    const struct PRESLocalEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    const struct PRESLocalEndpointProperty *property,
    struct REDAWorker *worker);


/*e \ingroup PRESLocalEndpointConfigListenerModule
  @note symmetry wrt
  PRESLocalEndpointConfigListenerOnAfterLocalEndpointEnabledCallback
*/
typedef void
(*PRESLocalEndpointConfigListenerOnAfterLocalEndpointDestructionCallback)(
    const struct PRESLocalEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    RTIBool useSecureChannel,
    struct REDAWorker *worker);


/*e \ingroup PRESLocalEndpointConfigListenerModule
  @note Detect property changes.
*/
typedef void
(*PRESLocalEndpointConfigListenerOnAfterLocalEndpointPropertyChangedCallback)(
    const struct PRESLocalEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    const struct PRESLocalEndpointProperty *newProp,
    struct REDAWorker *worker);


/*e \ingroup PRESLocalEndpointConfigListenerModule
  Listener for creation, destruction and changes in properties of local
  endpoint.
*/
struct PRESLocalEndpointConfigListener {
    PRESLocalEndpointConfigListenerOnAfterLocalEndpointEnabledCallback
        onAfterLocalEndpointEnabled;
    PRESLocalEndpointConfigListenerOnAfterLocalEndpointPropertyChangedCallback
    onAfterLocalEndpointPropertyChanged;
    PRESLocalEndpointConfigListenerOnAfterLocalEndpointDestructionCallback
    onAfterLocalEndpointDestruction;
};


/* ----------------------------------------------------------------- */

/* remote endpoint configuration listener */

/*e \defgroup PRESRemoteEndpointConfigListenerModule PRESRemoteEndpointConfigurationListener
  \ingroup PRESCommonModule
*/

struct PRESRemoteEndpointConfigListener;


/*e \ingroup PRESRemoteEndpointConfigListenerModule
  @note symmetry wrt
  PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointDestructionCallback.
 */
typedef void
(*PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointCreationCallback)(
    const struct PRESRemoteEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    const struct PRESRemoteEndpointProperty *property,
    struct REDAWorker *worker);


/*e \ingroup PRESRemoteEndpointConfigListenerModule
  @note symmetry wrt
  PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointCreationCallback
*/
typedef void
(*PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointDestructionCallback)(
    const struct PRESRemoteEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    struct REDAWorker *worker);


/*e \ingroup PRESRemoteEndpointConfigListenerModule
  @note Detect property changes.
*/
typedef void
(*PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointPropertyChangedCallback)(
    const struct PRESRemoteEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    const struct PRESRemoteEndpointProperty *oldProp,
    const struct PRESRemoteEndpointProperty *newProp,
    struct REDAWorker *worker);


/*e \ingroup PRESRemoteEndpointConfigListenerModule
  Listener for creation, destruction and changes in properties of remote
  endpoint.
*/
struct PRESRemoteEndpointConfigListener {
    PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointCreationCallback
        onAfterRemoteEndpointCreation;
    PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointPropertyChangedCallback onAfterRemoteEndpointPropertyChanged;
    PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointDestructionCallback
    onAfterRemoteEndpointDestruction;
};


/* ----------------------------------------------------------------- */

/* product version */

/*e \ingroup PRESVendorSpecificParameterModule
  Keep track of the product version.
 */
struct PRESProductVersion {
    /*e
      Major Version
    */
    RTICdrChar major;
    /*e
      Minor Version
    */
    RTICdrChar minor;
    /*e
      Release letter
    */
    RTICdrChar release;
    /*e
      Revision number
    */
    RTICdrChar revision;
};



/*e \ingroup PRESVendorSpecificParameterModule
  Default value of product version.
*/
#define PRES_PRODUCT_VERSION_DEFAULT { 0, 0, '0', 0 }
#define PRES_PRODUCT_VERSION_42c0 { 4, 2, 'c', 0 }
#define PRES_PRODUCT_VERSION_42d0 { 4, 2, 'd', 0 }
#define PRES_PRODUCT_VERSION_EARLIEST_COMPATIBLE_VERSION PRES_PRODUCT_VERSION_42d0


extern int PRESProductVersion_compare(const void* l, const void* r);


/*e \ingroup PRESQosModule
 * Discovery plugin promiscuity kind.
 */
typedef enum {
    /*e
     * Matching entities.
     */
    PRES_DISCOVER_MATCHING_REMOTE_ENTITIES_PROMISCUITY = 0x0001,

    /*e
     * All entities.
     */
    PRES_DISCOVER_ALL_REMOTE_ENTITIES_PROMISCUITY = 0xFFFF
} PRESDiscoveryPluginPromiscuityKind;



typedef RTI_UINT32 PRESBuiltinEndpointMask;



#define PRES_BUILTIN_ENDPOINT_NONE  0x00000000


/* 
 * Vendor specific built-in endpoint bits.
 * There is a bit mask for the protocol-defined builtin endpoints (e.g.
 * liveliness readers/writers) and another one for vendor-specific
 * built-in endpoints. The IDs below correspond to the vendor-specific
 * built-in endpoints
 */

#define PRES_BUILTIN_ENDPOINT_SERVICE_REQUEST_WRITER \
    MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_SERVICE_REQUEST_WRITER
#define PRES_BUILTIN_ENDPOINT_SERVICE_REQUEST_READER \
    MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_SERVICE_REQUEST_READER
#define PRES_BUILTIN_ENDPOINT_SECURE_SERVICE_REQUEST_WRITER \
    MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_SECURE_SERVICE_REQUEST_WRITER
#define PRES_BUILTIN_ENDPOINT_SECURE_SERVICE_REQUEST_READER \
    MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_SECURE_SERVICE_REQUEST_READER
#define PRES_BUILTIN_ENDPOINT_LOCATOR_PING_WRITER \
    MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_LOCATOR_PING_WRITER
#define PRES_BUILTIN_ENDPOINT_LOCATOR_PING_READER \
    MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_LOCATOR_PING_READER


/* ----------------------------------------------------------------- */
/* ODBC Connectivity                                                 */
/* ----------------------------------------------------------------- */

/* Forwar declaration */

struct PRESOdbcDatabaseConnection;


/* ----------------------------------------------------------------- */

/* Cookie */
 
struct PRESCookie {
    struct PRESSequenceOctet data;
};



#define PRES_COOKIE_DEFAULT {       \
    PRES_SEQUENCE_OCTET_DEFAULT     \
}


extern void PRESCookie_fromBuffer(struct PRESCookie *cookie, 
                                  struct REDABuffer *buffer);


extern void PRESCookie_toBuffer(struct PRESCookie *cookie, 
                                struct REDABuffer *buffer);


/* ----------------------------------------------------------------- */

/* Flag */
typedef enum PRESSampleFlagBits {
    PRES_REDELIVERED_SAMPLE = (1 << 0),
    PRES_INTERMEDIATE_REPLY_SEQUENCE_SAMPLE = (1 << 1),
    PRES_REPLICATE_SAMPLE = (1 << 2),
    PRES_LAST_SHARED_READER_QUEUE_SAMPLE = (1 << 3),
    PRES_INTERMEDIATE_TOPIC_QUERY_SAMPLE = (1 << 4)
} PRESSampleFlagBits;


 
typedef RTI_INT32 PRESSampleFlag;


/* ----------------------------------------------------------------- */

/* write params */

struct PRESWriteParams {
    struct RTINtpTime *sourceTimestamp;
    struct PRESCookie *cookie;
    struct PRESInstanceHandle *handle;
    RTI_INT32 publicationPriority;
    RTIBool flush_on_write;
    struct PRESOriginalWriterInfo actualOriginalWriterInfo;
    struct PRESOriginalWriterInfo relatedOriginalWriterInfo;
    PRESSampleFlag flag;
    struct MIGRtpsGuid relatedReaderGuid;
    struct MIGRtpsGuid sourceGuid;
    struct MIGRtpsGuid relatedSourceGuid;
    struct MIGRtpsGuid topicQueryGuid;
    /* The following param only affects anonymous writer behavior.
     * If locatorDirectedWriteList is set, the writer will only publish the
     * sample to the specified locators. */
    struct REDAInlineList * locatorDirectedWriteList;
};



#define PRES_WRITE_PARAMS_DEFAULT {  \
    NULL, NULL, NULL, PRES_PUBLICATION_PRIORITY_UNDEFINED, RTI_FALSE, \
    {MIG_RTPS_GUID_UNKNOWN, REDA_SEQUENCE_NUMBER_UNKNOWN}, \
    {MIG_RTPS_GUID_UNKNOWN, REDA_SEQUENCE_NUMBER_UNKNOWN}, \
    0, \
    MIG_RTPS_GUID_UNKNOWN, \
    MIG_RTPS_GUID_UNKNOWN, \
    MIG_RTPS_GUID_UNKNOWN, \
    MIG_RTPS_GUID_UNKNOWN,  \
    NULL \
}


/* ----------------------------------------------------------------- */
/* Transport Encapsulation QoS policy */
 
struct PRESTransportEncapsulationProperty {

    /*i Apply encapsulations to all plugins */
    RTIBool applyEncapsulationsToAllPlugins;

    /*i The pointer to the transport plugin */
    NDDS_Transport_Plugin *plugin;

    /*i The plugin's network address */
    NDDS_Transport_Address_t address;

    /* The number of encapsulations this transport supports */
    RTI_UINT32 encapsulationCount;

    /* The encapsulations this transport supports */
    RTIEncapsulationId encapsulations[NETIO_LOCATOR_ENCAPSULATION_COUNT_MAX];
};



#define PRES_TRANSPORT_ENCAPSULATION_PROPERTY_DEFAULT {       \
    RTI_FALSE, NULL, NDDS_TRANSPORT_ADDRESS_INVALID, 0, {0,0,0,0,0,0,0,0}  \
}



struct PRESTransportEncapsulationQosPolicy {
    RTI_UINT32 _seq_maximum;
    RTI_UINT32 _seq_length;
    struct PRESTransportEncapsulationProperty *_seq_buffer;
};


#define PRES_TRANSPORT_ENCAPSULATION_QOS_POLICY_DEFAULT {       \
    0, 0, NULL  \
}


extern PRESDllExport void
PRESTransportEncapsulationQosPolicy_reset_property(
    struct PRESTransportEncapsulationProperty *property);


extern PRESDllExport void
PRESTransportEncapsulationQosPolicy_assert_property(
    struct PRESTransportEncapsulationQosPolicy *self,
    const struct PRESTransportEncapsulationProperty *property,
    int encapsulationCount,
    RTIEncapsulationId *encapsulations,
    RTIBool mergeTransports,
    RTIBool *foundMoreThanProvidedFor);


/* ----------------------------------------------------------------- */

typedef enum {
    PRES_UNREGISTERED_INSTANCE_REPLACEMENT,

    PRES_ALIVE_INSTANCE_REPLACEMENT,

    PRES_DISPOSED_INSTANCE_REPLACEMENT,

    PRES_ALIVE_THEN_DISPOSED_INSTANCE_REPLACEMENT,

    PRES_DISPOSED_THEN_ALIVE_INSTANCE_REPLACEMENT,

    PRES_ALIVE_OR_DISPOSED_INSTANCE_REPLACEMENT

} PRESInstanceReplacementPolicy;


/* ----------------------------------------------------------------- */

/* \ingroup PRESQosModule    
*/
struct PRESEndpointGroup {
    /*i
        @brief Role name.
    */
    char * roleName;
    /*i
        @brief Quorum count.
    */
    int quorumCount;
};


/*e \ingroup PRESQosModule
    Property sequence
*/
struct PRESSequenceEndpointGroup {
    /*i The maximum number of elements in the endpoint group list*/
    RTI_UINT32 maximum;
    
    /*i The number of elements in the endpoint group list */
    RTI_UINT32 length;
    
    /*e The elements in this sequence */
    struct PRESEndpointGroup * buffer;
    
    /*e Maximum length of the string buffer*/
    RTI_UINT32 _string_maximum;
    
    /*e Current length of string buffer */
    RTI_UINT32 _string_length;
    
    /*e Area allocated for storing string */
    char * _string_buffer;
};


/* ----------------------------------------------------------------- */


#define PRES_AVAILABILITY_QOS_POLICY_DEFAULT {RTI_FALSE,{0,0},{0,0},{0,0,NULL,0,0,NULL}}


/*e \ingroup PRESQosModule
 * Availability.
 */
struct PRESAvailabilityQosPolicy {
    /*
     * Enable required subscriptions
     */
    RTIBool enableRequiredSubscriptions;
    /*e
     * Max data availability waiting time.
     */
    struct RTINtpTime maxDataAvailabilityWaitingTime;
    /*e
     * Max endpoint availability waiting time.
     */
    struct RTINtpTime maxEndpointAvailabilityWaitingTime;
    /*e
     * Endpoint group sequence
     */
    struct PRESSequenceEndpointGroup requiredMatchedEndpointGroups;
};


/* ----------------------------------------------------------------- */

/*e \ingroup PRESQosModule
 * Enables or disables TopicQueries and configures their dispatch policy.
 */
struct PRESTopicQueryDispatchQosPolicy {
    /*e
     * Whether to enable Topic Queries on this writer or not
     */
    RTIBool enable;
    /*e
     * The periodicity of the event that publishes samples for topic queries
     */
    struct RTINtpTime publicationPeriod;

    /*e
     * The number of samples to publish in each event, belonging to any topic
     * query.
     */
    RTI_INT32 samplesPerPeriod;
};



#define PRES_TOPIC_QUERY_DISPATCH_QOS_POLICY_DEFAULT {RTI_FALSE,{1,0},-1}


/*e
 * Indicates if a remote DataWriter supports topic queries and other relevant
 * information.
 *
 * Note: this information is for discovery, as opposed to
 * PRESTopicQueryDispatchQosPolicy, which locally configures a DataWriter.
 */
struct PRESTopicQueryPublicationProperty {
    /*e
     * Whether the remote DataWriter enables Topic Queries or not
     */
    RTIBool enable;

    /*e
     * The number of sessions this DataWriter dedicates to publishing
     * topic-query samples. Zero indicates that the DataWriter uses a regular
     * session also for publishing topic-query samples.
     *
     * Currently only 0 and 1 are supported and, when enable is true, that value
     * depends on the writer-history plugin: ODBC doesn't support multi-session,
     * so the value is 0; Memory does, so the value is 1.
     */
    RTI_INT32 numberOfSessions;
};



#define PRES_TOPIC_QUERY_PUBLICATION_PROPERTY_DEFAULT {RTI_FALSE, 0}


/*e \ingroup PRESQosModule
 */
extern PRESDllExport
int PRESTopicQueryPublicationProperty_compare(
        const struct PRESTopicQueryPublicationProperty *l,
        const struct PRESTopicQueryPublicationProperty *r);


/* ----------------------------------------------------------------- */

/*e \ingroup PRESQosModule
 * Sample identity
 */
struct PRESSampleIdentity {
    struct MIGRtpsGuid guid;
    struct REDASequenceNumber sn;
};


/*e \ingroup PRESQosModule
 * The structure used to store metadata
 */
struct PRESFilterSampleInfo {
    /*e
      Publication virtual guid
    */
    struct PRESOctetGuid relatedSampleWriterGuid;
    /*e
      Publication virtual sequence number
    */
    struct REDASequenceNumber relatedSampleSn;
    /*e
      Related source GUID
    */
    struct PRESOctetGuid relatedSourceGuid;
    /*e
      Related reader GUID
    */
    struct PRESOctetGuid relatedReaderGuid;    
    /*e 
     Publication priority of the sample
     */
    RTI_INT32 publicationPriority;
};


/*e \ingroup PRESQosModule
 * The structure used to provide information about the expression.
 */
struct PRESExpressionProperty {
    /*e 
     Indicates if expression is based only on key fields
     */
    RTIBool keyOnlyFilter;
    /*e 
     Indicates if writer side filtering optimization can be performed
     */
    RTIBool writerSideFilterOptimization;
};



#define PRES_EXPRESSION_PROPERTY_DEFAULT {RTI_FALSE,RTI_FALSE}


/*e \ingroup PRESQosModule
 * The structure used to store reserved data to be passed to the sql filter
 */
struct PRESSqlFilterReservedData {
    /*e
      Growth property of the remote reader table
    */
    struct REDAFastBufferPoolGrowthProperty growth;
    /*e
      Maximum number of remote reader filters
    */
    int maxRemoteReaderFilters;
};


/*i \ingroup PRESCommonModule
  Initializes the PRESFilterSampleInfo.
*/

extern	void PRESFilterSampleInfo_initialize(
        struct PRESFilterSampleInfo * self,
        const struct MIGRtpsGuid * relatedOriginalVirtualWriterGuid,
        const struct REDASequenceNumber * relatedOriginalVirtualSn,
        const struct MIGRtpsGuid * relatedSourceGuid,        
        const struct MIGRtpsGuid * relatedReaderGuid,
        RTI_INT32 publicationPriority);



#define PRES_FILTER_SAMPLE_INFO_DEFAULT {      \
    {{0}},REDA_SEQUENCE_NUMBER_UNKNOWN ,       \
    {{0}},                                     \
    {{0}},                                     \
    PRES_PUBLICATION_PRIORITY_UNDEFINED        \
}


/*e \ingroup PRESQosModule
 * App Ack response
 */
 
struct PRESAckResponseData {
    struct PRESSequenceOctet data;
};




#define PRES_ACK_RESPONSE_DATA_DEFAULT {       \
    PRES_SEQUENCE_OCTET_DEFAULT     \
}


 
extern	void PRESAckResponse_fromBuffer(struct PRESAckResponseData *ackResp, 
                                const struct REDABuffer *buffer);

    
 
extern	void PRESAckResponse_toBuffer(const struct PRESAckResponseData *ackResp, 
                              struct REDABuffer *buffer);


typedef enum
{
    PRES_PROTOCOL_ACK_MODE,
    PRES_AUTO_APP_ACK_MODE,
    PRES_ORDERED_APP_ACK_MODE,
    PRES_EXPLICIT_APP_ACK_MODE

} PRESAppAckMode;


/*e \ingroup PRESQosModule
 * Tranport information of installed transports
 */
/* IMPORTANT: We are making an assumption in
   DDS_TransportInfoSeq_to_presentation_sequence based on the fact that the
   PRESSequenceTransportInfo and DDS_TransportInfoSeq
   have the same memory allocation. Therefore, if one or the other changes,
   the other must be changed to match 
*/

struct PRESSequenceTransportInfo {
   RTI_UINT32 _maximum;
   RTI_UINT32 _length;
   struct RTINetioTransportInfo *_buffer;
};


/*i \ingroup PRESCommonModule
Copy a PRESSequenceTransportInfo object

@pre The output PRESSequenceTransportInfo object can hold the input
     PRESSequenceTransportInfo object.

@return RTI_TRUE if successful. Otherwise, return RTI_FALSE, which can
happen if preconditions are not met.
*/
extern PRESDllExport 
RTIBool PRESTransportInfoSeq_copy(
    struct PRESSequenceTransportInfo *out,
    const struct PRESSequenceTransportInfo *in);



#define PRES_SEQUENCE_TRANSPORT_INFO_DEFAULT {0, 0, NULL}




/******************************************************************************
 * GMCLASSID: defined in the OMG security spec, used in GenericMessageClassId.
 ******************************************************************************/

/*************************** OMG class ids ************************************/
#define PRES_GMCLASSID_TRUST_AUTH_HANDSHAKE "dds.sec.auth"
#define PRES_GMCLASSID_TRUST_PARTICIPANT_INTERCEPTOR_STATE \
    "dds.sec.participant_crypto_tokens"
#define PRES_GMCLASSID_TRUST_DATAWRITER_INTERCEPTOR_STATE \
    "dds.sec.datawriter_crypto_tokens"
#define PRES_GMCLASSID_TRUST_DATAREADER_INTERCEPTOR_STATE \
    "dds.sec.datareader_crypto_tokens"

/*************************** RTI class ids ************************************/
/* Used as prefix for RTI specific trust-plugins class-ids */
#define PRES_GMCLASSID_TRUST_RTI_PLUGINS_PREFIX "com.rti.sec."
/* Used for requesting the remote peer to restart the authentication process */
#define PRES_GMCLASSID_TRUST_RTI_AUTH_REQUEST \
    PRES_GMCLASSID_TRUST_RTI_PLUGINS_PREFIX "auth.request"



/************************* Channel Service-IDs *********************************
 * For each GMCLASSID, we do an internal mapping to a Channel Service-ID. For
 * more information about Channel Service-IDs, please refer to
 * PRESPsServiceBuiltinChannelForwarder documentation.
******************************************************************************/
/*e \ingroup PRESInterParticipantModule
    Channel Service-ID for UNKNOWN GMCLASSID.
*/
#define PRES_GMCLASSID_SERVICE_ID_UNKNOWN 0
/*e \ingroup PRESInterParticipantModule
 *  Special Service-ID for UNKNOWN GMCLASSID. It identifies DataHolder samples.
 */
#define PRES_GMCLASSID_SERVICE_ID_UNKNOWN_DATAHOLDER -1
/*e \ingroup PRESInterParticipantModule
    Channel Service-ID for GMCLASSID_TRUST_AUTH_HANDSHAKE messages.
*/
#define PRES_GMCLASSID_SERVICE_ID_TRUST_AUTH_HANDSHAKE 1
/*e \ingroup PRESInterParticipantModule
    Channel Service-ID for GMCLASSID_TRUST_RTI_AUTH_REQUEST messages.
*/
#define PRES_GMCLASSID_SERVICE_ID_TRUST_RTI_AUTH_REQUEST 2
/*e \ingroup PRESInterParticipantModule
    Channel Service-ID for GMCLASSID_TRUST_PARTICIPANT_CRYPTO_TOKENS messages.
*/
#define PRES_GMCLASSID_SERVICE_ID_TRUST_PARTICIPANT_CRYPTO_TOKENS 3
/*e \ingroup PRESInterParticipantModule
    Channel Service-ID for GMCLASSID_TRUST_DATAWRITER_CRYPTO_TOKENS messages.
*/
#define PRES_GMCLASSID_SERVICE_ID_TRUST_DATAWRITER_CRYPTO_TOKENS 4
/*e \ingroup PRESInterParticipantModule
    Channel Service-ID for GMCLASSID_TRUST_DATAREADER_CRYPTO_TOKENS messages.
*/
#define PRES_GMCLASSID_SERVICE_ID_TRUST_DATAREADER_CRYPTO_TOKENS 5


/* \ingroup PRESInterParticipantModule
 *  BinaryProperty type that mirrors DDS_BinaryProperty_t
 */
struct PRESBinaryProperty {
    /*i
     * @brief BinaryProperty name. The name containing a NUL
     * terminated string.
     */
    char *name;
    /*i
     * @brief BinaryProperty value. The value containing a sequence of octets.
     */
    struct PRESDDSSequence value;
    /*i
     *  @brief Indicates if the binary property must be propagated or not.
     */
    RTICdrBoolean propagate;
};


/* \ingroup PRESInterParticipantModule
 *  DataHolder type that mirrors DDS_DataHolder
 */
struct PRESDataHolder {
    /*i
     * @brief class_id. Identifies the kind of DataHolder.
     */
    char *classId;
    /*i
     * @brief properties. A sequence of PRESProperty.
     */
    struct PRESDDSSequence properties;
    /*i
     * @brief binary_properties. A sequence of PRESBinaryProperty.
     */
    struct PRESDDSSequence binaryProperties;
};




#define PRES_DATA_HOLDER_INITIALIZER { \
    NULL, \
    PRES_DDS_SEQUENCE_INITIALIZER, \
    PRES_DDS_SEQUENCE_INITIALIZER \
}

/*
 * SEC-122: Returns true for an empty dataHolder
 */
extern PRESDllExport
RTIBool PRESDataHolder_isNil(const struct PRESDataHolder *dataHolder);


/* 
 * These values are specified in the DDS security logging plugin. We define
 * them in pres to log core-level security-related events that the security
 * plugins cannot detect.
 */
#define PRES_TRUST_LOGGING_EMERGENCY_LEVEL     0
#define PRES_TRUST_LOGGING_ALERT_LEVEL         1
#define PRES_TRUST_LOGGING_CRITICAL_LEVEL      2
#define PRES_TRUST_LOGGING_ERROR_LEVEL         3
#define PRES_TRUST_LOGGING_WARNING_LEVEL       4
#define PRES_TRUST_LOGGING_NOTICE_LEVEL        5
#define PRES_TRUST_LOGGING_INFORMATIONAL_LEVEL 6
#define PRES_TRUST_LOGGING_DEBUG_LEVEL         7

/*
 * Plugin class names used by pres
 */
#define PRES_TRUST_LOGGING_COMMON_CLASS         "Common"
#define PRES_TRUST_LOGGING_AUTHENTICATION_CLASS "Authentication"
#define PRES_TRUST_LOGGING_ACCESS_CONTROL_CLASS "Access Control"
#define PRES_TRUST_LOGGING_INTERCEPTOR_CLASS    "Cryptography"
#define PRES_TRUST_LOGGING_TRUST_CLASS          "Security"
#define PRES_TRUST_LOGGING_LOGGING_CLASS        "Logging"


/*e \ingroup PRESTopicQueryModule
 * \brief TopicQuery selection
 */

struct PRESTopicQuerySelection {
    char *filterClassName;
    char *filterExpression;
    struct PRESSequenceString filterParameters;
};


#define PRES_TOPIC_QUERY_SELECTION_INVALID = {NULL, NULL, {0, 0, NULL}}


/*e \ingroup PRESParticipantModule
  Lease expiration for a locator to be considered reachable 
 */

#define PRES_PARTICIPANT_REACHABILITY_LEASE_DURATION_SEC_DEFAULT   (60)
#define PRES_PARTICIPANT_REACHABILITY_LEASE_DURATION_NANOSEC_DEFAULT   (0)
#define PRES_PARTICIPANT_REACHABILITY_LEASE_DURATION_DEFAULT \
    {\
    PRES_PARTICIPANT_REACHABILITY_LEASE_DURATION_SEC_DEFAULT, \
    PRES_PARTICIPANT_REACHABILITY_LEASE_DURATION_NANOSEC_DEFAULT \
    }



/*e \ingroup PRESInterParticipantModule
    Name of type used for service request topic.
*/
#define PRES_SERVICE_REQUEST_TYPE "DDS_ServiceRequest"
/*e \ingroup PRESInterParticipantModule
    Name of topic used for service request support.
*/
#define PRES_SERVICE_REQUEST_TOPIC "DDSServiceRequest"

/*i \ingroup PRESInterParticipantModule
 *  Name of internal topic used for non-secure service request support. This is
 *  the one we use for matching core service request writers and readers. It
 *  should NOT be used by a regular dds c user.
 */
#define PRES_SERVICE_REQUEST_INTERNAL_TOPIC "PRESServiceRequest"

/*i \ingroup PRESInterParticipantModule
 *  Name of internal topic used for secure service request support. This is
 *  the one we use for matching core service request writers and readers. It
 *  should NOT be used by a regular dds c user.
 */
#define PRES_SERVICE_REQUEST_SECURE_INTERNAL_TOPIC "PRESServiceRequestSecure"

/*e \ingroup PRESInterParticipantModule
    Service Request Channel ID for unknown channel
*/
#define PRES_SERVICE_REQUEST_ID_UNKNOWN 0

/*e \ingroup PRESInterParticipantModule
    Service Request Channel ID for Topic Query
*/
#define PRES_SERVICE_REQUEST_ID_TOPIC_QUERY 1

/*e \ingroup PRESInterParticipantModule
    Service Request Channel ID for Locator Reachability
*/
#define PRES_SERVICE_REQUEST_ID_LOCATOR_REACHABILITY 2

/*e \ingroup PRESInterParticipantModule
    Object ID for service request writer.
*/
#define PRES_SERVICE_REQUEST_RTPS_OBJECT_ID_WRITER \
    MIG_RTPS_OBJECT_ID_SERVICE_REQUEST_WRITER
/*e \ingroup PRESInterParticipantModule
    Object ID for service request reader.
*/
#define PRES_SERVICE_REQUEST_RTPS_OBJECT_ID_READER \
        MIG_RTPS_OBJECT_ID_SERVICE_REQUEST_READER

/*e \ingroup PRESInterParticipantModule
 *  Object ID for secure service request writer.
 */
#define PRES_SECURE_SERVICE_REQUEST_RTPS_OBJECT_ID_WRITER \
        MIG_RTPS_OBJECT_ID_SECURE_SERVICE_REQUEST_WRITER
/*e \ingroup PRESInterParticipantModule
 *  Object ID for secure service request reader.
 */
#define PRES_SECURE_SERVICE_REQUEST_RTPS_OBJECT_ID_READER \
        MIG_RTPS_OBJECT_ID_SECURE_SERVICE_REQUEST_READER

/*e \ingroup PRESInterParticipantModule
    Name of type used for participant stateless and secure volatile message
    channels.
*/
#define PRES_PARTICIPANT_GENERIC_MESSAGE_TYPE \
        "ParticipantGenericMessage"

/*e \ingroup PRESInterParticipantModule
    Name of topic used as wildcard for stateless and secure volatile message
    channels.
*/
#define PRES_PARTICIPANT_GENERIC_MESSAGE_TOPIC \
        "[ParticipantGenericMessage]"

/*e \ingroup PRESInterParticipantModule
    Name of topic used for participant stateless message channel.
*/
#define PRES_PARTICIPANT_STATELESS_MESSAGE_TOPIC \
        "DCPSParticipantStatelessMessage"

/*e \ingroup PRESInterParticipantModule
    Name of topic used for participant secure volatile message channel.
*/
#define PRES_PARTICIPANT_SECURE_VOLATILE_MESSAGE_TOPIC \
        "DCPSParticipantVolatileMessageSecure"

/*e \ingroup PRESInterParticipantModule
    Object ID for stateless message writer.
*/
#define PRES_PARTICIPANT_STATELESS_MESSAGE_RTPS_OBJECT_ID_WRITER \
        MIG_RTPS_OBJECT_ID_STATELESS_MESSAGE_WRITER

/*e \ingroup PRESInterParticipantModule
    Object ID for stateless message reader.
*/
#define PRES_PARTICIPANT_STATELESS_MESSAGE_RTPS_OBJECT_ID_READER \
        MIG_RTPS_OBJECT_ID_STATELESS_MESSAGE_READER

/*e \ingroup PRESInterParticipantModule
    Object ID for secure volatile message writer.
*/
#define PRES_PARTICIPANT_SECURE_VOLATILE_MESSAGE_RTPS_OBJECT_ID_WRITER \
        MIG_RTPS_OBJECT_ID_SECURE_VOLATILE_MESSAGE_WRITER

/*e \ingroup PRESInterParticipantModule
    Object ID for secure volatile message reader.
*/
#define PRES_PARTICIPANT_SECURE_VOLATILE_MESSAGE_RTPS_OBJECT_ID_READER \
        MIG_RTPS_OBJECT_ID_SECURE_VOLATILE_MESSAGE_READER


/*------------------- Builtin Channel Forwarder -------------------*/

struct PRESBuiltinChannelForwarder;


/*e \defgroup PRESBuiltinChannelForwarderModule PRESBuiltinChannelForwarder
  \ingroup PRESCommonModule
*/

/*e \ingroup PRESBuiltinChannelForwarderModule
  Allocates the resources needed for storing a DDS C sample for the given
  channel.
 */
typedef void *
(*PRESBuiltinChannelForwarderCreateSampleFunction)(
    const char *channelTopicName,
    int serviceId,
    void *userData);


/*e \ingroup PRESBuiltinChannelForwarderModule
  Releases the resources needed for storing a DDS C sample for the given
  channel.
 */
typedef void
(*PRESBuiltinChannelForwarderDeleteSampleFunction)(
    const char *channelTopicName,
    int serviceId,
    void *userData,
    void *sample);


/*e \ingroup PRESBuiltinChannelForwarderModule
  Transforms an input PRES sample to a DDS C sample.
 */
typedef RTIBool
(*PRESBuiltinChannelForwarderTransformSampleFromPresFunction)(
    const char *channelTopicName,
    int serviceId,
    void *userData,
    void *sample,
    const void *presSample);


/*e \ingroup PRESBuiltinChannelForwarderModule
  Returns any resource loaned during the transformation of a PRES sample to a
  DDS C sample.
 */
typedef RTIBool
(*PRESBuiltinChannelForwarderReturnSampleLoanFunction)(
    const char *channelTopicName,
    int serviceId,
    void *userData,
    void *sample);


/*e \ingroup PRESBuiltinChannelForwarderModule
  Transforms an input DDS C sample to a PRES sample.
 */
typedef RTIBool
(*PRESBuiltinChannelForwarderTransformSampleToPresFunction)(
    const char *channelTopicName,
    int serviceId,
    void *userData,
    void *presSample,
    const void *sample);


/*e \ingroup PRESBuiltinChannelForwarderModule
  Returns any resource loaned during the transformation of a DDS C sample to a
  PRES sample.
 */
typedef RTIBool
(*PRESBuiltinChannelForwarderReturnPresSampleLoanFunction)(
    const char *channelTopicName,
    int serviceId,
    void *userData,
    void *presSample);


/*e \ingroup PRESBuiltinChannelForwarderModule
 * Transforms an input PRES sample to a serialized CDR buffer.
 */
typedef RTIBool
(*PRESBuiltinChannelForwarderTransformCdrFromPresFunction)(
    const char *channelTopicName,
    int serviceId,
    void *userData,
    unsigned int *length,
    char *buffer,
    const void *presSample,
    RTICdrEndian endianness);


/*e \ingroup PRESBuiltinChannelForwarderModule
 * Forwarder for interacting with builtin channel implemented in higher layers.
 * It consist of function pointers to a higher level module (disc, dds_c)
 * Builtin Channel Forwarder implentation.
 *
 * A Builtin Channel is a communication channel for providing a set of services:
 *  - Each channel is identified by a channelTopicName and characterized by a
 *    set of QoS.
 *  - Each service is identified by a serviceId. For channels providing only one
 *    service, the service-id is 0
 *
 * Current usage model: forwarder is an entry point to multiple builtin channels
 * in a module (e.g., all the builtin channels managed by dds_c). As such, the
 * forwarder currently only consist of function pointers with no "state".
 */
struct PRESBuiltinChannelForwarder {
    /* ddsc sample management */
    PRESBuiltinChannelForwarderCreateSampleFunction createSample;
    PRESBuiltinChannelForwarderDeleteSampleFunction deleteSample;

    /* pres to ddsc sample transformation */
    PRESBuiltinChannelForwarderTransformSampleFromPresFunction transformSampleFromPres;
    PRESBuiltinChannelForwarderReturnSampleLoanFunction returnSampleLoan;

    /* ddsc to pres sample transformation */
    PRESBuiltinChannelForwarderTransformSampleToPresFunction transformSampleToPres;
    PRESBuiltinChannelForwarderReturnPresSampleLoanFunction returnPresSampleLoan;

    /* pres to cdr sample transformation */
    PRESBuiltinChannelForwarderTransformCdrFromPresFunction transformCdrFromPres;
};


/*i
 * SEC-82: nodes that can go in the corresponding lists in
 * the COMMEND local endpoint's MIGGeneratorSecurityProperty. COMMEND will
 * directly modify the node member of the nodes as it adds and removes
 * nodes from its lists.
 */

/* 2 because TopicQuery uses 2 sessions by default */

  #define PRES_PREALLOCATED_INTERCEPTOR_HANDLE_NODE_COUNT 2


struct PRESInterceptorHandleState {
    /*
     * The master copy that will be created and deleted. The nodes will just
     * have copies of this.
     */
    void *interceptorHandle;

    /*
     * These are arrays. There's one node per session.
     *
     * Participant nodes are used during the encode rtps message calls.
     * Endpoints nodes are used during the encode submessage calls.
     * Matched nodes are populated upon remote endpoint assertion to commend
     *     and used when sending to all matched receivers.
     * Directed nodes are populated and used when sending to a subset of
     *     matched receivers. For example, unicast heartbeats and ACKNACKs and
     *     writer-side filtering.
     */
    struct MIGInterceptorHandleNode *matchedEndpointNodes;
    struct MIGInterceptorHandleNode *matchedParticipantNodes;
    struct MIGInterceptorHandleNode *directedEndpointNodes;
    struct MIGInterceptorHandleNode *directedParticipantNodes;

    /*
     * If there are fewer than 3 sessions, then the previous arrays will
     * just point to these preallocated arrays.
     */
    struct MIGInterceptorHandleNode preallocatedMatchedEndpointNodes[
        PRES_PREALLOCATED_INTERCEPTOR_HANDLE_NODE_COUNT];
    struct MIGInterceptorHandleNode preallocatedMatchedParticipantNodes[
        PRES_PREALLOCATED_INTERCEPTOR_HANDLE_NODE_COUNT];
    struct MIGInterceptorHandleNode preallocatedDirectedEndpointNodes[
        PRES_PREALLOCATED_INTERCEPTOR_HANDLE_NODE_COUNT];
    struct MIGInterceptorHandleNode preallocatedDirectedParticipantNodes[
        PRES_PREALLOCATED_INTERCEPTOR_HANDLE_NODE_COUNT];
};



#ifdef __cplusplus
    }   /* extern "C" */
#endif

  #include "pres/pres_common_impl.h"


/* ----------------------------------------------------------------- */

/* end of $Id$ */
#endif /* pres_common_h */
