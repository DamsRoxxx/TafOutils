/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)pres_psReaderQueue.h    generated by: makeheader    Fri Feb 16 13:51:43 2018
 *
 *		built from:	psReaderQueue.ifc
 */

#ifndef pres_psReaderQueue_h
#define pres_psReaderQueue_h


  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef reda_fastBuffer_h
    #include "reda/reda_fastBuffer.h"
  #endif
  #ifndef reda_worker_h
    #include "reda/reda_worker.h"
  #endif
  #ifndef pres_dll_h
    #include "pres/pres_dll.h"
  #endif
  #ifndef pres_common_h
    #include "pres/pres_common.h"
  #endif
  #ifndef pres_readerStatistics_h
    #include "pres/pres_readerStatistics.h"
  #endif
  #ifndef pres_typePlugin_h
    #include "pres/pres_typePlugin.h"
  #endif
  #ifndef pres_participant_h
    #include "pres/pres_participant.h"
  #endif
  #ifndef pres_psReaderWriter_h
    #include "pres/pres_psReaderWriter.h"
  #endif
  #include "pres/pres_readerQueue.h"

#ifdef __cplusplus
    extern "C" {
#endif

struct PRESPsReaderQueueRemoteWriterQueue;

struct PRESPsService_QueryConditionState;

struct PRESReaderQueueIndexCondition;

struct PRESPsReaderQueue;

struct PRESPsReaderQueueProperty {
    /*e Owner of this collator. */
    struct MIGRtpsGuid readerGuid;

    /*e Virtual Reader GUID */
    struct MIGRtpsGuid virtualReaderGuid;
    
    /*e TopicQuery GUID */
    /* The DataReader queue will process only samples associated with 
     * this TopicQuery */
    struct PRESOctetGuid topicQueryGuid;

    /*e Control growth in number of samples. */
    struct REDAFastBufferPoolGrowthProperty sampleCount;

    /*e The maximum allowable number of samples per remote writer. */
    int maximalSamplePerRemoteWriterCount;

    /*e Control growth in number of remote writers. */
    struct REDAFastBufferPoolGrowthProperty remoteWriterCount;

    /*e Control growth in number of virtual remote writers. */
    struct REDAFastBufferPoolGrowthProperty virtualWriterCount;

    /*e Control growth in number of infos. */
    struct REDAFastBufferPoolGrowthProperty infoCount;

    /*e Control growth in number of concurrent reads. */
    struct REDAFastBufferPoolGrowthProperty outstandingReadCount;

    /*e The maximum samples that can be returned from read, to address #9375 */
    int maximalSamplesPerRead;

    /*e The maximum number of QueryConditionFilters allowed per Reader */
    int maximumQueryConditionFilters;

    /*e The reliability QoS. */
    struct PRESReliabilityQosPolicy reliabilityQos;
    /*e The presentation QoS. */
    struct PRESPresentationQosPolicy presentationQos;
    /*e The deadline QoS.
      A period set to RTI_NTP_TIME_MAX is interpreted as infinite.  In addition,
      the period may not exceed PRES_DEADLINE_QOS_POLICY_DEADLINE_PERIOD_MAX. */
    struct PRESDeadlineQosPolicy deadlineQos;
    /*e The ownership QoS. */
    struct PRESOwnershipQosPolicy ownershipQos;
    /*e Indicates whether or not ownership has to be applied based on virtual GUID */
    RTIBool virtualOwnership;
    /*e The destination order QoS */
    struct PRESDestinationOrderQosPolicy destinationOrderQos;
    /*e The time based filter QoS.  The minimumSeparation may not exceed 
        PRES_TIME_BASED_FILTER_QOS_POLICY_MINIMUM_SEPARATION_MAX. */
    struct PRESTimeBasedFilterQosPolicy timeBasedFilterQos;
    /*e The history QoS. */
    struct PRESHistoryQosPolicy historyQos;
    /*e The reader data lifecycle QoS. */
    struct PRESReaderDataLifecycleQosPolicy readerDataLifecycleQos;
    /*e The durability Qos */
    struct PRESDurabilityQosPolicy durabilityQos;
    /*e The service Qos policy */
    struct PRESServiceQosPolicy serviceQos;

    struct PRESTypeSupportQosPolicy typeSupport;

    /*e Restore reader queue state */
    /* This member is used when the reader state can be retrieved from a persistence storage */
    RTIBool restoreState;

    /*e Virtual reliability kind */
    PRESVirtualReliabilityKind virtualReliabilityKind;
    struct PRESAvailabilityQosPolicy availabilityQosPolicy;

    /* This property is used to filter old samples by source timestamp */
    RTIBool filterOldSamples;

    int requestDepth;

    int checkpointFrequency;

    /*e The maximum allowable number of remote writers per virtual sample */
    int maximalRemoteWritersPerSample;

    /*e When this flag is true the PERSISTENT DataReaders will not communicate reliable 
        with the original writers. Reliability will be done only with persistence services
        writers */
    RTIBool delegateReliability;

    /*e The max length of the payload that can be sent with application
        acknowledgements. Determined by reader resource limits QoS */
    int appAckUserDataMaxLength;

    /*e The minimum time the payload will be available for 
        late-joining writers */
    struct RTINtpTime appAckUserDataMinKeepDuration;

    /* With appAckImmediateSend, batch this number of acks per
       remote writer before sending a message */
    int samplesPerAppAck;
    
    /* The reader count will be needed for GROUP access */
    struct REDAFastBufferPoolGrowthProperty readerCount;

    /* The remote writer count will be needed for GROUP access */
    struct REDAFastBufferPoolGrowthProperty discoveryRemoteWriterCount;    

    /*
     * Indicates if filtering has to be performed always on serialized data
     * Used both in testing and as part of CORE-6269.
     */
    RTIBool _alwaysFilterOnSerialized;
    
    /* Pool buffer threshold for sample serialization
       Set with the property NDDS_DRHISTORY_MEMORYMANAGER_FASTPOOL_POOLBUFFERMAXSIZE */
    int cdrPoolBufferThreshold;

    /* CORE-7296 */
    RTIBool use42eAlignment;
    
    /* CORE-7714 */
    RTIBool generateSampleHash;

    /* Set to RTI_TRUE when the property
     * "dds.data_reader.deserialize_sample_signature" is set to 1
     */
    RTIBool deserializeSampleSignature;

    /* Topic name of the reader queue CORE-7751 */
    char *topicName;

    /* Topic name of the reader queue CORE-7751 */
    char *typeName;
};


  #define PRES_PS_READER_QUEUE_PROPERTY_DEFAULT {          \
    /* readerGuid */ \
    MIG_RTPS_GUID_UNKNOWN, \
    /* virtualReaderGuid */ \
    MIG_RTPS_GUID_UNKNOWN, \
    PRES_OCTET_GUID_ZERO, \
    /* entryCount */                           \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    32,  /* maximalSamplePerRemoteWriterCount */            \
    /* remoteWriterCount */ \
    {2, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* virtualWriterCount */ \
    {2, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* infoCount */ \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* outstandingReadCount */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    256, /* maximalSamplesPerRead: should never be unlimited */ \
    0, /* maximumQueryConditionFilters */                  \
    PRES_BEST_EFFORT_RELIABILITY_QOS_POLICY_DEFAULT,                    \
    {PRES_TOPIC_PRESENTATION_QOS,RTI_FALSE,RTI_TRUE},      \
    {RTI_NTP_TIME_MAX},                                    \
    {PRES_SHARED_OWNERSHIP_QOS},                           \
    RTI_FALSE,                                             \
    {PRES_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,     \
     PRES_INSTANCE_SCOPE_DESTINATIONORDER_QOS,             \
     {30, 0} },                                    \
    {RTI_NTP_TIME_ZERO},                                   \
    {PRES_KEEP_LAST_HISTORY_QOS, PRES_NONE_REFILTER_QOS,1},\
    PRES_READER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT,/* readerDataLifecycleQos */\
    {PRES_VOLATILE_DURABILITY_QOS,RTI_TRUE}, /* durability qos policy */\
    {PRES_NO_SERVICE_QOS}, /* service qos policy */\
    PRES_TYPE_SUPPORT_QOS_POLICY_DEFAULT, /* typeSupport */\
    RTI_FALSE, \
    PRES_BEST_EFFORT_VIRTUAL_RELIABILITY, /* virtualReliabilityKind */ \
    PRES_AVAILABILITY_QOS_POLICY_DEFAULT, /* availabilityQosPolicy */ \
    RTI_FALSE, /* filterOldSamples */ \
    0, /* requestDepth */ \
    1, /* checkpointFrequency */ \
    5, /* maximalRemoteWritersPerSample */ \
    RTI_FALSE, \
    0, /* appAckUserDataMaxLength */ \
    RTI_NTP_TIME_ZERO, /* appAckUserDataMinKeepDuration */ \
    1, /* samplesPerAppAck */ \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, /* readerCount */ \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, /* discoveryRemoteWriterCount */ \
    RTI_FALSE, /*_alwaysFilterOnSerialized*/\
    PRES_LENGTH_UNLIMITED, /*cdrPoolBufferThreshold*/\
    RTI_FALSE, /*use42eAlignment*/\
    RTI_FALSE, /*generateSampleHash*/\
    RTI_FALSE, /*deserializeSampleSignature*/\
    NULL, /* topicName */ \
    NULL /* typeName */ \
    }


  #define PRES_PS_READER_QUEUE_GET_FAILURE_INTERNAL (1)


  #define PRES_PS_READER_QUEUE_GET_FAILURE_OUT_OF_RESOURCES (2)

extern PRESDllExport RTIBool
PRESPsReaderQueue_hasOutstandingLoans(
    struct PRESPsReaderQueue *me,
    struct REDAWorker *worker);

  
    #define PRES_PS_READER_QUEUE_READ_TAKE_MAX_COUNT_UNLIMITED (-1)

extern PRESDllExport RTIBool
PRESPsReaderQueue_take(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount, int maxCount,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask,
    PRESInstanceStateMask iMask,
    int filterIndex,
    struct PRESReaderQueueIndexCondition * indexCondition,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_read(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount, int maxCount,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask,
    PRESInstanceStateMask iMask,
    int filterIndex,
    struct PRESReaderQueueIndexCondition * indexCondition,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport void
PRESPsReaderQueue_finish(
    struct PRESPsReaderQueue *me,
    void **dataArray, int dataCount,
    struct PRESLoanedSampleInfo **infoArray, int infoCount,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_takeInstance(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int filterIndex,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_readInstance(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int filterIndex,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_takeNextInstance(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount, int maxCount,
    const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask,
    PRESInstanceStateMask iMask,
    int filterIndex,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_readNextInstance(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount, int maxCount,
    const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask,
    PRESInstanceStateMask iMask,
    int filterIndex,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_takeNextSample(
    struct PRESPsReaderQueue *me, RTIBool *validSample,
    void *data, struct PRESSampleInfo *info,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_readNextSample(
    struct PRESPsReaderQueue *me, RTIBool *validSample,
    void *data, struct PRESSampleInfo *info,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport struct PRESPsReaderQueueRemoteWriterQueue *
PRESPsReaderQueue_getRemoteWriterQueue(
    struct PRESPsReaderQueue *me, int *failReason, 
    struct REDASequenceNumber * lastAppProcessedSn,
    const struct MIGRtpsGuid *guid,
    const struct MIGRtpsGuid *virtualGuid,
    const struct MIGRtpsGuid *groupVirtualGuid,
    const struct PRESLifespanQosPolicy *lifespanQos,
    const struct PRESDurabilityQosPolicy * durabilityQos,
    const struct PRESServiceQosPolicy * serviceQos,
    const struct PRESEntityNameQosPolicy * entityNameQos,
    const struct PRESPresentationQosPolicy * presentationQos,
    const struct PRESPropertyQosPolicy * propertyQos,
    RTIBool isSessionRemoteWriter);

extern PRESDllExport struct REDAInlineListUserDataNode *
PRESPsReaderQueue_getRemoteWriterQueueNode(
    struct PRESPsReaderQueue *me,
    struct PRESPsReaderQueueRemoteWriterQueue * queue);

extern PRESDllExport struct PRESPsReaderQueue *
PRESPsReaderQueueRemoteWriterQueue_getReaderQueue(
    struct PRESPsReaderQueueRemoteWriterQueue * queue);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_returnRemoteWriterQueue(
    struct PRESPsReaderQueue *me, 
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    const struct RTINtpTime* receptionTsIn,
    const struct RTINtpTime* now);

extern PRESDllExport 
RTIBool PRESPsReaderQueue_returnAllRemoteWriterQueues(
        struct PRESPsReaderQueue *me);

extern PRESDllExport struct PRESPsReaderQueueRemoteWriterQueue* 
PRESPsReaderQueue_findRemoteWriterQueue(
    const struct PRESPsReaderQueue* me,
    const struct MIGRtpsGuid* virtualGuid);

extern PRESDllExport void 
PRESPsReaderQueue_activateRemoteWriterQueue(
    struct PRESPsReaderQueue *me, 
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_inactivateRemoteWriterQueue(
    struct PRESPsReaderQueue *me, 
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    const struct RTINtpTime* receptionTsIn,
    const struct RTINtpTime* now);

struct PRESSampleInfoListener;

extern PRESDllExport void
PRESPsReaderQueue_addQueryConditionFilter(
    struct PRESPsReaderQueue *me,
    int index,
    RTI_UINT32 systemKey,
    void *handle,
    PRESContentFilterEvaluate evaluate,
    PRESContentFilterEvaluate evaluateOnSerialized,
    void *filterData,
    RTIBool isKeyOnlyFilter,    
    RTIBool isBuiltin,
    struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport void 
PRESPsReaderQueue_removeQueryConditionFilter(
    struct PRESPsReaderQueue *me, int index);

extern PRESDllExport struct PRESPsReaderQueue *
PRESPsReaderQueue_new(
    const struct PRESPsReaderQueueProperty *property,
    const struct PRESReaderQueueListener *listener,
    const struct PRESReaderQueueListenerStorage *storage,
    const struct PRESTypePlugin *typePlugin,
    PRESTypePluginEndpointData endpointData,
    struct RTIClock *clock,
    const struct PRESContentFilterQosPolicy *filterPolicy,
    const struct PRESLoanedSampleInfoListener *sampleInfoListener,
    const struct PRESOdbcDatabaseConnection * odbcDatabaseCx,
    struct PRESReaderQueueVirtualWriterList * virtualWriterList,
    struct PRESReaderQueueSecurity *security,
    void * userData);

extern PRESDllExport void
PRESPsReaderQueue_enable(struct PRESPsReaderQueue* me,
			 const struct RTINtpTime* nowIn);

extern PRESDllExport void
PRESPsReaderQueue_preDelete(struct PRESPsReaderQueue *me);

extern PRESDllExport void
PRESPsReaderQueue_delete(struct PRESPsReaderQueue *me);

extern PRESDllExport void 
PRESPsReaderQueue_setMinimumSeparation(
    struct PRESPsReaderQueue *me, 
    const struct RTINtpTime *minimumSeparation);

extern PRESDllExport void 
PRESPsReaderQueue_setReaderDataLifecyclePolicy(
    struct PRESPsReaderQueue* me, 
    const struct PRESReaderDataLifecycleQosPolicy *policy,
    const struct RTINtpTime* now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport void 
PRESPsReaderQueue_setContentFilterPolicy(
    struct PRESPsReaderQueue *me,
    const struct PRESContentFilterQosPolicy *policy);

extern PRESDllExport void 
PRESPsReaderQueue_setDeadlinePeriod(
    struct PRESPsReaderQueue *me, 
    const struct RTINtpTime *deadlinePeriod);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_checkDeadline(
    struct PRESPsReaderQueue *me, 
    struct RTINtpTime *nextDeadline, struct RTINtpTime *now);

typedef RTIBool (*PRESPsReaderQueueTransformSampleFunction)(
    void *out, const void *in, void *transformOption);

typedef enum {
    PRES_PS_READER_QUEUE_SAMPLE_KIND_DATA       = 0x00,
    PRES_PS_READER_QUEUE_SAMPLE_KIND_NO_WRITERS = 0x01
} PRESPsReaderQueueSampleKind;

extern PRESDllExport RTIBool 
PRESPsReaderQueue_addSample(
    struct PRESPsReaderQueue *me, 
    RTIBool *dataAvailable, RTIBool *sampleRejected, 
    PRESSampleRejectedStatusKind *rejectedReason, 
    PRESPsReaderQueueTransformSampleFunction transformFnc, 
    const void *data, 
    void *transformOption,
    const struct MIGRtpsGuid *remoteWriterGuidIn,
    const struct RTINtpTime *sourceTimestamp, 
    PRESPsReaderQueueSampleKind sampleKind, 
    const struct RTINtpTime *receptionTimestamp, 
    const struct RTINtpTime *now, 
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_newData(
    struct PRESPsReaderQueue *me,
    RTIBool *dataAvailable, 
    int *lostCount, 
    PRESSampleLostStatusKind *lostReason,
    int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    int *receivedInlineQosBitmap,
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    const struct REDASequenceNumber *firstRelevantRangeEndSn,
    RTIBool isMatching,
    const struct COMMENDReaderServiceData *data, 
    const struct PRESReaderServiceLocalData *localData,
    void *decodingKeyHandle,
    int strength,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESPsReaderQueue_newAnonData(
        struct PRESPsReaderQueue *me,
        RTIBool *dataAvailable,
        int *lostCount,
        PRESSampleLostStatusKind *lostReason,
        int *rejectedCount,
        PRESSampleRejectedStatusKind *rejectedReason,
        const struct COMMENDReaderServiceData *data,
        const struct RTINtpTime *timestamp,
        const struct RTINtpTime *now,
        struct PRESPsService_QueryConditionState *queryConditionState,
        struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_commitData(
    struct PRESPsReaderQueue *me,
    int *lostCount,
    PRESSampleLostStatusKind *lostReason,
    int * rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_lostData(
    struct PRESPsReaderQueue *me,
    int *lostCount,
    PRESSampleLostStatusKind *lostReason,
    int * rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    struct REDAWorker *worker);

extern PRESDllExport int 
PRESPsReaderQueue_getFreeCount(
    struct PRESPsReaderQueue *me, 
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue, 
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_pruneAndUpdate(
    struct PRESPsReaderQueue *me, 
    const struct RTINtpTime *now,
    int requiredEntryCount,
    RTIBool updateExpirationTime,
    const struct MIGRtpsGuid *remoteWriterGuid,
    PRESInstanceStateKind targetUpdateKind,
    const struct RTINtpTime *newLeaseForTargetState,
    RTIBool alwaysCalculateState,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport 
RTIBool PRESPsReaderQueue_pruneLifespanExpiredEntries(
    struct PRESPsReaderQueue *me, 
    const struct RTINtpTime *now, /* required */
    int requiredEntryCount,
    RTIBool alwaysCalculateState,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport void 
PRESPsReaderQueue_setRemoteWriterLifespan(
    struct PRESPsReaderQueue *me, 
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    const struct MIGRtpsGuid *remoteWriterGuid,
    const struct PRESLifespanQosPolicy *lifespanQos,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport void 
PRESPsReaderQueue_getRemoteWriterNextCommittalSn(
    struct PRESPsReaderQueue *me, struct REDASequenceNumber *nextCommittalSn,
    const struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue);

extern PRESDllExport void 
PRESPsReaderQueue_getStatistics(
    struct PRESPsReaderQueue *me, 
    struct PRESPsDataReaderCacheStatus *stats,
    RTIBool getCacheStatus,
    RTIBool resetChangeCounts);

extern PRESDllExport void 
PRESPsReaderQueue_setStatistics(
    struct PRESPsReaderQueue *me, 
    const struct PRESPsDataReaderCacheStatus *stats);

extern PRESDllExport struct PRESReaderQueueVirtualWriterList *
PRESPsReaderQueue_getVirtualWriterList(
    struct PRESPsReaderQueue *me);

extern PRESDllExport struct PRESReaderQueueVirtualReader *
PRESPsReaderQueue_getVirtualReader(
    struct PRESPsReaderQueue *me);

extern PRESDllExport
RTIBool PRESPsReaderQueue_acknowledgeVirtualSample(
    struct PRESPsReaderQueue * self,
    RTIBool * modified,
    struct PRESReaderQueueVirtualWriter * virtualWriter,
    const struct MIGRtpsGuid * virtualWriterGuid,
    const struct REDASequenceNumber * sn,
    const struct REDABuffer * userData,
    RTIBool persistNow);

extern PRESDllExport
RTIBool PRESPsReaderQueue_acknowledgeVirtualSamples(
    struct PRESPsReaderQueue * self,
    struct PRESReaderQueueVirtualWriter * virtualWriter,
    const struct MIGRtpsGuid * virtualWriterGuid,
    const struct REDASequenceNumber * firstSn,
    const struct REDASequenceNumber * lastSn,
    const struct REDABuffer * userData);

extern PRESDllExport
RTIBool PRESPsReaderQueue_acknowledgeAllReadSamples(
    struct PRESPsReaderQueue * self,
    const struct REDABuffer * userData);

extern PRESDllExport
RTIBool PRESPsReaderQueue_confirmAcknowledgement(
    struct PRESPsReaderQueue * self,
    const struct MIGRtpsGuid * remoteWriterGuid,
    struct MIGRtpsAppAck * appAckConf,
    const struct RTINtpTime * now);

extern PRESDllExport
RTIBool PRESPsReaderQueueRemoteWriterQueue_getAcknowledgementState(
    struct PRESPsReaderQueueRemoteWriterQueue * self,
    struct MIGRtpsAppAck * appAckOut);

extern PRESDllExport
RTIBool PRESPsReaderQueue_commitVirtualWriter(
    struct PRESPsReaderQueue * me,
    int *lostCount,
    PRESSampleLostStatusKind *lostReason,
    int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct PRESReaderQueueVirtualWriter * virtualWriter,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState);

extern PRESDllExport
RTIBool PRESPsReaderQueue_newWriterInfo(
    struct PRESPsReaderQueue * me,
    int *lostCount, 
    PRESSampleLostStatusKind *lostReason,
    int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    RTIBool * newVirtualWriter,
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    const struct RTINtpTime *timestamp,
    const struct RTINtpTime *now,
    RTI_UINT32 *readConditionState,
    struct PRESPsService_QueryConditionState *queryConditionState,
    const struct MIGRtpsWriterInfoList *writerInfoList,
    struct REDAWorker *worker);

extern PRESDllExport
struct REDAInlineList *
    PRESPsReaderQueue_getCommittalInfoList(
        struct PRESPsReaderQueue * me);

extern PRESDllExport
struct PRESReaderQueueCommittalInfo *
    PRESPsReaderQueue_getCommittalInfo(
        struct PRESPsReaderQueue * me);

extern PRESDllExport
RTIBool PRESPsReaderQueue_createIndex(
   struct PRESPsReaderQueue * self,
   const char * indexName,
   REDAOrderedDataTypeCompareFunction userCompareFnc,
   struct REDAExclusiveArea* conditionEa,
   int indexConditionUserObjectSize,
   int indexConditionUserObjectAlignment);

extern PRESDllExport
RTIBool PRESPsReaderQueue_deleteIndex(
   struct PRESPsReaderQueue * self,
   const char * indexName);

extern PRESDllExport
struct PRESReaderQueueIndexCondition * PRESPsReaderQueue_createIndexCondition(
        struct PRESPsReaderQueue * self,
        struct PRESPsReader *owner,
        const char * indexName,
        struct PRESLoanedSampleInfo * presSampleInfo,
        PRESSampleStateMask sMask,
        PRESViewStateMask vMask,
        PRESInstanceStateMask iMask);

extern PRESDllExport
RTIBool PRESPsReaderQueue_containsIndexCondition(
        struct PRESPsReaderQueue * self,
        struct PRESPsReader *owner,
        struct PRESReaderQueueIndexCondition * presCondition);

extern PRESDllExport
RTIBool PRESPsReaderQueue_deleteIndexCondition(
        struct PRESPsReaderQueue * self,
        struct PRESPsReader *owner,
        struct PRESReaderQueueIndexCondition * presCondition);

extern PRESDllExport
void PRESPsReaderQueue_getIndexConditionLists(
   struct PRESPsReaderQueue * self,
   struct REDAInlineList ** outActiveList,
   struct REDAInlineList **outInactivatedList);

extern PRESDllExport 
RTI_UINT32 PRESPsReaderQueue_getReadConditionState(
        struct PRESPsReaderQueue * self);

struct PRESPsService_QueryConditionState;

extern PRESDllExport 
void PRESPsReaderQueue_getQueryConditionState(
    struct PRESPsReaderQueue * self,
    struct PRESPsService_QueryConditionState *queryConditionState);


#ifdef __cplusplus
    }	/* extern "C" */
#endif


  #include "pres/pres_psReaderQueue_impl.h"

#endif /* pres_psReaderQueue_h */
