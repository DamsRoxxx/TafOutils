#ifndef OMG_DDS_TOPIC_TOPIC_TRAITS_HPP_
#define OMG_DDS_TOPIC_TOPIC_TRAITS_HPP_

/* Copyright 2010, Object Management Group, Inc.
 * Copyright 2010, PrismTech, Corp.
 * Copyright 2010, Real-Time Innovations, Inc.
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <string>

// IMPORTANT: macros.hpp must be the first RTI header included in every header
// file so that symbols are exported correctly on Windows
#include <dds/core/macros.hpp>

#include <dds/core/types.hpp>

//==============================================================================

/**
 * @defgroup DDSTopicTraitsModule Topic traits and data-type support
 * @ingroup DDSTopicModule
 * @brief Traits and operations associated to topic-types.
 */

namespace dds { namespace topic {

/**
 * @ingroup DDSTopicTraitsModule
 * @brief Trait that indicates if a type is suitable to be the type of a
 * dds::topic::Topic
 *
 * When a type T meets this requirement the is_topic_type<T> inherits from
 * \p dds::core::true_type and defines a member constant \p is_topic_type<T>::value
 * that is true. For all other types it inherits from \p dds::core::false_type
 * and defines \p value to false.
 *
 * Types \ref DDSTypesModule "generated by rtiddsgen" (except for those annotated with \p \@top-level \p false),
 * dds::core::xtypes::DynamicData and the
 * \ref DDSBuiltInTypesModule "Builtin types" all meet this requirement.
 */
template <typename T>
struct is_topic_type : public dds::core::false_type {};

/**
 * @ingroup DDSTopicTraitsModule
 * @brief Provides convenience operations for a topic-type.
 */
template <typename T>
struct topic_type_support {};

/**
 * @ingroup DDSTopicTraitsModule
 * @brief Provides the name of a topic-type.
 *
 * For example:
 * \code
 * std::cout << dds::topic::topic_type_name<Foo>::value() << std::endl;
 * std::cout << dds::topic::topic_type_name<dds::core::StringTopicType>::value() << std::endl;
 * // output:
 * // Foo
 * // DDS::String
 * \endcode
 *
 * Note that \p topic_type_name<dds::core::xtypes::DynamicData>::value() is undefined, because
 * DynamicData is used to dynamically represent any type so its actual topic-type
 * is unknown at compilation time.
 */
template <typename T>
struct topic_type_name {};

} }

#define REGISTER_TOPIC_TYPE(TOPIC_TYPE)                                       \
    namespace dds { namespace topic {                                         \
        template<>                                                            \
        struct is_topic_type<TOPIC_TYPE> : public ::dds::core::true_type {};  \
    } }

#endif /* OMG_DDS_TOPIC_TOPIC_TRAITS_HPP_ */
