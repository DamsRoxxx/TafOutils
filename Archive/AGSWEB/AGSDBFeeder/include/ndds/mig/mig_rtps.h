/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)mig_rtps.h    generated by: makeheader    Fri Feb 16 13:51:36 2018
 *
 *		built from:	rtps.ifc
 */

#ifndef mig_rtps_h
#define mig_rtps_h


  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef reda_epoch_h
    #include "reda/reda_epoch.h"
  #endif
  #ifndef reda_inlineList_h
    #include "reda/reda_inlineList.h"
  #endif
  #ifndef reda_sequenceNumber_h
    #include "reda/reda_sequenceNumber.h"
  #endif
  #ifndef cdr_type_h
    #include "cdr/cdr_type.h"
  #endif
  #ifndef transport_common_h
    #include "transport/transport_common.h"
  #endif
  #ifndef mig_dll_h
    #include "mig/mig_dll.h"
  #endif
  #ifndef cdr_stream_h
    #include "cdr/cdr_stream.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


  #define MIG_RTPS_HEADER_SIZE (20) /*RTPS.2.0*/


  #define MIG_RTPS_HEADER_MAGIC_WORD_SIZE (4)


  #define MIG_RTPS_SUBMESSAGE_HEADER_SIZE (4)


  #define MIG_RTPS_SUBMESSAGE_OCTETS_TO_NEXT_HEADER_MAX (0xFFFF)


  #define MIG_RTPS_SUBMESSAGE_SIZE_MIN (8)


  #define MIG_RTPS_SUBMESSAGE_HEADER_SIZE_MAX (64)


  #define MIG_RTPS_SUBMESSAGE_ALIGNMENT (4)


  #define MIG_RTPS_SUBMESSAGE_ID_INVALID_MASK (0x40)


  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_SIZE_MIN (8)


  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_SIZE_AVG MIG_RTPS_DATA_BATCH_SAMPLE_INFO_SIZE_MIN


  #define MIG_RTPS_CRC_SUBMESSAGE_SIZE (8)


  /* Inline param */
  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_INLINE_PARAM_SIZE_MAX_WITHOUT_KEYHASH (128)
  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_INLINE_PARAM_SIZE_MAX (148)
  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_INLINE_PARAM_UNKEYED_SIZE_MAX (128)

  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_SIZE_MAX (168)
  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_SIZE_MAX_WITHOUT_INLINE_PARAM (20)


  #define MIG_RTPS_IP_ADDRESS_INVALID (0)


  #define MIG_RTPS_PORT_INVALID (0)


  #define MIG_RTPS_TIMESTAMP_SEC_DEFAULT (0)


  #define MIG_RTPS_TIMESTAMP_FRAC_DEFAULT (0)


  #define MIG_RTPS_PATHNAME_LEN_MAX (255)

typedef RTI_UINT32 MIGRtpsHostId;


  #define MIG_RTPS_HOST_ID_UNKNOWN (0x00000000)


  #define MIG_RTPS_HOST_ID_ZERO (0x00000000)


  #define MIG_RTPS_HOST_ID_AUTO (0x00000000)

extern MIGDllExport
RTIBool MIGRtpsHostId_serialize(
    void *endpointData, 
    const MIGRtpsHostId *hostId,
    struct RTICdrStream *stream,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtpsHostId_deserialize(
    void *endpointData,
    const MIGRtpsHostId *hostId,
    struct RTICdrStream *stream,
    void *endpointPluginQos);

extern MIGDllExport
unsigned int MIGRtpsHostId_getMaxSizeSerialized(
    unsigned int size);

extern MIGDllExport
void MIGRtpsHostId_print(
    const MIGRtpsHostId *hostId,
    const char *desc,
    unsigned int indent);

typedef RTI_UINT32 MIGRtpsAppId;


  #define MIG_RTPS_APP_ID_UNKNOWN (0x00000000)

  #define MIG_RTPS_APP_ID_AUTO (0x00000000)

  #define MIG_RTPS_APP_ID_ZERO (0x00000000)

  #define MIGRtpsAppId_serialize MIGRtpsHostId_serialize

  #define MIGRtpsAppId_deserialize MIGRtpsHostId_deserialize
    
  #define MIGRtpsAppId_getMaxSizeSerialized MIGRtpsHostId_getMaxSizeSerialized

  #define MIGRtpsAppId_print MIGRtpsHostId_print

typedef RTI_UINT32 MIGRtpsInstanceId; /*RTPS.2.0*/


  #define MIG_RTPS_INSTANCE_ID_UNKNOWN (0x00000000) /*RTPS.2.0*/

  #define MIG_RTPS_INSTANCE_ID_AUTO (0x00000000) /*RTPS.2.0*/

  #define MIG_RTPS_INSTANCE_ID_ZERO (0x00000000) /*RTPS.2.0*/

  #define MIGRtpsInstanceId_serialize MIGRtpsHostId_serialize

  #define MIGRtpsInstanceId_deserialize MIGRtpsHostId_deserialize
    
  #define MIGRtpsInstanceId_getMaxSizeSerialized MIGRtpsHostId_getMaxSizeSerialized

  #define MIGRtpsInstanceId_print MIGRtpsHostId_print

typedef RTI_UINT32 MIGRtpsObjectId;


  #define MIG_RTPS_OBJECT_ID_UNKNOWN (0x00000000)

  #define MIG_RTPS_OBJECT_ID_ZERO (0x00000000)

  #define MIG_RTPS_OBJECT_ID_AUTO (0x00000000)

  #define MIG_RTPS_OBJECT_ID_PARTICIPANT (0x000001C1)

  #define MIG_RTPS_OBJECT_ID_SPDP_PARTICIPANT_WRITER (0x000100C2)
  #define MIG_RTPS_OBJECT_ID_SPDP_PARTICIPANT_READER (0x000100C7)

  #define MIG_RTPS_OBJECT_ID_P2P_BUILTIN_PARTICIPANT_MESSAGE_WRITER (0x000200C2)
  #define MIG_RTPS_OBJECT_ID_P2P_BUILTIN_PARTICIPANT_MESSAGE_READER (0x000200C7)

  /* SERVICE REQUEST object IDs are in the entity kind vendor-builtin range */
  #define MIG_RTPS_OBJECT_ID_SERVICE_REQUEST_WRITER (0x00020082)
  #define MIG_RTPS_OBJECT_ID_SERVICE_REQUEST_READER (0x00020087)

  /* LOCATOR PING object IDs are in the entity kind vendor-builtin range */
  #define MIG_RTPS_OBJECT_ID_LOCATOR_PING_MESSAGE_WRITER (0x00020182)
  #define MIG_RTPS_OBJECT_ID_LOCATOR_PING_MESSAGE_READER (0x00020187)

  /* DDS Security: stateless entities */
  #define MIG_RTPS_OBJECT_ID_STATELESS_MESSAGE_WRITER (0x000201C3)
  #define MIG_RTPS_OBJECT_ID_STATELESS_MESSAGE_READER (0x000201C4)

  /* DDS Security: secure participant message entities */
  #define MIG_RTPS_OBJECT_ID_SECURE_P2P_BUILTIN_PARTICIPANT_MESSAGE_WRITER (0xFF0200C2)
  #define MIG_RTPS_OBJECT_ID_SECURE_P2P_BUILTIN_PARTICIPANT_MESSAGE_READER (0xFF0200C7)

  /* DDS Security: secure volatile entities */
  #define MIG_RTPS_OBJECT_ID_SECURE_VOLATILE_MESSAGE_WRITER (0xFF0202C3)
  #define MIG_RTPS_OBJECT_ID_SECURE_VOLATILE_MESSAGE_READER (0xFF0202C4)

  /* RTI Secure DDS: secure service request */
  #define MIG_RTPS_OBJECT_ID_SECURE_SERVICE_REQUEST_WRITER (0xFF020082)
  #define MIG_RTPS_OBJECT_ID_SECURE_SERVICE_REQUEST_READER (0xFF020087)


  #define MIGRtpsObjectId_serialize MIGRtpsHostId_serialize

  #define MIGRtpsObjectId_deserialize MIGRtpsHostId_deserialize
    
  #define MIGRtpsObjectId_getMaxSizeSerialized MIGRtpsHostId_getMaxSizeSerialized

  #define MIGRtpsObjectId_print MIGRtpsHostId_print

struct MIGRtpsGuidPrefix{
    /*e */
    MIGRtpsHostId   hostId;
    /*e */
    MIGRtpsAppId    appId;
    /*e */
    MIGRtpsInstanceId  instanceId; 

};

typedef struct MIGRtpsGuidPrefix MIGRtpsParticipantId;


  #define MIG_RTPS_GUID_PREFIX_UNKNOWN { \
    MIG_RTPS_HOST_ID_UNKNOWN,   \
    MIG_RTPS_APP_ID_UNKNOWN,    \
    MIG_RTPS_INSTANCE_ID_UNKNOWN} 


  #define MIG_RTPS_GUID_PREFIX_ZERO { \
    MIG_RTPS_HOST_ID_ZERO,   \
    MIG_RTPS_APP_ID_ZERO,    \
    MIG_RTPS_INSTANCE_ID_ZERO} 


  #define MIG_RTPS_GUID_PREFIX_AUTO { \
    MIG_RTPS_HOST_ID_AUTO,   \
    MIG_RTPS_APP_ID_AUTO,    \
    MIG_RTPS_INSTANCE_ID_AUTO} 


  #define MIG_RTPS_GUID_PREFIX_SIZE (12) 

struct MIGRtpsGuid {
    /*e */
    struct MIGRtpsGuidPrefix prefix;
    /*e */
    MIGRtpsObjectId objectId;
};


  #define MIG_RTPS_GUID_AUTO {   \
    MIG_RTPS_GUID_PREFIX_AUTO,   \
    MIG_RTPS_OBJECT_ID_AUTO}


  #define MIG_RTPS_GUID_UNKNOWN {   \
    MIG_RTPS_GUID_PREFIX_UNKNOWN,   \
    MIG_RTPS_OBJECT_ID_UNKNOWN}


  #define MIG_RTPS_GUID_ZERO {   \
    MIG_RTPS_GUID_PREFIX_ZERO,   \
    MIG_RTPS_OBJECT_ID_ZERO}

typedef RTI_UINT16 MIGRtpsDataFlags;


    #define MIG_RTPS_DATA_FLAGS_NONE (0)


    #define MIG_RTPS_DATA_INLINE_QOS_OFFSET_DEFAULT (16)
    #define MIG_RTPS_KEY_HASH_MAX_LENGTH 16
    /* CORE-6181: maximum string length = length representation (4) +
     * string (2 characters per byte) + null character (1) */
    #define MIG_RTPS_KEY_HASH_STRING_MAX_LENGTH (4 + \
      (2 * MIG_RTPS_KEY_HASH_MAX_LENGTH) + 1)

struct MIGRtpsKeyHash {
    RTICdrOctet value[MIG_RTPS_KEY_HASH_MAX_LENGTH];

    RTI_UINT32 length;
};


#define MIG_RTPS_KEY_HASH_NIL {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}

#define MIG_RTPS_KEY_HASH_DEFAULT {     \
MIG_RTPS_KEY_HASH_NIL,  /* value */\
MIG_RTPS_KEY_HASH_MAX_LENGTH/* length */\
}

struct REDABuffer;

extern MIGDllExport const char *
MIGRtpsGuid_toString(const void *guid, struct REDABuffer *str);

extern MIGDllExport void
MIGRtpsGuid_toBase32(const struct MIGRtpsGuid *guid,char * str);

extern MIGDllExport 
void MIGRtpsGuid_htoncopy(struct MIGRtpsGuid *me,
                          const struct MIGRtpsGuid *src);

extern MIGDllExport 
void MIGRtpsGuid_ntohcopy(struct MIGRtpsGuid *me,
                          const struct MIGRtpsGuid *src);


  #define MIG_RTPS_GUID_STRING_LENGTH (44)

extern MIGDllExport void MIGRtpsGuid_copy(struct MIGRtpsGuid *me,
					  struct MIGRtpsGuid *src);

extern MIGDllExport
RTIBool MIGRtpsGuid_equals(struct MIGRtpsGuid *a, struct MIGRtpsGuid *b);

extern MIGDllExport
RTIBool MIGRtpsGuid_isUnknown(struct MIGRtpsGuid *me);

extern MIGDllExport
RTIBool MIGRtpsGuid_isAuto(struct MIGRtpsGuid *me);

extern MIGDllExport 
RTIBool MIGRtpsGuid_serialize(
    void *endpointData, 
    const struct MIGRtpsGuid *guid,
    struct RTICdrStream *stream,
    RTIBool serializeEncapsulation,
    RTIEncapsulationId encapsulationId,
    RTIBool serializeSample,
    void *endpointPluginQos);

extern MIGDllExport 
RTIBool MIGRtpsGuid_serializeNativeEndianness(
    void *endpointData, 
    const struct MIGRtpsGuid *guid,
    struct RTICdrStream *stream,
    RTIBool serializeEncapsulation, 
    RTIEncapsulationId encapsulationId,
    RTIBool serializeSample, 
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtpsHost_deserialize(
    void *endpointData,
    const MIGRtpsHostId *hostId,
    struct RTICdrStream *stream,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtpsGuid_deserialize(
    void *endpointData,
    struct MIGRtpsGuid *guid,
    struct RTICdrStream *stream,
    RTIBool deserializeEncapsulation,
    RTIBool deserializeSample,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtpsGuid_skip(
    void *endpointData,
    struct RTICdrStream *stream,
    RTIBool skipEncapsulation,
    RTIBool skipSample,
    void *endpointPluginQos);

extern MIGDllExport 
unsigned int MIGRtpsGuid_getMaxSizeSerialized(
    unsigned int size);

extern MIGDllExport void
MIGRtpsGuid_fromKeyHash(
    struct MIGRtpsGuid *guid,
    const struct MIGRtpsKeyHash *keyHash);

extern MIGDllExport
int MIGRtpsGuid_compare(
    const struct MIGRtpsGuid *left,
    const struct MIGRtpsGuid *right);

extern MIGDllExport 
void MIGRtpsGuid_print(
    const struct MIGRtpsGuid *guid, 
    const char *desc, unsigned int indent);

extern MIGDllExport int
MIGRtpsKeyHash_compare(
    const struct MIGRtpsKeyHash *left,
    const struct MIGRtpsKeyHash *right);

extern MIGDllExport RTIBool
MIGRtpsKeyHash_serialize(
    void *endpointData,
    struct MIGRtpsKeyHash *keyHash,
    struct RTICdrStream *stream,
    void *endpointPluginQos);

extern MIGDllExport void
MIGRtpsKeyHash_copy(
    struct MIGRtpsKeyHash *dest,
    const struct MIGRtpsKeyHash *src);

extern MIGDllExport void
MIGRtpsKeyHash_set(
    struct MIGRtpsKeyHash *keyHash,
    char *value);

extern MIGDllExport void
MIGRtpsKeyHash_print(
    const struct MIGRtpsKeyHash *keyHash,
    const char *desc);

extern MIGDllExport int
MIGRtpsKeyHash_equals(
    const struct MIGRtpsKeyHash *left,
    const struct MIGRtpsKeyHash *rigth);

extern MIGDllExport RTIBool
MIGRtpsKeyHash_deserialize(
    void *endpointData,
    struct MIGRtpsKeyHash *keyHash,
    struct RTICdrStream *stream,
    void *endpointPluginQos);

extern MIGDllExport const char *
MIGRtpsKeyHash_toString(
    const struct MIGRtpsKeyHash *keyHash, 
    struct REDABuffer *buffer);

extern MIGDllExport void
MIGRtpsKeyHash_fromGuid(
    struct MIGRtpsKeyHash *keyHash,
    const struct MIGRtpsGuid *guid);

extern MIGDllExport void
MIGRtpsKeyHash_setDefault(
    struct MIGRtpsKeyHash *keyHash);

extern MIGDllExport 
void MIGRtpsKeyHash_htoncopy(struct MIGRtpsKeyHash *me,
                             const struct MIGRtpsKeyHash *src);

extern MIGDllExport 
void MIGRtpsKeyHash_ntohcopy(struct MIGRtpsKeyHash *me,
                             const struct MIGRtpsKeyHash *src);

typedef RTI_UINT16 MIGRtpsProtocolVersion;


  #define MIG_RTPS_PROTOCOL_VERSION_SIZE (2)


  #define MIG_RTPS_PROTOCOL_VERSION_1_0 (0x0100)


  #define MIG_RTPS_PROTOCOL_VERSION_1_1 (0x0101)


  #define MIG_RTPS_PROTOCOL_VERSION_1_2 (0x0102)


  #define MIG_RTPS_PROTOCOL_VERSION_2_0 (0x0200) /*RTPS.2.0*/


  #define MIG_RTPS_PROTOCOL_VERSION_2_1 (0x0201)


  #define MIG_RTPS_PROTOCOL_VERSION    MIG_RTPS_PROTOCOL_VERSION_2_1 /*RTPS.2.1*/


  #define MIG_RTPS_PROTOCOL_VERSION_MAJOR (0x02) /* RTPS.2.1 */


  #define MIG_RTPS_PROTOCOL_VERSION_MINOR (0x01) /* RTPS.2.1 */

typedef RTI_UINT16 MIGRtpsVendorId;


  #define MIG_RTPS_VENDOR_ID_SIZE (2)


  #define MIG_RTPS_VENDOR_ID_MAJOR (0x01)


  #define MIG_RTPS_VENDOR_ID_MINOR (0x01)


  #define MIG_RTPS_VENDOR_ID_RTI (0x0101)


  #define MIG_RTPS_VENDOR_ID_UNKNOWN (0x0000)


#define MIG_RTPS_BUILTIN_ENDPOINT_PARTICIPANT_WRITER            0x00000001 << 0
#define MIG_RTPS_BUILTIN_ENDPOINT_PARTICIPANT_READER            0x00000001 << 1
#define MIG_RTPS_BUILTIN_ENDPOINT_PUBLICATION_WRITER            0x00000001 << 2
#define MIG_RTPS_BUILTIN_ENDPOINT_PUBLICATION_READER            0x00000001 << 3
#define MIG_RTPS_BUILTIN_ENDPOINT_SUBSCRIPTION_WRITER           0x00000001 << 4
#define MIG_RTPS_BUILTIN_ENDPOINT_SUBSCRIPTION_READER           0x00000001 << 5
#define MIG_RTPS_BUILTIN_ENDPOINT_PARTICIPANT_PROXY_WRITER      0x00000001 << 6
#define MIG_RTPS_BUILTIN_ENDPOINT_PARTICIPANT_PROXY_READER      0x00000001 << 7
#define MIG_RTPS_BUILTIN_ENDPOINT_PARTICIPANT_STATE_WRITER      0x00000001 << 8
#define MIG_RTPS_BUILTIN_ENDPOINT_PARTICIPANT_STATE_READER      0x00000001 << 9
#define MIG_RTPS_BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_WRITER    0x00000001 << 10
#define MIG_RTPS_BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_READER    0x00000001 << 11
/* DDS Security related endpoints */
#define MIG_RTPS_BUILTIN_ENDPOINT_SECURE_PUBLICATION_WRITER     0x00000001 << 16
#define MIG_RTPS_BUILTIN_ENDPOINT_SECURE_PUBLICATION_READER     0x00000001 << 17
#define MIG_RTPS_BUILTIN_ENDPOINT_SECURE_SUBSCRIPTION_WRITER    0x00000001 << 18
#define MIG_RTPS_BUILTIN_ENDPOINT_SECURE_SUBSCRIPTION_READER    0x00000001 << 19
#define MIG_RTPS_BUILTIN_ENDPOINT_SECURE_PARTICIPANT_MESSAGE_WRITER  0x00000001 << 20
#define MIG_RTPS_BUILTIN_ENDPOINT_SECURE_PARTICIPANT_MESSAGE_READER  0x00000001 << 21
#define MIG_RTPS_BUILTIN_ENDPOINT_PARTICIPANT_STATELESS_MESSAGE_WRITER  0x00000001 << 22
#define MIG_RTPS_BUILTIN_ENDPOINT_PARTICIPANT_STATELESS_MESSAGE_READER  0x00000001 << 23
#define MIG_RTPS_BUILTIN_ENDPOINT_SECURE_PARTICIPANT_VOLATILE_MESSAGE_WRITER  0x00000001 << 24
#define MIG_RTPS_BUILTIN_ENDPOINT_SECURE_PARTICIPANT_VOLATILE_MESSAGE_READER  0x00000001 << 25


#define MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_SERVICE_REQUEST_WRITER  0x00000001 << 0
#define MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_SERVICE_REQUEST_READER  0x00000001 << 1
#define MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_LOCATOR_PING_WRITER     0x00000001 << 2
#define MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_LOCATOR_PING_READER     0x00000001 << 3
#define MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_SECURE_SERVICE_REQUEST_WRITER  0x00000001 << 4
#define MIG_RTPS_VENDOR_BUILTIN_ENDPOINT_SECURE_SERVICE_REQUEST_READER  0x00000001 << 5

typedef enum {
    MIG_HEARTBEAT_KIND_DATA = 1,
    MIG_HEARTBEAT_KIND_BATCH = 2,
    MIG_HEARTBEAT_KIND_SESSION = 3
} MIGHeartbeatKind;

typedef enum {
    MIG_ACK_KIND_DATA = 1,
    MIG_ACK_KIND_BATCH = 2,
    MIG_ACK_KIND_SESSION = 3
} MIGAckKind;

typedef enum {
    /*e padding */
    MIG_RTPS_PAD        = 0x01,
    /*e CST variable */
    MIG_RTPS_VAR        = 0x02,
    /*e P/S issue */
    MIG_RTPS_ISSUE      = 0x03,
    /*e acknowledgement */
    MIG_RTPS_ACK        = 0x06,
    /*e heartbeat */
    MIG_RTPS_HEARTBEAT  = 0x07,
    /*e gap */
    MIG_RTPS_GAP        = 0x08,
    /*e timestamp */
    MIG_RTPS_INFO_TS    = 0x09,
    /*e message source */
    MIG_RTPS_INFO_SRC   = 0x0c,
    /*e how to reply to sender using IPv4*/
    MIG_RTPS_INFO_REPLY_IP4 = 0x0d, /*RTPS.2.0*/
    /*e destination of the message; intended recipient */
    MIG_RTPS_INFO_DST    = 0x0e,
    /*e how to reply to sender using IPv6 */
    MIG_RTPS_INFO_REPLY   = 0x0f, /*RTPS.2.0*/
    /*e identifier for the data fragments submessage */
    MIG_RTPS_DATA_FRAG       = 0x10, /*RTPS.2.0*/
    /*e identifier for the no key data fragments submessage */
    MIG_RTPS_NOKEY_DATA_FRAG = 0x11, /*RTPS.2.0*/
    /*e identifier for the data fragments nack submessage */
    MIG_RTPS_NACK_FRAG       = 0x12, /*RTPS.2.0*/
    /*e identifier for the data fragments heartbeat submessage */
    MIG_RTPS_HEARTBEAT_FRAG  = 0x13, /*RTPS.2.0*/
    /*e data for locator-filter session */
    MIG_RTPS_DATA_SESSION = 0x14, 
    /*e data */
    MIG_RTPS_DATA = 0x15, /* RTPS 2.1 */
    /*e data */
    MIG_RTPS_DATA_FRAG_X = 0x16, /* RTPS 2.1 */
    /*e batch ACKNACK */
    MIG_RTPS_ACK_BATCH = 0x17, /* RTPS 2.1 */
    /*e identifier for the data batch submessage */
    MIG_RTPS_DATA_BATCH = 0x18, /*RTPS.2.1*/
    /*e batch heartbeat */
    MIG_RTPS_HEARTBEAT_BATCH = 0x19, /*RTPS.2.1*/
    /*e session ACKNACK */
    MIG_RTPS_ACK_SESSION = 0x1a,
    /*e session Heartbeat */
    MIG_RTPS_HEARTBEAT_SESSION = 0x1b,
    /*e app-level ack */
    MIG_RTPS_APP_ACK = 0x1c,
    /*e app-level ack confirmation */
    MIG_RTPS_APP_ACK_CONF = 0x1d,
    /*e virtual heartbeat */
    MIG_RTPS_HEARTBEAT_VIRTUAL = 0x1e,
    /*e secure body submessage */
    MIG_RTPS_SECURE_BODY = 0x30,
    /*e secure prefix submessage */
    MIG_RTPS_SECURE_PREFIX = 0x31,
    /*e secure postfix submessage */
    MIG_RTPS_SECURE_POSTFIX = 0x32,
    /*e secure RTPS prefix submessage */
    MIG_RTPS_SECURE_RTPS_PREFIX = 0x33,
    /*e secure RTPS postfix submessage */
    MIG_RTPS_SECURE_RTPS_POSTFIX = 0x34,
     /* As per RTPS spec section 9.4.5.1.1, vendor specific submessages should
     * use Ids from 0x80 */
    /*e CRC32 */
    MIG_RTPS_CRC32 = 0x80        
} MIGRtpsSubmessageId;



  #define MIG_RTPS_SUBMESSAGE_ID_COUNT_MAX (32)


  #define MIG_RTPS_SUBMESSAGE_ID_DROP_INVALID (0x40)


typedef RTI_UINT32 MIGRtpsStatusInfo;


  #define MIG_RTPS_NO_STATUS_INFO (0x00000000)


  #define MIG_RTPS_D_STATUS_INFO (0x00000001)


  #define MIG_RTPS_U_STATUS_INFO (0x00000002)

extern MIGDllExport RTIBool
MIGRtpsStatusInfo_serialize(
    void *endpointData,
    MIGRtpsStatusInfo * statusInfo,
    struct RTICdrStream *stream,
    void *endpointPluginQos);

extern MIGDllExport RTIBool
MIGRtpsStatusInfo_deserialize(
    void *endpointData,
    MIGRtpsStatusInfo * statusInfo,
    struct RTICdrStream *stream,
    void *endpointPluginQos);

typedef char MIGRtpsSubmessageFlag;


  #define MIG_RTPS_NO_FLAG (0x00)


  #define MIG_RTPS_ENDIAN_FLAG (0x01)


  #define MIG_RTPS_INFO_REPLY_M_FLAG (0x02)


  #define MIG_RTPS_INFO_TS_I_FLAG (0x02)


  #define MIG_RTPS_ACK_F_FLAG (0x02)


  #define MIG_RTPS_ACK_N_FLAG (0x04)


  #define MIG_RTPS_HEARTBEAT_F_FLAG (0x02)


  #define MIG_RTPS_HEARTBEAT_BATCH_F_FLAG MIG_RTPS_HEARTBEAT_F_FLAG


  #define MIG_RTPS_HEARTBEAT_L_FLAG (0x04)


  #define MIG_RTPS_HEARTBEAT_BATCH_L_FLAG MIG_RTPS_HEARTBEAT_L_FLAG


  #define MIG_RTPS_HEARTBEAT_VIRTUAL_V_FLAG (0x02)


  #define MIG_RTPS_HEARTBEAT_VIRTUAL_W_FLAG (0x04)


  #define MIG_RTPS_HEARTBEAT_VIRTUAL_N_FLAG (0x08)


  #define MIG_RTPS_ISSUE_Q_FLAG (0x02)


  #define MIG_RTPS_ISSUE_D_FLAG (0x04)


  #define MIG_RTPS_DATA_Q_FLAG (0x02) 


  #define MIG_RTPS_DATA_D_FLAG (0x04) 


  #define MIG_RTPS_DATA_K_FLAG (0x08) 


   #define MIG_RTPS_VAR_H_FLAG (0x08)


   #define MIG_RTPS_VAR_I_FLAG (0x10)


  #define MIG_RTPS_DATA_FRAG_H_FLAG (0x04)


  #define MIG_RTPS_DATA_FRAG_K_FLAG (0x04)


  #define MIG_RTPS_DATA_BATCH_Q_FLAG (0x02) 


  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_T_FLAG (0x01)


  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_Q_FLAG (0x02)


  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_O_FLAG (0x04)


  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_D_FLAG (0x08)


  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_I_FLAG (0x10)


  #define MIG_RTPS_DATA_BATCH_SAMPLE_INFO_K_FLAG (0x20)


  #define MIG_RTPS_APP_ACK_I_FLAG (0x01)


  #define MIG_RTPS_SUBMESSAGE_SECURITY_FLAG_MULTI_SUBMESSAGE (0x02)

typedef RTI_UINT32 MIGRtpsObjectKey;


  #define MIG_RTPS_OBJECT_KEY_UNKNOWN (0)

typedef enum {
    MIG_RTPS_OBJECT_NORMAL_USER_UNKNOWN        = 0x00,
    MIG_RTPS_OBJECT_NORMAL_USER_APPLICATION    = 0x01,
    /*e Use this suffix for writers of data with a key. */
    MIG_RTPS_OBJECT_NORMAL_USER_CST_WRITER     = 0x02,
    /*e Use this suffix for writers of data with no key. */
    MIG_RTPS_OBJECT_NORMAL_USER_PUBLICATION    = 0x03,
    /*e Use this suffix for readers of data with no key. */
    MIG_RTPS_OBJECT_NORMAL_USER_SUBSCRIPTION   = 0x04,
    /*e Use this suffix for readers of data with a key. */
    MIG_RTPS_OBJECT_NORMAL_USER_CST_READER     = 0x07,
    MIG_RTPS_OBJECT_NORMAL_USER_WRITER_GROUP = 0x08,
    MIG_RTPS_OBJECT_NORMAL_USER_READER_GROUP = 0x09,
    MIG_RTPS_OBJECT_NORMAL_USER_TOPIC          = 0x0a,

    MIG_RTPS_OBJECT_NORMAL_USER_VIRTUAL_SUBSCRIPTION = 0x3C,
    MIG_RTPS_OBJECT_NORMAL_USER_VIRTUAL_CST_READER   = 0x3D,
    MIG_RTPS_OBJECT_NORMAL_USER_VIRTUAL_READER_GROUP = 0x3e,
    MIG_RTPS_OBJECT_NORMAL_USER_VIRTUAL_TOPIC        = 0x3f,

    MIG_RTPS_OBJECT_RESERVED_USER_UNKNOWN      = 0x40,
    MIG_RTPS_OBJECT_RESERVED_USER_APPLICATION  = 0x41,
    MIG_RTPS_OBJECT_RESERVED_USER_CST_WRITER   = 0x42,
    MIG_RTPS_OBJECT_RESERVED_USER_PUBLICATION  = 0x43,
    MIG_RTPS_OBJECT_RESERVED_USER_SUBSCRIPTION = 0x44,
    MIG_RTPS_OBJECT_RESERVED_USER_CST_READER   = 0x47,
    MIG_RTPS_OBJECT_RESERVED_USER_WRITER_GROUP = 0x48,
    MIG_RTPS_OBJECT_RESERVED_USER_READER_GROUP = 0x49,
    MIG_RTPS_OBJECT_RESERVED_USER_TOPIC        = 0x4a,

    MIG_RTPS_OBJECT_NORMAL_META_UNKNOWN        = 0x80,
    MIG_RTPS_OBJECT_NORMAL_META_APPLICATION    = 0x81,
    MIG_RTPS_OBJECT_NORMAL_META_CST_WRITER     = 0x82,
    MIG_RTPS_OBJECT_NORMAL_META_PUBLICATION    = 0x83,
    MIG_RTPS_OBJECT_NORMAL_META_SUBSCRIPTION   = 0x84,
    MIG_RTPS_OBJECT_NORMAL_META_CST_READER     = 0x87,
    MIG_RTPS_OBJECT_NORMAL_META_WRITER_GROUP = 0x88,
    MIG_RTPS_OBJECT_NORMAL_META_READER_GROUP = 0x89,
    MIG_RTPS_OBJECT_NORMAL_META_TOPIC          = 0x8a,

    MIG_RTPS_OBJECT_RESERVED_META_UNKNOWN      = 0xc0,
    MIG_RTPS_OBJECT_RESERVED_META_APPLICATION  = 0xc1,
    MIG_RTPS_OBJECT_RESERVED_META_CST_WRITER   = 0xc2,
    MIG_RTPS_OBJECT_RESERVED_META_PUBLICATION  = 0xc3,
    MIG_RTPS_OBJECT_RESERVED_META_SUBSCRIPTION = 0xc4,
    MIG_RTPS_OBJECT_RESERVED_META_CST_READER   = 0xc7,
    MIG_RTPS_OBJECT_RESERVED_META_WRITER_GROUP = 0xc8,
    MIG_RTPS_OBJECT_RESERVED_META_READER_GROUP = 0xc9,
    MIG_RTPS_OBJECT_RESERVED_META_TOPIC        = 0xca
} MIGRtpsObjectSuffix;


  #define MIG_RTPS_OBJECT_KIND_M_BIT (0x80)


  #define MIG_RTPS_OBJECT_KIND_R_BIT (0x40)

typedef enum {
    MIG_RTPS_RW_TYPE_UNKNOWN,
    MIG_RTPS_RW_TYPE_READER,
    MIG_RTPS_RW_TYPE_WRITER
} MIGRtpsRWType;

typedef enum {
    MIG_RTPS_SAMPLE_TYPE_UNKNOWN,
    MIG_RTPS_SAMPLE_TYPE_CST,
    MIG_RTPS_SAMPLE_TYPE_PS
} MIGRtpsSampleType;

extern MIGDllExport
RTIBool MIGRtpsObjectSuffix_isReserved(MIGRtpsObjectSuffix osx);

extern MIGDllExport
RTIBool MIGRtpsObjectSuffix_isMeta(MIGRtpsObjectSuffix osx);

extern MIGDllExport
RTIBool MIGRtpsObjectSuffix_isUser(MIGRtpsObjectSuffix osx);

extern MIGDllExport
RTIBool MIGRtpsObjectSuffix_isUserCreated(MIGRtpsObjectSuffix osx);

extern MIGDllExport
RTIBool MIGRtpsObjectSuffix_isVendorSpecific(MIGRtpsObjectSuffix osx);

extern MIGDllExport
RTIBool MIGRtpsObjectSuffix_isKeyed(MIGRtpsObjectSuffix osx);

extern MIGDllExport
MIGRtpsRWType MIGRtpsObjectSuffix_getRWType(MIGRtpsObjectSuffix osx);

extern MIGDllExport
MIGRtpsRWType MIGRtpsObjectSuffix_getSampleType(MIGRtpsObjectSuffix osx);

extern MIGDllExport
MIGRtpsObjectKey MIGRtpsObjectId_getObjectKey(MIGRtpsObjectId oid);

extern MIGDllExport
MIGRtpsObjectSuffix MIGRtpsObjectId_getObjectSuffix(MIGRtpsObjectId oid);

extern MIGDllExport
MIGRtpsObjectId MIGRtpsObjectId_generate(
    MIGRtpsObjectKey oky, MIGRtpsObjectSuffix osx);

extern MIGDllExport
RTIBool MIGRtpsObjectId_hasUserObject(MIGRtpsObjectId oid);

extern MIGDllExport
RTIBool MIGRtpsObjectId_isNeverEncodingWriter(MIGRtpsObjectId oid);

extern MIGDllExport
RTIBool MIGRtpsObjectId_isNeverEncodingReader(MIGRtpsObjectId oid);

extern MIGDllExport
RTIBool MIGRtpsObjectId_supportsDirectedWrites(MIGRtpsObjectId oid);

extern MIGDllExport
RTIBool MIGRtpsObjectId_supportsKeyExchange(MIGRtpsObjectId oid);

extern MIGDllExport
RTIBool MIGRtpsObjectKey_isStateless(MIGRtpsObjectKey oid,
        RTIBool isMeta, RTIBool isVendor);

extern MIGDllExport
MIGRtpsObjectSuffix MIGRtpsGuid_getObjectSuffix(struct MIGRtpsGuid *me);

struct REDASequenceNumber;

extern MIGDllExport RTIBool
MIGRtpsSequenceNumber_deserialize(struct REDASequenceNumber *me,
				  const char **stream, RTIBool needByteSwap);

extern MIGDllExport int
MIGRtpsSequenceNumber_getDistance(const struct REDASequenceNumber *s1,
                                  const struct REDASequenceNumber *s2,
                                  RTIBool noBitcountLimit);


  #define MIG_RTPS_BITMAP_32BITS_ARRAY_SIZE_MAX (8)   /* 256/32 = 8 */

struct MIGRtpsBitmap;


  #define MIG_RTPS_BITMAP_SIZE_MAX              (256)


  #define MIG_RTPS_BITMAP_DISTANCE_MAX          (0x7FFFFFFF)

extern MIGDllExport RTIBool
MIGRtpsBitmap_equals(const struct MIGRtpsBitmap *l,
		     const struct MIGRtpsBitmap *r);

extern MIGDllExport void
MIGRtpsBitmap_reset(struct MIGRtpsBitmap *me,
		    const struct REDASequenceNumber *seqNum,
		    RTI_INT32 bitCount);

extern MIGDllExport RTIBool
MIGRtpsBitmap_setBit(struct MIGRtpsBitmap *me,
		     const struct REDASequenceNumber *num, RTIBool bit);

extern MIGDllExport RTIBool
MIGRtpsBitmap_getBit(const struct MIGRtpsBitmap *me, RTIBool *bit,
		     const struct REDASequenceNumber *num);

extern MIGDllExport RTIBool
MIGRtpsBitmap_getFirstBit(const struct MIGRtpsBitmap *me,
			  struct REDASequenceNumber *position,
			  RTIBool searchBit);

extern MIGDllExport RTIBool
MIGRtpsBitmap_getLastBit(const struct MIGRtpsBitmap *me,
                         struct REDASequenceNumber *position,
                         RTIBool searchBit);

extern MIGDllExport RTI_INT32 
MIGRtpsBitmap_getSetBitCount(struct MIGRtpsBitmap *me,
                             RTIBool searchBit);

extern MIGDllExport RTIBool
MIGRtpsBitmap_fill(struct MIGRtpsBitmap *me,
		   const struct REDASequenceNumber *firstSeqNum,
		   const struct REDASequenceNumber *lastSeqNum,
		   RTIBool bit);

extern MIGDllExport void
MIGRtpsBitmap_copy(struct MIGRtpsBitmap *me,
		   const struct MIGRtpsBitmap *source,
		   unsigned int length);

extern MIGDllExport void
MIGRtpsBitmap_merge(struct MIGRtpsBitmap *me,
		    const struct MIGRtpsBitmap *source);

extern MIGDllExport RTIBool
MIGRtpsBitmap_shift(struct MIGRtpsBitmap *me,
		    const struct REDASequenceNumber *seqNum);

extern MIGDllExport void
MIGRtpsBitmap_truncate(struct MIGRtpsBitmap *me,
		       const struct REDASequenceNumber *seqNum);

extern MIGDllExport void
MIGRtpsBitmap_truncateToZeroCount(struct MIGRtpsBitmap *me,
				  const struct REDASequenceNumber *startSn,
				  int totalZeros);

extern MIGDllExport void
MIGRtpsBitmap_invert(struct MIGRtpsBitmap *me);

extern MIGDllExport void
MIGRtpsBitmap_compressTrailingOnes(struct MIGRtpsBitmap *me);

extern MIGDllExport RTIBool
MIGRtpsBitmap_deserialize(struct MIGRtpsBitmap *me, const char **stream,
			  RTIBool needByteSwap);

extern MIGDllExport RTI_INT32
MIGRtpsBitmap_getZeroCount(const struct MIGRtpsBitmap *me,
			   const struct REDASequenceNumber *sn);

extern MIGDllExport RTIBool
MIGRtpsFragmentBitmap_deserialize(struct MIGRtpsBitmap *me, const char **stream,
                                  RTIBool needByteSwap);

typedef RTI_UINT16 MIGRtpsParameterId;


#define MIG_RTPS_PID_INCOMPATIBLE_MASK              (0x4000)


#define MIG_RTPS_EXTENDED_PID_INCOMPATIBLE_MASK     (0x40000000)


#define MIG_RTPS_EXTENDED_PID_VENDORSPECIFIC_MASK     (0x80000000)


#define MIG_RTPS_PID_PAD                             (0x0000)


#define MIG_RTPS_PID_SENTINEL                        (0x0001)


#define MIG_RTPS_PID_EXTENDED                        (0x3F01)


#define MIG_RTPS_PID_USER_DATA                       (0x002c)


#define MIG_RTPS_PID_TOPIC_NAME                      (0x0005)


#define MIG_RTPS_PID_TYPE_NAME                       (0x0007)


#define MIG_RTPS_PID_GROUP_DATA                       (0x002d)


#define MIG_RTPS_PID_TOPIC_DATA                       (0x002e)


#define MIG_RTPS_PID_DURABILITY         (0x001d)


#define MIG_RTPS_PID_DURABILITY_SERVICE (0x001e)


#define MIG_RTPS_PID_DEADLINE         (0x0023)


#define MIG_RTPS_PID_LATENCY_BUDGET         (0x0027)


#define MIG_RTPS_PID_LIVELINESS         (0x001b)


#define MIG_RTPS_PID_RELIABILITY        (0x001a)


#define MIG_RTPS_PID_LIFESPAN           (0x002b)


#define MIG_RTPS_PID_DESTINATION_ORDER (0x0025)


#define MIG_RTPS_PID_HISTORY           (0x0040)


#define MIG_RTPS_PID_RESOURCE_LIMITS   (0x0041)


#define MIG_RTPS_PID_OWNERSHIP         (0x001f)


#define MIG_RTPS_PID_OWNERSHIP_STRENGTH (0x0006)


#define MIG_RTPS_PID_PRESENTATION         (0x0021)


#define MIG_RTPS_PID_PARTITION         (0x0029)


#define MIG_RTPS_PID_TIME_BASED_FILTER (0x0004)


#define MIG_RTPS_PID_TRANSPORT_PRIORITY (0x0049)


#define MIG_RTPS_PID_PROTOCOL_VERSION                (0x0015)


#define MIG_RTPS_PID_VENDOR_ID                       (0x0016)


#define MIG_RTPS_PID_UNICAST_LOCATOR6     (0x002f)


#define MIG_RTPS_PID_MULTICAST_LOCATOR6     (0x0030)


#define MIG_RTPS_PID_MULTICAST_IPADDRESS    (0x0011)


#define MIG_RTPS_PID_DEFAULT_UNICAST_LOCATOR6     (0x0031)


#define MIG_RTPS_PID_DEFAULT_MULTICAST_LOCATOR6     (0x0048)


#define MIG_RTPS_PID_METATRAFFIC_UNICAST_LOCATOR6 (0x0032)


#define MIG_RTPS_PID_METATRAFFIC_MULTICAST_LOCATOR6 (0x0033)


#define MIG_RTPS_PID_DEFAULT_UNICAST_IPADDRESS     (0x000c)


#define MIG_RTPS_PID_DEFAULT_UNICAST_PORT          (0x000e)


#define MIG_RTPS_PID_METATRAFFIC_UNICAST_IPADDRESS (0x0045)


#define MIG_RTPS_PID_METATRAFFIC_UNICAST_PORT     (0x000d)


#define MIG_RTPS_PID_METATRAFFIC_MULTICAST_IPADDRESS (0x000b)


#define MIG_RTPS_PID_METATRAFFIC_MULTICAST_PORT (0x0046)


#define MIG_RTPS_PID_EXPECTS_INLINE_QOS         (0x0043)


#define MIG_RTPS_PID_MANUAL_LIVELINESS_COUNT    (0x0034)


#define MIG_RTPS_PID_PARTICIPANT_BUILTIN_ENDPOINTS (0x0044)


#define MIG_RTPS_PID_LEASE_DURATION                (0x0002)


#define MIG_RTPS_PID_CONTENT_FILTER_PROPERTY         (0x0035)


#define MIG_RTPS_PID_PROPERTY_LIST 	              (0x0059)


#define MIG_RTPS_PID_PARTICIPANT_GUID                 (0x0050)


#define MIG_RTPS_PID_PARTICIPANT_ENTITY_ID            (0x0051)


#define MIG_RTPS_PID_GROUP_GUID                       (0x0052)


#define MIG_RTPS_PID_GROUP_ENTITY_ID                 (0x0053)


   #define MIG_RTPS_PID_FILTER_SIGNATURE (0x0055)


   #define MIG_RTPS_PID_COHERENT_SET     (0x0056)


   #define MIG_RTPS_PID_DIRECTED_WRITE     (0x0057)


   #define MIG_RTPS_PID_BUILTIN_ENDPOINT_MASK     (0x0058)


   #define MIG_RTPS_PID_ENDPOINT_GUID    (0x005A)


   #define MIG_RTPS_PID_MAX_SAMPLE_SERIALIZED_SIZE     (0x0060)


   #define MIG_RTPS_PID_ENTITY_NAME     (0x0062)


   #define MIG_RTPS_PID_KEY_HASH     (0x0070)


   #define MIG_RTPS_PID_STATUS_INFO    (0x0071)


   #define MIG_RTPS_PID_TYPE_OBJECT    (0x0072)


   #define MIG_RTPS_PID_TYPE_CONSISTENCY    (0x0074)


   #define MIG_RTPS_PID_EQUIVALENT_TYPE_NAME    (0x0075)


   #define MIG_RTPS_PID_BASE_TYPE_NAME    (0x0076)


   #define MIG_RTPS_PID_IDENTITY_TOKEN    (0x1001)
   #define MIG_RTPS_PID_PERMISSIONS_TOKEN    (0x1002)


#define MIG_RTPS_PID_PRODUCT_VERSION                           (0x8000)


#define MIG_RTPS_PID_PLUGIN_PROMISCUITY_KIND                   (0x8001)


#define MIG_RTPS_PID_ENTITY_VIRTUAL_GUID                       (0x8002)


#define MIG_RTPS_PID_SERVICE                                   (0x8003)


#define MIG_RTPS_PID_TYPECODE                                  (0x8004)


#define MIG_RTPS_PID_DISABLE_ACKS                              (0x8005)


#define MIG_RTPS_PID_LOCATOR_FILTER_LIST                       (0x8006)


#define MIG_RTPS_PID_UNICAST_LOCATOR6_EX                       (0x8007)


#define MIG_RTPS_PID_MULTICAST_LOCATOR6_EX                     (0x8008)


#define MIG_RTPS_PID_EXPECTS_VIRTUAL_HB                        (0x8009)


#define MIG_RTPS_PID_ROLE_NAME                                 (0x800A)


#define MIG_RTPS_PID_ACK_KIND                                  (0x800B)


#define MIG_RTPS_PID_PRESENTATION_EX                           (0x800C)


#define MIG_RTPS_PID_GROUP_VIRTUAL_GUID                        (0x800D)


#define MIG_RTPS_PID_PEER_HOST_EPOCH                           (0x800E)


#define MIG_RTPS_PID_DOMAIN_ID                                 (0x800F)


    #define MIG_RTPS_PID_RELATED_READER_GUID                   (0x8010)


#define MIG_RTPS_PID_TRANSPORT_INFO_LIST                       (0x8010)


    #define MIG_RTPS_PID_SOURCE_GUID                           (0x8011)


#define MIG_RTPS_PID_DIRECT_COMMUNICATION                      (0x8011)


    #define MIG_RTPS_PID_RELATED_SOURCE_GUID                   (0x8012)


    #define MIG_RTPS_PID_TOPIC_QUERY_GUID                      (0x8013)


#define MIG_RTPS_PID_TOPIC_QUERY_PUBLICATION                   (0x8014)


#define MIG_RTPS_PID_ENDPOINT_PROPERTY_CHANGE_EPOCH            (0x8015)


#define MIG_RTPS_PID_REACHABILITY_LEASE_DURATION               (0x8016)


#define MIG_RTPS_PID_VENDOR_BUILTIN_ENDPOINT_MASK              (0x8017)


#define MIG_RTPS_PID_ENDPOINT_SECURITY_ATTRIBUTES              (0x8018)


    #define MIG_RTPS_PID_SAMPLE_SIGNATURE                     (0x8019)


#define MIG_RTPS_PID_PERSISTENCE_DEPRECATED                     (0x0003)


#define MIG_RTPS_PID_TYPE_CHECKSUM_DEPRECATED                   (0x0008)


#define MIG_RTPS_PID_TYPE2_NAME_DEPRECATED                      (0x0009)


#define MIG_RTPS_PID_TYPE2_CHECKSUM_DEPRECATED                  (0x000a)


#define MIG_RTPS_PID_EXPECTS_ACK_DEPRECATED                     (0x0010)


#define MIG_RTPS_PID_MANAGER_KEY_DEPRECATED                     (0x0012)


#define MIG_RTPS_PID_SEND_QUEUE_SIZE_DEPRECATED                 (0x0013)


#define MIG_RTPS_PID_VARGAPPS_SEQUENCE_NUMBER_LAST_DEPRECATED   (0x0017)


#define MIG_RTPS_PID_RECV_QUEUE_SIZE_DEPRECATED                 (0x0018)


#define MIG_RTPS_PID_TYPECODE_DEPRECATED                        (0x0047)


   #define MIG_RTPS_HEARTBEAT_SIZE_SERIALIZED  (32)


   #define MIG_RTPS_HEARTBEAT_BATCH_SIZE_SERIALIZED  (48)


   #define MIG_RTPS_GAP_SIZE_SERIALIZED  (52)


   #define MIG_RTPS_NACKFRAG_SIZE_SERIALIZED  (56)


   #define MIG_RTPS_VIRTUAL_WRITER_INFO_MAX_OVERHEAD_SIZE  (48)

struct MIGRtpsVirtualWriterInfo {
    /*i \brief 
    */
    struct REDAInlineListNode _node;

    /*e \brief Virtual GUID 
    */
    struct MIGRtpsGuid guid;
    
    /*e \brief This is the last virtual sequence number provided by the physical
        writer to the virtual queue 
     */
    struct REDASequenceNumber firstAvailableVirtualSn;

    /*e \brief This is the last virtual sequence number that the physical
       writer has for this virtual queue 
    */
    struct REDASequenceNumber lastAvailableVirtualSn;

    /*e \brief This is the last RTPS sequence number provided by the physical
        writer to the virtual queue 
     */
    struct REDASequenceNumber firstAvailableRtpsSn;

    /*e \brief This is the last RTPS sequence number that the physical
       writer has for this virtual queue 
    */
    struct REDASequenceNumber lastAvailableRtpsSn;

    /*    
    */
    void * userData;
};


   #define MIG_RTPS_WRITER_INFO_MAX_HEADER_OVERHEAD_SIZE  (8) /* entityId + unsigned long */

struct MIGRtpsWriterInfo {
    struct REDAInlineListNode _node;

    /** Public members **/

    /*e \brief guid of the physical writer that has this list of virtual writers
    */
    struct MIGRtpsGuid guid;

    /** Private members **/

    /*i \brief pointer back to the MIGRtpsWriterInfoList to which this belongs
    */
    struct MIGRtpsWriterInfoList *_writerInfoList;

    struct REDAInlineList *_virtualWriterInfoList;

    /* Private state used to manage iteration */
    struct MIGRtpsVirtualWriterInfo _dummyVirtualWriterInfo;
    struct MIGRtpsVirtualWriterInfo *_currentNode;
    RTI_UINT32 _numVirtualGuids;
};

extern MIGDllExport const struct MIGRtpsVirtualWriterInfo *
MIGRtpsWriterInfo_getFirstVirtualWriterInfo(struct MIGRtpsWriterInfo *writerInfo);

extern MIGDllExport const struct MIGRtpsVirtualWriterInfo *
MIGRtpsWriterInfo_getNextVirtualWriterInfo(struct MIGRtpsWriterInfo *writerInfo);

extern MIGDllExport int
MIGRtpsWriterInfo_getVirtualWriterInfoListSize(struct MIGRtpsWriterInfo *writerInfo);

struct MIGRtpsWriterInfoList {
    struct REDAInlineList *_writerInfoList;
    struct RTICdrStream _cdrStream;
    struct MIGRtpsWriterInfo _dummyWriterInfo;
    struct MIGRtpsWriterInfo *_currentNode;

    /*i \ingroup MIGRtpsVirtualWriterInfoClass
      \brief FALSE if the CDR stream position is on the writer info list
      boundary. TRUE otherwise.
    */
    RTIBool _isIteratingOverWriterInfo;

    /*i \ingroup MIGRtpsVirtualWriterInfoClass
      \brief Which writer the CDR stream position is at. If you call
      getNextWriterInfo, you will get the writerIndex-th writerInfo.
    */
    RTI_UINT32 _writerIndex;

    /*i \ingroup MIGRtpsVirtualWriterInfoClass
      \brief TRUE if the CDR stream position is on a virtual writer info
      boundary. FALSE otherwise.
    */
    RTIBool _isIteratingOverVirtualWriterInfo;

    /*i \ingroup MIGRtpsVirtualWriterInfoClass
      \brief Which virtual writer (within the writerIndex) the CDR stream
      position is at. If you call getNextVirtualWriterInfo, you will get
      the virtualWriterIndex-th virtualWriterInfo.
    */
    RTI_UINT32 _virtualWriterIndex;
    RTIBool _wFlag;
    RTIBool _vFlag;
    RTIBool _nFlag;
    RTI_UINT32 _numWriters;
};


struct MIGRtpsWriterInfoListState {
    struct MIGRtpsWriterInfoList _virtualWriterInfoList;
    struct MIGRtpsWriterInfo * _currentWriterInfo;
    struct MIGRtpsVirtualWriterInfo * _currentVirtualWriterInfo;
};

extern MIGDllExport RTIBool
MIGRtpsWriterInfoList_initFromInlineList(struct MIGRtpsWriterInfoList *writerInfoList, 
                                                struct REDAInlineList *inlineList);

extern MIGDllExport RTIBool
MIGRtpsWriterInfoList_initFromBuffer(struct MIGRtpsWriterInfoList *writerInfoList, 
                                            char *dataStream,
                                            int dataLength,
                                            char flags,
                                            const struct MIGRtpsGuid *guid);

extern MIGDllExport const struct MIGRtpsWriterInfo *
MIGRtpsWriterInfoList_getFirstWriterInfo(struct MIGRtpsWriterInfoList *writerInfoList);

extern MIGDllExport const struct MIGRtpsWriterInfo *
MIGRtpsWriterInfoList_getNextWriterInfo(struct MIGRtpsWriterInfoList *writerInfoList);

extern MIGDllExport int
MIGRtpsWriterInfoList_getWriterInfoListSize(struct MIGRtpsWriterInfoList *writerInfoList);

extern MIGDllExport RTIBool
MIGRtpsWriterInfoList_addWriterInfo(struct MIGRtpsWriterInfoList *writerInfoList,
                                    struct MIGRtpsWriterInfo *writerInfo);

extern MIGDllExport RTIBool
MIGRtpsWriterInfoList_removeAllWriterInfo(struct MIGRtpsWriterInfoList *writerInfoList);

extern MIGDllExport RTI_INT32
MIGRtpsWriterInfoList_getSerializedSizeAndFlags(
    struct MIGRtpsWriterInfoList *writerInfoList, char *flags);

extern MIGDllExport RTIBool
MIGRtpsWriterInfoList_getLastAvailableVirtualSn(
    struct MIGRtpsWriterInfoList *writerInfoList,
    struct REDASequenceNumber * lastGroupAvailableVirtualSn,
    const struct MIGRtpsGuid * virtualGuid);


    #define MIG_RTPS_PID_ORIGINAL_WRITER_INFO (0x0061)


    #define MIG_RTPS_PID_RELATED_ORIGINAL_WRITER_INFO (0x800F)

extern MIGDllExport RTIBool
MIGRtpsParameterSequence_skip(
    const char **stream, RTIBool needByteSwap, int maxParamLength);

struct RTICdrStream;

extern MIGDllExport
RTIBool MIGRtps_serializeProtocolVersion(
    void *endpointData,
    const RTICdrUnsignedShort *in,
    struct RTICdrStream *stream,
    RTIBool serializeEncapsulation, 
    RTIEncapsulationId encapsulationId,
    RTIBool serializeData,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtps_deserializeProtocolVersion(
    void *endpointData,
    RTICdrUnsignedShort *out,
    struct RTICdrStream *stream,
    RTIBool deserializeEncapsulation,
    RTIBool deserializeSample,
    void *endpointPluginQos);

extern MIGDllExport
unsigned int MIGRtps_getProtocolVersionMaxSizeSerialized(
    unsigned int size);

extern MIGDllExport
RTIBool MIGRtps_serializeVendorId(
    void *endpointData,
    const RTICdrUnsignedShort *in,
    struct RTICdrStream *stream,
    RTIBool serializeEncapsulation, 
    RTIEncapsulationId encapsulationId,
    RTIBool serializeData,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtps_deserializeVendorId(
    void *endpointData,
    RTICdrUnsignedShort *out,
    struct RTICdrStream *stream,
    void *endpointPluginQos);

extern MIGDllExport
unsigned int MIGRtps_getVendorIdMaxSizeSerialized(
    unsigned int size);

struct RTINtpTime;

extern MIGDllExport
RTIBool MIGRtps_serializeRtiNtpTime(
    void *endpointData,
    const struct RTINtpTime *time,
    struct RTICdrStream *stream,
    RTIBool serializeEncapsulation,
    RTIEncapsulationId encapsulationId,     
    RTIBool serializeData,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtps_deserializeRtiNtpTime(
    void *endpointData,
    struct RTINtpTime *time,
    struct RTICdrStream *stream,
    RTIBool deserializeEncapsulation,
    RTIBool deserializeSample,
    void *endpointPluginQos);

extern MIGDllExport
unsigned int MIGRtps_getRtiNtpTimeMaxSizeSerialized(
    unsigned int size);

extern MIGDllExport
RTIBool MIGRtps_serializeSequenceNumber(
    void *endopintData,
    const struct REDASequenceNumber *seq,
    struct RTICdrStream *stream,
    RTIBool serializeEncapsulation,
    RTIEncapsulationId encapsulationId,      
    RTIBool serializeData,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtps_deserializeSequenceNumber(
    void *endpointData,
    struct REDASequenceNumber *seq,
    struct RTICdrStream *stream,
    RTIBool deserializeEncapsulation,
    RTIBool deserializeSample,
    void *endpointPluginQos);

extern MIGDllExport
unsigned int MIGRtps_getSequenceNumberMaxSizeSerialized(
    unsigned int size);

extern MIGDllExport
RTIBool MIGRtps_serializeRtiBool(
    void *endpointData,
    const RTIBool *in,
    struct RTICdrStream *stream,
    RTIBool serializeEncapsulation,
    RTIEncapsulationId encapsulationId,    
    RTIBool serializeData,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtps_deserializeRtiBool(
    void *endpointData,
    RTIBool *out,
    struct RTICdrStream *stream,
    RTIBool deserializeEncapsulation,
    RTIBool deserializeSample,
    void *endpointPluginQos);

extern MIGDllExport
unsigned int MIGRtps_getRtiBoolMaxSizeSerialized(
    unsigned int size);

extern MIGDllExport
RTIBool MIGRtps_serializeIpv4Address(
    void *endpointData,
    const NDDS_Transport_Address_t *addr,
    struct RTICdrStream *stream,
    RTIBool serializeEncapsulation,
    RTIEncapsulationId encapsulationId, 
    RTIBool serializeData,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtps_deserializeIpv4Address(
    void *endpointData,
    NDDS_Transport_Address_t *addr,
    struct RTICdrStream *stream,
    RTIBool deserializeEncapsulation,
    RTIBool deserializeSample,
    void *endpointPluginQos);

extern MIGDllExport
unsigned int MIGRtps_getIpv4AddressMaxSizeSerialized(
    unsigned int size);

struct RTINetioLocator;

extern MIGDllExport
RTIBool MIGRtps_serializeIpv6Locator(
    void *endpointData,
    const struct RTINetioLocator *loc,
    struct RTICdrStream *stream,
    RTIBool serializeEncapsulation,
    RTIEncapsulationId encapsulationId, 
    RTIBool serializeData,
    void *endpointPluginQos);

struct RTINetioLocator;

extern MIGDllExport
RTIBool MIGRtps_serializeIpv6LocatorWithEncapsulations(
    void *endpointData,
    const struct RTINetioLocator *loc,
    struct RTICdrStream *stream,
    RTIBool serializeEncapsulation,
    RTIEncapsulationId encapsulationId,
    RTIBool serializeData,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtps_deserializeIpv6Locator(
    void *endpointData,
    struct RTINetioLocator *loc,
    struct RTICdrStream *stream,
    RTIBool deserializeEncapsulation,
    RTIBool deserializeSample,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtps_deserializeIpv6LocatorWithEncapsulations(
    void *endpointData,
    struct RTINetioLocator *loc,
    struct RTICdrStream *stream,
    RTIBool deserializeEncapsulation,
    RTIBool deserializeSample,
    void *endpointPluginQos);

extern MIGDllExport
RTIBool MIGRtps_skipIpv6Locator(
    void *endpointData,
    struct RTICdrStream *stream,
    RTIBool skipEncapsulation,
    RTIBool skipSample,
    void *endpointPluginQos);

extern MIGDllExport
unsigned int MIGRtps_getIpv6LocatorMaxSizeSerialized(
    unsigned int size);

extern MIGDllExport
unsigned int MIGRtps_getIpv6LocatorMaxSizeSerializedWithEncapsulations(
    unsigned int size);

extern MIGDllExport RTIBool
MIGRtpsEpoch_deserialize(
    REDAEpoch* me,
    const char **stream, RTIBool needByteSwap);

extern MIGDllExport RTIBool
MIGRtps_deserializeUnsignedShort(
    unsigned short *twobytes, const char **data, RTIBool needByteSwap);

extern MIGDllExport RTIBool
MIGRtps_deserializeUnsignedLong(
    RTI_UINT32 *fourbytes, const char **data, RTIBool needByteSwap);

 
struct MIGRtpsAppAck;


struct MIGRtpsAppAckPerVirtualWriter {
    struct REDAInlineListNode _node;

    struct MIGRtpsGuid virtualWriterGuid;
    RTI_UINT32 epoch;

    struct MIGRtpsAppAck * _parent;

    /* If the buffer is set, we will iterate over a serialized message */
    struct RTICdrStream _buffer;
    RTI_UINT16 _curInterval;
    struct REDASequenceNumberInterval _tmpInterval;
    RTI_UINT16 _numIntervals;

    /* If the list or interval are set, 
     * we will iterate over a deserialized message.
       Both buffer and (list or interval) cannot be set at the same time */
    struct REDASequenceNumberIntervalList * _list;
    struct REDASequenceNumberInterval * _interval;
    const struct REDASkiplistNode * _curNode;
    struct REDASequenceNumberInterval * _curIntervalNode;
};


struct MIGRtpsAppAck {

    RTIBool includesIntervals;

    /* If the buffer is set, we will iterate over a serialized message */
    struct RTICdrStream _buffer;
    RTI_UINT32 _curVirtualWriter;
    RTI_UINT32 _numVirtualWriters;
    struct MIGRtpsAppAckPerVirtualWriter _tmpVirtualWriter;

    /* If the list is set, we will iterate over a deserialized message.
       Both buffer and list cannot be set at the same time */
    struct REDAInlineList * _list;
    struct REDAInlineListNode * _curNode;
};

extern MIGDllExport
void MIGRtpsAppAck_setFromBuffer(
            struct MIGRtpsAppAck * appAckOut,
            const char ** dataStream, 
            int dataLength,
            char flags);

extern MIGDllExport
void MIGRtpsAppAck_setFromList(
            struct MIGRtpsAppAck * appAckConfOut,
            struct REDAInlineList * virtualWriterList);

extern MIGDllExport
void MIGRtpsAppAck_setConfFromBuffer(
            struct MIGRtpsAppAck * appAckConfOut,
            const char ** dataStream, 
            int dataLength,
            char flags);

extern MIGDllExport
void MIGRtpsAppAckPerVirtualWriter_initialize(
            struct MIGRtpsAppAckPerVirtualWriter * virtualWriterAppAckOut,
            const struct MIGRtpsGuid * guid,
            struct REDASequenceNumberIntervalList * list,
            struct REDASequenceNumberInterval * interval,
            RTI_UINT32 initialEpoch);

extern MIGDllExport
void MIGRtpsAppAck_assertVirtualWriter(
    struct MIGRtpsAppAck * self,
    struct MIGRtpsAppAckPerVirtualWriter * vWrAppAck);


#define MIGRtpsAppAck_getVirtualWriterCount(self)                           \
    ((RTI_UINT32)((self)->_list ? REDAInlineList_getSize((self)->_list) :   \
                    (self)->_numVirtualWriters))

extern MIGDllExport struct MIGRtpsAppAckPerVirtualWriter * 
MIGRtpsAppAck_getFirstVirtualWriter(struct MIGRtpsAppAck * self);

extern MIGDllExport struct MIGRtpsAppAckPerVirtualWriter *
MIGRtpsAppAck_getNextVirtualWriter(struct MIGRtpsAppAck * self);


#define MIGRtpsAppAckPerVirtualWriter_getIntervalCount(self) \
    ((RTI_UINT32) \
      ( \
        (self)->_list ? \
          REDASkiplist_getNodeCount(&(self)->_list->list) : \
          ( \
            (self)->_interval? \
              1: \
              (self)->_numIntervals \
          ) \
      ) \
    )

extern MIGDllExport struct REDASequenceNumberInterval *
MIGRtpsAppAckPerVirtualWriter_getFirstInterval(
    struct MIGRtpsAppAckPerVirtualWriter * self);

extern MIGDllExport struct REDASequenceNumberInterval *
MIGRtpsAppAckPerVirtualWriter_getNextInterval(
    struct MIGRtpsAppAckPerVirtualWriter * self);


/*e \ingroup MIGRtpsClass 
 *
 * Ensures that this app-ack per virtual writer
 * is included in the list of its parent (MIGRtpsAppAck)
 *
 * @pre MIGRtpsAppAck_assertVirtualWriter(parent, self)
 *      has been called at least once.
 * @pre Only for deserialized representation
 *
 * @post MIGRtpsAppAck_get{First,Next}VirtualWriter(parent)
 *       will return self when called enough times
 *
 */
extern MIGDllExport
void MIGRtpsAppAckPerVirtualWriter_assertToParent(
    struct MIGRtpsAppAckPerVirtualWriter * self);

extern MIGDllExport
void MIGRtpsAppAckPerVirtualWriter_removeFromParent(
    struct MIGRtpsAppAckPerVirtualWriter * self);


#define MIGRtpsAppAckPerVirtualWriter_attachedToParent(self) \
    ((self)->_node.inlineList != NULL)


  #define MIG_RTPS_INFO_SOURCE_UNUSED_FIELD_SIZE (4)


  #define MIG_RTPS_INFO_SOURCE_CONTENT_SIZE \
        (MIG_RTPS_INFO_SOURCE_UNUSED_FIELD_SIZE \
                + MIG_RTPS_PROTOCOL_VERSION_SIZE \
                + MIG_RTPS_VENDOR_ID_SIZE \
                + MIG_RTPS_GUID_PREFIX_SIZE)


  #define MIG_RTPS_INFO_SOURCE_SIZE \
        (MIG_RTPS_SUBMESSAGE_HEADER_SIZE + MIG_RTPS_INFO_SOURCE_CONTENT_SIZE)


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "mig/mig_rtps_impl.h"

#endif /* mig_rtps_h */
