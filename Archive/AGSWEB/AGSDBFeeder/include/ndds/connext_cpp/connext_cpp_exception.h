/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)connext_cpp_exception.h    generated by: makeheader    Fri Feb 16 13:52:55 2018
 *
 *		built from:	exception.ifcxx
 */

#ifndef connext_cpp_exception_h
#define connext_cpp_exception_h



#include <stdexcept>
#include <string>

namespace std {
    struct nothrow_t; // forward declaration
}

#include "ndds/ndds_namespace_cpp.h"

#include "connext_cpp/connext_cpp_dll.h"




namespace connext {

using namespace DDS;

XMQCPPDllExport
bool check_retcode(
    ReturnCode_t retcode,
    const char * method_name,
    const struct RTILogMessage& error_msg,
    const std::string& msg,
    bool throw_timeout_error = false);


class XMQCPPDllExport Rethrowable {
public:
    virtual void rethrow(const std::string& additional_info) const = 0;
    virtual ~Rethrowable() {}
};

/**
 * \dref_RuntimeException
 */
class XMQCPPDllExport RuntimeException :
    public std::runtime_error, 
    public Rethrowable
{
public:
    RuntimeException (const std::string & message);
    ~RuntimeException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};

/**
 * \dref_LogicException
 */
class XMQCPPDllExport LogicException :
    public std::logic_error, 
    public Rethrowable
{
public:
    LogicException (const std::string & message);
    ~LogicException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};

/**
 * \dref_UnsupportedException
 */
class XMQCPPDllExport UnsupportedException : public LogicException 
{
public:
    UnsupportedException(const std::string & message);
    ~UnsupportedException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};

/**
 * \dref_BadParameterException
 */
class XMQCPPDllExport BadParameterException : public LogicException 
{
public:
    BadParameterException(const std::string & message);
    ~BadParameterException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};

/**
 * \dref_PreconditionNotMetException
 */
class XMQCPPDllExport PreconditionNotMetException : public LogicException
{
public:
    PreconditionNotMetException(const std::string & message);
    ~PreconditionNotMetException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};

/**
 * \dref_ImmutablePolicyException
 */
class XMQCPPDllExport ImmutablePolicyException : public LogicException
{
public:
    ImmutablePolicyException(const std::string & message);
    ~ImmutablePolicyException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};

/**
 * \dref_InconsistentPolicyException
 */
class XMQCPPDllExport InconsistentPolicyException : public LogicException
{
public:
    InconsistentPolicyException(const std::string & message);
    ~InconsistentPolicyException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};

/**
 * \dref_NotEnabledException
 */
class XMQCPPDllExport NotEnabledException : public LogicException
{
public:
    NotEnabledException(const std::string & message);
    ~NotEnabledException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};

/**
 * \dref_AlreadyDeletedException
 */
class XMQCPPDllExport AlreadyDeletedException : public LogicException
{
public:
    AlreadyDeletedException(const std::string & message);
    ~AlreadyDeletedException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};

/**
 * \dref_IllegalOperationException
 */
class XMQCPPDllExport IllegalOperationException : public LogicException
{
public:
    IllegalOperationException(const std::string & message);
    ~IllegalOperationException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};

/**
 * \dref_TimeoutException
 */
class XMQCPPDllExport TimeoutException : public RuntimeException
{
public:
    TimeoutException(const std::string & message);
    ~TimeoutException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};

/************************* Runtime Exceptions ****************************/

/**
 * \dref_OutOfResourcesException
 */
class XMQCPPDllExport OutOfResourcesException : public RuntimeException
{
public:
    OutOfResourcesException(const std::string & message);
    ~OutOfResourcesException () throw();
    virtual void raise();
    virtual void rethrow(const std::string& additional_info) const;
};



} // namespace connext


#endif /* connext_cpp_exception_h */
