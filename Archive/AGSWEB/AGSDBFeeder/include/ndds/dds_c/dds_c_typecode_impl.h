/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)dds_c_typecode_impl.h    generated by: makeheader    Fri Feb 16 13:51:57 2018
 *
 *		built from:	typecode_impl.ifc
 */

#ifndef dds_c_typecode_impl_h
#define dds_c_typecode_impl_h


#include "dds_c/dds_c_typecode.h"

#ifdef __cplusplus
    extern "C" {
#endif


extern DDSCDllExport
const DDS_TypeCode * DDS_TypeCode_get_content_no_alias(
    const DDS_TypeCode * type);

extern DDSCDllExport
RTIBool DDS_TypeCode_is_member_extensibility_consistent(
    const DDS_TypeCode * type);

extern DDSCDllExport
void DDS_TypeCodeFactory_initialize_memberI(DDS_TypeCode_Member * member);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeFactory_initialize_struct_tcI(
    DDS_TypeCodeFactory * self,
    DDS_TypeCode * tc,
    const char * name,
    DDS_ExtensibilityKind extensibility_kind,
    const struct DDS_StructMemberSeq * members,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeFactory_initialize_value_tcI(
    DDS_TypeCodeFactory * self,
    DDS_TypeCode * tc,
    const char * name,
    DDS_ExtensibilityKind extensibility_kind,
    DDS_ValueModifier type_modifier,
    const DDS_TypeCode * concrete_base,
    const struct DDS_ValueMemberSeq * members,
    DDS_Boolean clone_base,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeFactory_initialize_sequence_tcI(
    DDS_TypeCodeFactory * self,
    DDS_TypeCode * tc,
    DDS_UnsignedLong bound,
    const DDS_TypeCode * element_type,
    DDS_Boolean clone_element_type,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeFactory_initialize_string_tcI(
    DDS_TypeCodeFactory * self,
    DDS_TypeCode * tc,
    DDS_TCKind kind,
    DDS_UnsignedLong bound,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeFactory_initialize_array_tcI(
    DDS_TypeCodeFactory * self,
    DDS_TypeCode * tc,
    const struct DDS_UnsignedLongSeq * dimensions,
    const DDS_TypeCode * element_type,
    DDS_Boolean clone_element_type,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeFactory_initialize_alias_tcI(
    DDS_TypeCodeFactory * self,
    DDS_TypeCode * tc,
    const char * name,
    const DDS_TypeCode * original_type,
    DDS_Boolean is_pointer,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport    
DDS_Boolean DDS_TypeCodeFactory_initialize_enum_tcI(
    DDS_TypeCodeFactory * self,
    DDS_TypeCode * tc,
    const char * name,
    DDS_ExtensibilityKind extensibility_kind,
    const struct DDS_EnumMemberSeq * members,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeFactory_initialize_union_tcI(
    DDS_TypeCodeFactory * self,
    DDS_TypeCode * tc,
    const char * name,
    DDS_ExtensibilityKind extensibility_kind,
    const DDS_TypeCode * discriminator_type,
    DDS_Long default_index,
    const struct DDS_UnionMemberSeq * members,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeFactory_copy_tcI(
    DDS_TypeCodeFactory * self,
    DDS_TypeCode * result,
    const DDS_TypeCode * tc_in,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
void DDS_TypeCodeFactory_finalize_tcI(
    DDS_TypeCodeFactory * self, DDS_TypeCode * tc, DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_UnsignedLong DDS_TypeCode_add_member_exI(
    DDS_TypeCode * self,
    const char * name,
    DDS_Long id, /* or label */
    const DDS_TypeCode *tc,
    DDS_Octet member_flags,
    DDS_Visibility visibility,
    DDS_Boolean is_pointer,
    DDS_Short bits,
    DDS_Boolean clone_memory,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_UnsignedLong DDS_TypeCode_add_member_to_union_exI(
    DDS_TypeCode * self,
    const char * name,
    DDS_Long id,
    const struct DDS_LongSeq *labels,
    const DDS_TypeCode *tc,
    DDS_Boolean is_pointer,
    DDS_Boolean clone_memory, /* Must be true, except in some cases in dds_cpp.2.0 */
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
const DDS_TypeCode_Member * DDS_TypeCode_get_member_by_index(
    const DDS_TypeCode * self,
    DDS_UnsignedLong index,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
const char * DDS_TypeCodeMember_get_name(
    const DDS_TypeCode_Member * self,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
const DDS_TypeCode * DDS_TypeCodeMember_get_type(
    const DDS_TypeCode_Member * self,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeMember_is_required(
    const DDS_TypeCode_Member * self,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeMember_is_key(
    const DDS_TypeCode_Member * self,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeMember_is_pointer(
    const DDS_TypeCode_Member * self,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeMember_is_bitfield(
    const DDS_TypeCode_Member * self,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_UnsignedLong DDS_TypeCodeMember_get_id(
    const DDS_TypeCode_Member * self,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
void DDS_TypeCode_set_extensibility_kindI(
    DDS_TypeCode *type, DDS_ExtensibilityKind kind);

extern DDSCDllExport
DDS_Boolean DDS_TypeCodeMember_copyI(
    struct DDS_TypeCodeFactory * factory,
    DDS_TypeCode_Member * result,
    const DDS_TypeCode_Member * source,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport
void DDS_TypeCodeMember_finalizeI(
    struct DDS_TypeCodeFactory * factory,
    DDS_TypeCode_Member * self);

extern DDSCDllExport 
unsigned int DDS_TypeCode_get_type_serialized_min_size(
    const DDS_TypeCode *type,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment,
    DDS_Boolean use_default_union_member, 
    DDS_Boolean ignore_extensibility);

extern DDSCDllExport 
unsigned int DDS_TypeCode_get_type_serialized_max_size(
    const DDS_TypeCode *type,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment);

extern DDSCDllExport 
DDS_Boolean DDS_TypeCode_has_optional_members(
    const DDS_TypeCode *self, DDS_ExceptionCode_t *ex);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* dds_c_typecode_impl_h */
