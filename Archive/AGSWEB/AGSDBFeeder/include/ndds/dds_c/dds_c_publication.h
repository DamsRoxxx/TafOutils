/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)dds_c_publication.h    generated by: makeheader    Fri Feb 16 13:51:58 2018
 *
 *		built from:	publication.ifc
 */

#ifndef dds_c_publication_h
#define dds_c_publication_h


  #ifndef dds_c_topic_h
    #include "dds_c/dds_c_topic.h"
  #endif
  #ifndef dds_c_dll_h
    #include "dds_c/dds_c_dll.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

typedef struct DDS_DataWriterImpl DDS_DataWriter;

typedef struct DDS_PublisherImpl DDS_Publisher;

typedef DDS_Publisher* DDS_Publisher_ptr;


DDS_SEQUENCE(DDS_PublisherSeq, DDS_Publisher_ptr);

struct DDS_OfferedDeadlineMissedStatus {
    /*e \dref_OfferedDeadlineMissedStatus_total_count
     */
    DDS_Long total_count;

    /*e \dref_OfferedDeadlineMissedStatus_total_count_change
     */
    DDS_Long total_count_change;

    /*e \dref_OfferedDeadlineMissedStatus_last_instance_handle
     */
    DDS_InstanceHandle_t last_instance_handle;
};

 
#define DDS_OfferedDeadlineMissedStatus_INITIALIZER \
                { 0L, 0L, DDS_HANDLE_NIL_NATIVE }

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedDeadlineMissedStatus_initialize(
    struct DDS_OfferedDeadlineMissedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedDeadlineMissedStatus_copy(
    struct DDS_OfferedDeadlineMissedStatus *self,
    const struct DDS_OfferedDeadlineMissedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedDeadlineMissedStatus_finalize(
    struct DDS_OfferedDeadlineMissedStatus *self);

struct DDS_LivelinessLostStatus { 
    /*e \dref_LivelinessLostStatus_total_count
     */
    DDS_Long total_count;

    /*e \dref_LivelinessLostStatus_total_count_change
     */
    DDS_Long total_count_change;
};


#define DDS_LivelinessLostStatus_INITIALIZER { 0L, 0L }

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessLostStatus_initialize(
    struct DDS_LivelinessLostStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessLostStatus_copy(
    struct DDS_LivelinessLostStatus *self,
    const struct DDS_LivelinessLostStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessLostStatus_finalize(
    struct DDS_LivelinessLostStatus *self);

struct DDS_OfferedIncompatibleQosStatus {
    /*e \dref_OfferedIncompatibleQosStatus_total_count
     */
    DDS_Long total_count;

    /*e \dref_OfferedIncompatibleQosStatus_total_count_change
     */
    DDS_Long total_count_change;

    /*e \dref_OfferedIncompatibleQosStatus_last_policy_id
     */
    DDS_QosPolicyId_t last_policy_id;

    /*e \dref_OfferedIncompatibleQosStatus_policies
     */
    struct DDS_QosPolicyCountSeq policies;
};


#define DDS_OfferedIncompatibleQosStatus_INITIALIZER \
        { 0L, 0L,DDS_INVALID_QOS_POLICY_ID, DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedIncompatibleQosStatus_initialize(
    struct DDS_OfferedIncompatibleQosStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedIncompatibleQosStatus_copy(
    struct DDS_OfferedIncompatibleQosStatus *self,
    const struct DDS_OfferedIncompatibleQosStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedIncompatibleQosStatus_finalize(
    struct DDS_OfferedIncompatibleQosStatus *self);

struct DDS_PublicationMatchedStatus {
    /*e \dref_PublicationMatchedStatus_total_count
     */
    DDS_Long total_count;

    /*e \dref_PublicationMatchedStatus_total_count_change
     */
    DDS_Long total_count_change;

    /*e \dref_PublicationMatchedStatus_current_count
     */
    DDS_Long current_count;

    /*e \dref_PublicationMatchedStatus_current_count_peak
     */
    DDS_Long current_count_peak;

    /*e \dref_PublicationMatchedStatus_current_count_change
     */
    DDS_Long current_count_change;

    /*e \dref_PublicationMatchedStatus_last_subscription_handle
     */
    DDS_InstanceHandle_t last_subscription_handle;
};


#define DDS_PublicationMatchedStatus_INITIALIZER \
        { 0L, 0L, 0L, 0L, 0L, DDS_HANDLE_NIL_NATIVE }

extern DDSCDllExport DDS_ReturnCode_t DDS_PublicationMatchedStatus_initialize(
    struct DDS_PublicationMatchedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_PublicationMatchedStatus_copy(
    struct DDS_PublicationMatchedStatus *self,
    const struct DDS_PublicationMatchedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_PublicationMatchedStatus_finalize(
    struct DDS_PublicationMatchedStatus *self);

struct DDS_ServiceRequestAcceptedStatus {
    /*e \dref_ServiceRequestAcceptedStatus_total_count
     */
    DDS_Long total_count;

    /*e \dref_ServiceRequestAcceptedStatus_total_count_change
     */
    DDS_Long total_count_change;
    
    /*e \dref_ServiceRequestAcceptedStatus_current_count */
    DDS_Long current_count;
    
    /*e \dref_ServiceRequestAcceptedStatus_current_count_change */
    DDS_Long current_count_change;

    /*e \dref_ServiceRequestAcceptedStatus_last_request_handle
     */
    DDS_InstanceHandle_t last_request_handle;

    /*e \dref_ServiceRequestAcceptedStatus_service_id
     */
    DDS_Long service_id;
};


#define DDS_ServiceRequestAcceptedStatus_INITIALIZER \
        { 0L, 0L, 0L, 0L, DDS_HANDLE_NIL_NATIVE, PRES_SERVICE_REQUEST_ID_UNKNOWN }

extern DDSCDllExport DDS_ReturnCode_t DDS_ServiceRequestAcceptedStatus_initialize(
    struct DDS_ServiceRequestAcceptedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_ServiceRequestAcceptedStatus_copy(
    struct DDS_ServiceRequestAcceptedStatus *self,
    const struct DDS_ServiceRequestAcceptedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_ServiceRequestAcceptedStatus_finalize(
    struct DDS_ServiceRequestAcceptedStatus *self);

struct DDS_ReliableWriterCacheEventCount {
    /*e \dref_ReliableWriterCacheEventCount_total_count
     */
    DDS_Long total_count;

    /*e \dref_ReliableWriterCacheEventCount_total_count_change
     */
    DDS_Long total_count_change;
};


#define DDS_ReliableWriterCacheEventCount_INITIALIZER        { 0, 0 }

struct DDS_ReliableWriterCacheChangedStatus {
    /*e \dref_ReliableWriterCacheChangedStatus_empty_reliable_writer_cache
     */
    struct DDS_ReliableWriterCacheEventCount empty_reliable_writer_cache;

    /*e \dref_ReliableWriterCacheChangedStatus_full_reliable_writer_cache
     */
    struct DDS_ReliableWriterCacheEventCount full_reliable_writer_cache;

    /*e \dref_ReliableWriterCacheChangedStatus_low_watermark_reliable_writer_cache
     */
    struct DDS_ReliableWriterCacheEventCount
    low_watermark_reliable_writer_cache;

    /*e \dref_ReliableWriterCacheChangedStatus_high_watermark_reliable_writer_cache
     */
    struct DDS_ReliableWriterCacheEventCount
    high_watermark_reliable_writer_cache;

    /*e \dref_ReliableWriterCacheChangedStatus_unacknowledged_sample_count
     */
    DDS_Long unacknowledged_sample_count;

    /*e \dref_ReliableWriterCacheChangedStatus_unacknowledged_sample_count_peak
     */
    DDS_Long unacknowledged_sample_count_peak;
};


#define DDS_ReliableWriterCacheChangedStatus_INITIALIZER \
        { DDS_ReliableWriterCacheEventCount_INITIALIZER,   \
          DDS_ReliableWriterCacheEventCount_INITIALIZER,   \
          DDS_ReliableWriterCacheEventCount_INITIALIZER,   \
          DDS_ReliableWriterCacheEventCount_INITIALIZER,   \
          0L, 0L }

extern DDSCDllExport DDS_ReturnCode_t DDS_ReliableWriterCacheChangedStatus_initialize(
    struct DDS_ReliableWriterCacheChangedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_ReliableWriterCacheChangedStatus_copy(
    struct DDS_ReliableWriterCacheChangedStatus *self,
    const struct DDS_ReliableWriterCacheChangedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_ReliableWriterCacheChangedStatus_finalize(
    struct DDS_ReliableWriterCacheChangedStatus *self);

struct DDS_ReliableReaderActivityChangedStatus {
    /*e \dref_ReliableReaderActivityChangedStatus_active_count
     */                                                     
    DDS_Long active_count;

    /*e \dref_ReliableReaderActivityChangedStatus_inactive_count
     */                                                     
    DDS_Long inactive_count;

    /*e \dref_ReliableReaderActivityChangedStatus_active_count_change
     */                                                     
    DDS_Long active_count_change;

    /*e \dref_ReliableReaderActivityChangedStatus_inactive_count_change
     */                                                     
    DDS_Long inactive_count_change;
    
    /*e \dref_ReliableReaderActivityChangedStatus_last_instance_handle
     */                                                     
    DDS_InstanceHandle_t last_instance_handle;
};


#define DDS_ReliableReaderActivityChangedStatus_INITIALIZER \
        {0, 0, 0, 0,DDS_HANDLE_NIL_NATIVE}

extern DDSCDllExport 
DDS_ReturnCode_t DDS_ReliableReaderActivityChangedStatus_initialize(
    struct DDS_ReliableReaderActivityChangedStatus* self);

extern DDSCDllExport 
DDS_ReturnCode_t DDS_ReliableReaderActivityChangedStatus_copy(
    struct DDS_ReliableReaderActivityChangedStatus *self,
    const struct DDS_ReliableReaderActivityChangedStatus *source);

extern DDSCDllExport 
DDS_ReturnCode_t DDS_ReliableReaderActivityChangedStatus_finalize(
    struct DDS_ReliableReaderActivityChangedStatus *self);

struct DDS_DataWriterCacheStatus {
    /*e \dref_DataWriterCacheStatus_sample_count_peak
     */
    DDS_LongLong sample_count_peak; 
    /*e \dref_DataWriterCacheStatus_sample_count
     */
    DDS_LongLong sample_count;
};

 
#if !defined(RTI_WIN32) && !defined(RTI_WINCE)
#define DDS_DataWriterCacheStatus_INITIALIZER \
                { 0LL, 0LL }
#else
#define DDS_DataWriterCacheStatus_INITIALIZER \
                { 0i64, 0i64 }
#endif

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterCacheStatus_initialize(
    struct DDS_DataWriterCacheStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterCacheStatus_copy(
    struct DDS_DataWriterCacheStatus *self,
    const struct DDS_DataWriterCacheStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterCacheStatus_finalize(
    struct DDS_DataWriterCacheStatus *self);

struct DDS_DataWriterProtocolStatus {
    /*e \dref_DataWriterProtocolStatus_pushed_sample_count
     */
    DDS_LongLong pushed_sample_count;
    /*e \dref_DataWriterProtocolStatus_pushed_sample_count_change
     */
    DDS_LongLong pushed_sample_count_change;
    /*e \dref_DataWriterProtocolStatus_pushed_sample_bytes
     */
    DDS_LongLong pushed_sample_bytes;
    /*e \dref_DataWriterProtocolStatus_pushed_sample_bytes_change
     */
    DDS_LongLong pushed_sample_bytes_change;
    /*i \dref_DataWriterProtocolStatus_filtered_sample_count
     */
    DDS_LongLong filtered_sample_count;
    /*i \dref_DataWriterProtocolStatus_filtered_sample_count_change
     */
    DDS_LongLong filtered_sample_count_change;
    /*i \dref_DataWriterProtocolStatus_filtered_sample_bytes
     */
    DDS_LongLong filtered_sample_bytes;
    /*i \dref_DataWriterProtocolStatus_filtered_sample_bytes_change
     */
    DDS_LongLong filtered_sample_bytes_change;
    /*e \dref_DataWriterProtocolStatus_sent_heartbeat_count
     */
    DDS_LongLong sent_heartbeat_count;
    /*e \dref_DataWriterProtocolStatus_sent_heartbeat_count_change
     */
    DDS_LongLong sent_heartbeat_count_change;
    /*e \dref_DataWriterProtocolStatus_sent_heartbeat_bytes
     */
    DDS_LongLong sent_heartbeat_bytes;
    /*e \dref_DataWriterProtocolStatus_sent_heartbeat_bytes_change
     */
    DDS_LongLong sent_heartbeat_bytes_change;
    /*e \dref_DataWriterProtocolStatus_pulled_sample_count
     */
    DDS_LongLong pulled_sample_count;
    /*e \dref_DataWriterProtocolStatus_pulled_sample_count_change
     */
    DDS_LongLong pulled_sample_count_change;
    /*e \dref_DataWriterProtocolStatus_pulled_sample_bytes
     */
    DDS_LongLong pulled_sample_bytes;
    /*e \dref_DataWriterProtocolStatus_pulled_sample_bytes_change
     */
    DDS_LongLong pulled_sample_bytes_change;
    /*e \dref_DataWriterProtocolStatus_received_ack_count
     */
    DDS_LongLong received_ack_count; /* Not available for matched subscription by locator */
    /*e \dref_DataWriterProtocolStatus_received_ack_count_change
     */
    DDS_LongLong received_ack_count_change; /* Not available for matched subscription by locator */
    /*e \dref_DataWriterProtocolStatus_received_ack_bytes
     */
    DDS_LongLong received_ack_bytes; /* Not available for matched subscription by locator */
    /*e \dref_DataWriterProtocolStatus_received_ack_bytes_change
     */
    DDS_LongLong received_ack_bytes_change; /* Not available for matched subscription by locator */
    /*e \dref_DataWriterProtocolStatus_received_nack_count
     */
    DDS_LongLong received_nack_count; /* Not available for matched subscription by locator */
    /*e \dref_DataWriterProtocolStatus_received_nack_count_change
     */
    DDS_LongLong received_nack_count_change; /* Not available for matched subscription by locator */
    /*e \dref_DataWriterProtocolStatus_received_nack_bytes
     */
    DDS_LongLong received_nack_bytes; /* Not available for matched subscription by locator */
    /*e \dref_DataWriterProtocolStatus_received_nack_bytes_change
     */
    DDS_LongLong received_nack_bytes_change; /* Not available for matched subscription by locator */
    /*e \dref_DataWriterProtocolStatus_sent_gap_count
     */
    DDS_LongLong sent_gap_count;
    /*e \dref_DataWriterProtocolStatus_sent_gap_count_change
     */
    DDS_LongLong sent_gap_count_change;
    /*e \dref_DataWriterProtocolStatus_sent_gap_bytes
     */
    DDS_LongLong sent_gap_bytes;
    /*e \dref_DataWriterProtocolStatus_sent_gap_bytes_change
     */
    DDS_LongLong sent_gap_bytes_change;
    /*e \dref_DataWriterProtocolStatus_rejected_sample_count
     */
    DDS_LongLong rejected_sample_count; /* Only available for local DW status */
    /*e \dref_DataWriterProtocolStatus_rejected_sample_count_change
     */
    DDS_LongLong rejected_sample_count_change; /* Only available for local DW status */

    /*e \dref_DataWriterProtocolStatus_send_window_size
     */
    DDS_Long send_window_size;
    /*e \dref_DataWriterProtocolStatus_first_available_sample_sequence_number
     */
    struct DDS_SequenceNumber_t first_available_sample_sequence_number;
    /*e \dref_DataWriterProtocolStatus_last_available_sample_sequence_number
     */
    struct DDS_SequenceNumber_t last_available_sample_sequence_number;
    /*e \dref_DataWriterProtocolStatus_first_unacknowledged_sample_sequence_number
     */
    struct DDS_SequenceNumber_t first_unacknowledged_sample_sequence_number;
    /*e \dref_DataWriterProtocolStatus_first_available_sample_virtual_sequence_number
     */
    struct DDS_SequenceNumber_t first_available_sample_virtual_sequence_number;
    /*e \dref_DataWriterProtocolStatus_last_available_sample_virtual_sequence_number
     */
    struct DDS_SequenceNumber_t last_available_sample_virtual_sequence_number;
    /*e \dref_DataWriterProtocolStatus_first_unacknowledged_sample_virtual_sequence_number
     */
    struct DDS_SequenceNumber_t first_unacknowledged_sample_virtual_sequence_number;
    /*e \dref_DataWriterProtocolStatus_first_unacknowledged_sample_subscription_handle
     */
    DDS_InstanceHandle_t first_unacknowledged_sample_subscription_handle;
    /*e \dref_DataWriterProtocolStatus_first_unelapsed_keep_duration_sample_sequence_number
     */
    struct DDS_SequenceNumber_t first_unelapsed_keep_duration_sample_sequence_number;
};

 
#if !defined(RTI_WIN32) && !defined(RTI_WINCE)
#define DDS_DataWriterProtocolStatus_INITIALIZER \
                { 0LL, 0LL, 0LL, 0LL, \
                  0LL, 0LL, 0LL, 0LL, \
                  0LL, 0LL, 0LL, 0LL, \
                  0LL, 0LL, 0LL, 0LL, \
                  0LL, 0LL, 0LL, 0LL, \
                  0LL, 0LL, 0LL, 0LL, \
                  0LL, 0LL, 0LL, 0LL, \
                  0LL, 0LL, 0L, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  DDS_HANDLE_NIL_NATIVE, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff} }
#else
#define DDS_DataWriterProtocolStatus_INITIALIZER \
                { 0i64, 0i64, 0i64, 0i64, \
                  0i64, 0i64, 0i64, 0i64, \
                  0i64, 0i64, 0i64, 0i64, \
                  0i64, 0i64, 0i64, 0i64, \
                  0i64, 0i64, 0i64, 0i64, \
                  0i64, 0i64, 0i64, 0i64, \
                  0i64, 0i64, 0i64, 0i64, \
                  0i64, 0i64, 0i64, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
                  DDS_HANDLE_NIL_NATIVE, \
                  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff} }
#endif

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterProtocolStatus_initialize(
    struct DDS_DataWriterProtocolStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterProtocolStatus_copy(
    struct DDS_DataWriterProtocolStatus *self,
    const struct DDS_DataWriterProtocolStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterProtocolStatus_finalize(
    struct DDS_DataWriterProtocolStatus *self);

struct DDS_AcknowledgmentInfo {
    /*e \dref_AcknowledgmentInfo_subscription_handle
     */
    DDS_InstanceHandle_t subscription_handle;

    /*e \dref_AcknowledgmentInfo_sample_identity
     */
    struct DDS_SampleIdentity_t sample_identity;

    /*i \dref_AcknowledgmentInfo_cookie
     */
    struct DDS_Cookie_t cookie;

    /*e \dref_AcknowledgmentInfo_valid_response_data
     */
    DDS_Boolean valid_response_data;

    /*e \dref_AcknowledgmentInfo_response_data
     */
    struct DDS_AckResponseData_t response_data;
};

 
#define DDS_ACKNOWLEDGMENTINFO_DEFAULT { \
    DDS_HANDLE_NIL_NATIVE, \
    DDS_SAMPLEIDENTITY_DEFAULT, \
    DDS_COOKIE_DEFAULT, \
    DDS_BOOLEAN_FALSE, \
    DDS_ACK_RESPONSE_DATA_DEFAULT \
}

struct DDS_DataWriterQos;

extern DDSCDllExport DDS_Boolean DDS_DataWriterQos_equals(
    const struct DDS_DataWriterQos *self,
    const struct DDS_DataWriterQos *other);

struct DDS_DataWriterQos {
    /*e \dref_DataWriterQos_durability
     */
    struct DDS_DurabilityQosPolicy          durability;

    /*e \dref_DataWriterQos_durability_service
     */
    struct DDS_DurabilityServiceQosPolicy   durability_service;

    /*e \dref_DataWriterQos_deadline
     */
    struct DDS_DeadlineQosPolicy            deadline;

    /*e \dref_DataWriterQos_latency_budget
     */
    struct DDS_LatencyBudgetQosPolicy       latency_budget;

    /*e \dref_DataWriterQos_liveliness
     */
    struct DDS_LivelinessQosPolicy          liveliness;

    /*e \dref_DataWriterQos_reliability
     */
    struct DDS_ReliabilityQosPolicy         reliability;

    /*e \dref_DataWriterQos_destination_order
    */                                                     
    struct DDS_DestinationOrderQosPolicy    destination_order;

    /*e \dref_DataWriterQos_history
     */
    struct DDS_HistoryQosPolicy             history;

    /*e \dref_DataWriterQos_resource_limits
     */
    struct DDS_ResourceLimitsQosPolicy      resource_limits;

    /*e \dref_DataWriterQos_transport_priority
     */
    struct DDS_TransportPriorityQosPolicy   transport_priority;

    /*e \dref_DataWriterQos_lifespan
     */
    struct DDS_LifespanQosPolicy            lifespan;

    /*e \dref_DataWriterQos_user_data
     */
    struct DDS_UserDataQosPolicy            user_data;

    /*e \dref_DataWriterQos_ownership
     */
    struct DDS_OwnershipQosPolicy   ownership;

    /*e \dref_DataWriterQos_ownership_strength
     */
    struct DDS_OwnershipStrengthQosPolicy   ownership_strength;

    /*e \dref_DataWriterQos_writer_data_lifecycle
     */
    struct DDS_WriterDataLifecycleQosPolicy writer_data_lifecycle;

    /* --- Extensions: ---------------------------------------------------- */

    /*e \dref_DataWriterQos_writer_resource_limits
     */
    struct DDS_DataWriterResourceLimitsQosPolicy writer_resource_limits;

    /*e \dref_DataWriterQos_protocol
     */
    struct DDS_DataWriterProtocolQosPolicy protocol;
    
    /*e \dref_DataWriterQos_transport_selection
     */    
    struct DDS_TransportSelectionQosPolicy transport_selection;
    
    /*e \dref_DataWriterQos_unicast
     */    
    struct DDS_TransportUnicastQosPolicy unicast;
    
    /*i \dref_DataWriterQos_encapsulation
     */    
    struct DDS_TransportEncapsulationQosPolicy encapsulation;

    /*e \dref_DataWriterQos_publish_mode
     */
    struct DDS_PublishModeQosPolicy publish_mode;

    /*e \dref_DataWriterQos_property
     */
    struct DDS_PropertyQosPolicy property;

    /*e \dref_DataWriterQos_service */
    struct DDS_ServiceQosPolicy service;

    /*e \dref_DataWriterQos_batch
     */
    struct DDS_BatchQosPolicy batch;

    /*e \dref_DataWriterQos_multi_channel
     */
    struct DDS_MultiChannelQosPolicy multi_channel;

    /*e \dref_DataWriterQos_availability */
    struct DDS_AvailabilityQosPolicy availability;

    /*e \dref_DataWriterQos_publication_name
     */
    struct DDS_EntityNameQosPolicy publication_name;

    /*e \dref_DataWriterQos_topic_query_dispatch
     */
    struct DDS_TopicQueryDispatchQosPolicy topic_query_dispatch;

    /* ========================== */
    /* leave type_support at last */
    /* ========================== */

    /*e \dref_DataWriterQos_type_support
     */
    struct DDS_TypeSupportQosPolicy type_support;

#ifdef RTI_CPP
    /*e 
      @brief Compares two DataWriterQos objects for equality
      @see DDS_DataWriterQos_equals
    */ 
    inline bool operator==(const DDS_DataWriterQos& r) const {
        if (DDS_DataWriterQos_equals(this, &r)) {
            return true;
        }

        return false;
    };

    /*e 
      @brief Compares two DataWriterQos objects for inequality
      @see DDS_DataWriterQos_equals
    */ 
    inline bool operator!=(const DDS_DataWriterQos& r) const {
        if (DDS_DataWriterQos_equals(this, &r)) {
            return false;
        }

        return true;
    };
#endif
};

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterQos_initialize(
    struct DDS_DataWriterQos* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterQos_copy(
    struct DDS_DataWriterQos *self,
    const struct DDS_DataWriterQos *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterQos_finalize(
    struct DDS_DataWriterQos *self);


#define DDS_DataWriterQos_INITIALIZER   {        \
    DDS_DURABILITY_QOS_POLICY_DEFAULT,                    \
    DDS_DURABILITY_SERVICE_QOS_POLICY_DEFAULT,            \
    DDS_DEADLINE_QOS_POLICY_DEFAULT,                      \
    DDS_LATENCY_BUDGET_QOS_POLICY_DEFAULT,                \
    DDS_LIVELINESS_QOS_POLICY_DEFAULT,                    \
    { DDS_RELIABLE_RELIABILITY_QOS, \
      DDS_RELIABILITY_QOS_POLICY_MAX_BLOCKING_TIME_DEFAULT, \
      DDS_PROTOCOL_ACKNOWLEDGMENT_MODE},                  \
    { DDS_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,    \
      DDS_INSTANCE_SCOPE_DESTINATIONORDER_QOS,            \
      {0, 100000000} /* 100ms */ },                       \
    DDS_HISTORY_QOS_POLICY_DEFAULT,                       \
    DDS_RESOURCE_LIMITS_QOS_POLICY_DEFAULT,               \
    DDS_TRANSPORT_PRIORITY_QOS_POLICY_DEFAULT,            \
    DDS_LIFESPAN_QOS_POLICY_DEFAULT,                      \
    DDS_USER_DATA_QOS_POLICY_DEFAULT,                     \
    DDS_OWNERSHIP_QOS_POLICY_DEFAULT,                     \
    DDS_OWNERSHIP_STRENGTH_QOS_POLICY_DEFAULT,            \
    DDS_WRITER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT,         \
    DDS_DATA_WRITER_RESOURCE_LIMITS_QOS_POLICY_DEFAULT,   \
    DDS_DATA_WRITER_PROTOCOL_QOS_POLICY_DEFAULT,          \
    DDS_TRANSPORT_SELECTION_QOS_POLICY_DEFAULT,           \
    DDS_TRANSPORT_UNICAST_QOS_POLICY_DEFAULT,             \
    DDS_TRANSPORT_ENCAPSULATION_QOS_POLICY_DEFAULT,       \
    DDS_PUBLISH_MODE_QOS_POLICY_DEFAULT,                  \
    DDS_PROPERTY_QOS_POLICY_DEFAULT,                      \
    DDS_SERVICE_QOS_POLICY_DEFAULT,                       \
    DDS_BATCH_QOS_POLICY_DEFAULT,                         \
    DDS_MULTICHANNEL_QOS_POLICY_DEFAULT,                  \
    DDS_AVAILABILITY_QOS_POLICY_DEFAULT,                  \
    DDS_ENTITY_NAME_QOS_POLICY_DEFAULT,                   \
    DDS_TOPIC_QUERY_DISPATCH_QOS_POLICY_DEFAULT,          \
    DDS_TYPESUPPORT_QOS_POLICY_DEFAULT			  \
}

extern DDSCDllExport
void DDS_DataWriterQos_save(const struct DDS_DataWriterQos* self,
                            const struct DDS_DataWriterQos* base, 
                            struct RTIXMLSaveContext* dst);

struct DDS_PublisherQos;

extern DDSCDllExport DDS_Boolean DDS_PublisherQos_equals(
    const struct DDS_PublisherQos *self,
    const struct DDS_PublisherQos *other);

struct DDS_PublisherQos {

    /*e \dref_PublisherQos_presentation
     */
    struct DDS_PresentationQosPolicy    presentation;

    /*e \dref_PublisherQos_partition
     */
    struct DDS_PartitionQosPolicy       partition;

    /*e \dref_PublisherQos_group_data
     */
    struct DDS_GroupDataQosPolicy       group_data;

    /*e \dref_PublisherQos_entity_factory
     */
    struct DDS_EntityFactoryQosPolicy   entity_factory;

    /* --- Extensions: ---------------------------------------------------- */

    /*e \dref_PublisherQos_asynchronous_publisher
     */
    struct DDS_AsynchronousPublisherQosPolicy asynchronous_publisher;

    /*e \dref_PublisherQos_exclusive_area
     */
    struct DDS_ExclusiveAreaQosPolicy  exclusive_area;

    /*i \dref_PublisherQos_protocol
     */
    struct DDS_PublisherProtocolQosPolicy protocol;
    
    /*e \dref_PublisherQos_publisher_name
     */
    struct DDS_EntityNameQosPolicy publisher_name;

#ifdef RTI_CPP
    /*e 
      @brief Compares two PublisherQos objects for equality
      @see DDS_PublisherQos_equals
    */ 
    inline bool operator==(const DDS_PublisherQos& r) const {
        if (DDS_PublisherQos_equals(this, &r)) {
            return true;
        }

        return false;
    };

    /*e 
      @brief Compares two PublisherQos objects for inequality
      @see DDS_PublisherQos_equals
    */ 
    inline bool operator!=(const DDS_PublisherQos& r) const {
        if (DDS_PublisherQos_equals(this, &r)) {
            return false;
        }

        return true;
    };
#endif
};

extern DDSCDllExport DDS_ReturnCode_t DDS_PublisherQos_initialize(
    struct DDS_PublisherQos* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_PublisherQos_copy(
    struct DDS_PublisherQos *self,
    const struct DDS_PublisherQos *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_PublisherQos_finalize(
    struct DDS_PublisherQos *self);


#define DDS_PublisherQos_INITIALIZER   { \
    DDS_PRESENTATION_QOS_POLICY_DEFAULT,    \
    DDS_PARTITION_QOS_POLICY_DEFAULT,       \
    DDS_GROUP_DATA_QOS_POLICY_DEFAULT,      \
    DDS_ENTITY_FACTORY_QOS_POLICY_DEFAULT,  \
    DDS_ASYNCHRONOUS_PUBLISHER_QOS_POLICY_DEFAULT, \
    DDS_EXCLUSIVE_AREA_QOS_POLICY_DEFAULT, \
    DDS_PUBLISHER_PROTOCOL_QOS_POLICY_DEFAULT, \
    DDS_ENTITY_NAME_QOS_POLICY_DEFAULT \
}

extern DDSCDllExport
void DDS_PublisherQos_save(const struct DDS_PublisherQos* self,
                           const struct DDS_PublisherQos* base, 
                           struct RTIXMLSaveContext* dst);

typedef DDS_DataWriter* DDS_DataWriter_ptr;


DDS_SEQUENCE(DDS_DataWriterSeq, DDS_DataWriter_ptr);

typedef void (*DDS_DataWriterListener_OfferedDeadlineMissedCallback)(
            void* listener_data,
            DDS_DataWriter* writer,
            const struct DDS_OfferedDeadlineMissedStatus* status);

typedef void (*DDS_DataWriterListener_LivelinessLostCallback)(
            void* listener_data,
            DDS_DataWriter* writer,
            const struct DDS_LivelinessLostStatus* status);

typedef void (*DDS_DataWriterListener_OfferedIncompatibleQosCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const struct DDS_OfferedIncompatibleQosStatus* status);

typedef void (*DDS_DataWriterListener_PublicationMatchedCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const struct DDS_PublicationMatchedStatus* status);

typedef void (*DDS_DataWriterListener_ReliableWriterCacheChangedCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const struct DDS_ReliableWriterCacheChangedStatus* status);

typedef void (*DDS_DataWriterListener_ReliableReaderActivityChangedCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const struct DDS_ReliableReaderActivityChangedStatus* status);

typedef void (*DDS_DataWriterListener_DestinationUnreachableCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const DDS_InstanceHandle_t* handle, 
            const struct DDS_Locator_t* destination);

typedef void* (*DDS_DataWriterListener_DataRequestCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const struct DDS_Cookie_t* cookie);

typedef void (*DDS_DataWriterListener_DataReturnCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            void* instance_data,
            const struct DDS_Cookie_t* cookie);

typedef void (*DDS_DataWriterListener_SampleRemovedCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const struct DDS_Cookie_t* cookie);

typedef void (*DDS_DataWriterListener_InstanceReplacedCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const DDS_InstanceHandle_t* handle);

typedef void (*DDS_DataWriterListener_OnApplicationAcknowledgmentCallback)(
    void *listener_data, 
    DDS_DataWriter *writer, 
    const struct DDS_AcknowledgmentInfo *info);

typedef void (*DDS_DataWriterListener_ServiceRequestAcceptedCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const struct DDS_ServiceRequestAcceptedStatus* status);

struct DDS_DataWriterListener {
    /*ce \dref_DataWriterListener_as_listener
     */
    struct DDS_Listener as_listener;
    
    /*ce \dref_DataWriterListener_on_offered_deadline_missed
     */
    DDS_DataWriterListener_OfferedDeadlineMissedCallback
        on_offered_deadline_missed;
    
    /*ce \dref_DataWriterListener_on_offered_incompatible_qos
     */
    DDS_DataWriterListener_OfferedIncompatibleQosCallback
        on_offered_incompatible_qos;

    /*ce \dref_DataWriterListener_on_liveliness_lost
     */
    DDS_DataWriterListener_LivelinessLostCallback on_liveliness_lost;

    /*ce \dref_DataWriterListener_on_publication_matched
     */
    DDS_DataWriterListener_PublicationMatchedCallback on_publication_matched;
    
    /*ce \dref_DataWriterListener_on_reliable_writer_cache_changed
     */
    DDS_DataWriterListener_ReliableWriterCacheChangedCallback
        on_reliable_writer_cache_changed;
    
    /*ce \dref_DataWriterListener_on_reliable_reader_activity_changed
     */
    DDS_DataWriterListener_ReliableReaderActivityChangedCallback
        on_reliable_reader_activity_changed;

    /*ci \dref_DataWriterListener_on_destination_unreachable
     */
    DDS_DataWriterListener_DestinationUnreachableCallback 
        on_destination_unreachable;

    /*ci \dref_DataWriterListener_on_data_request
     */
    DDS_DataWriterListener_DataRequestCallback on_data_request;

    /*ci \dref_DataWriterListener_on_data_return
     */
    DDS_DataWriterListener_DataReturnCallback on_data_return;

    /*ci \dref_DataWriterListener_on_sample_removed
     */
    DDS_DataWriterListener_SampleRemovedCallback on_sample_removed;

    /*ce \dref_DataWriterListener_on_instance_replaced
     */
    DDS_DataWriterListener_InstanceReplacedCallback on_instance_replaced;

    /*ce \dref_DataWriterListener_on_application_acknowledgment
     */
    DDS_DataWriterListener_OnApplicationAcknowledgmentCallback on_application_acknowledgment;

    /*ce \dref_DataWriterListener_on_service_request_accepted
     */
    DDS_DataWriterListener_ServiceRequestAcceptedCallback on_service_request_accepted;
};


#define DDS_DataWriterListener_INITIALIZER  { \
  DDS_Listener_INITIALIZER, \
  (DDS_DataWriterListener_OfferedDeadlineMissedCallback)NULL, \
  (DDS_DataWriterListener_OfferedIncompatibleQosCallback)NULL, \
  (DDS_DataWriterListener_LivelinessLostCallback)NULL, \
  (DDS_DataWriterListener_PublicationMatchedCallback)NULL, \
  (DDS_DataWriterListener_ReliableWriterCacheChangedCallback)NULL, \
  (DDS_DataWriterListener_ReliableReaderActivityChangedCallback)NULL, \
  (DDS_DataWriterListener_DestinationUnreachableCallback)NULL, \
  (DDS_DataWriterListener_DataRequestCallback)NULL, \
  (DDS_DataWriterListener_DataReturnCallback)NULL, \
  (DDS_DataWriterListener_SampleRemovedCallback)NULL, \
  (DDS_DataWriterListener_InstanceReplacedCallback)NULL, \
  (DDS_DataWriterListener_OnApplicationAcknowledgmentCallback)NULL, \
  (DDS_DataWriterListener_ServiceRequestAcceptedCallback)NULL \
}

struct DDS_PublisherListener {
    /*ce \dref_PublisherListener_as_datawriterlistener
     */
    struct DDS_DataWriterListener as_datawriterlistener;
};


#define DDS_PublisherListener_INITIALIZER   { \
    DDS_DataWriterListener_INITIALIZER }

 extern DDSCDllVariable const struct DDS_DataWriterQos
DDS_DATAWRITER_QOS_DEFAULT;

 extern DDSCDllVariable const struct DDS_DataWriterQos
DDS_DATAWRITER_QOS_USE_TOPIC_QOS;


#define DDS_Publisher_as_entity(publisherPtr) \
            ((DDS_Entity*) publisherPtr)

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_get_default_datawriter_qos(
    DDS_Publisher* self,
    struct DDS_DataWriterQos* qos);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_Publisher_get_default_datawriter_qos_w_topic_name(
    DDS_Publisher* self,
    struct DDS_DataWriterQos* qos,
    const char* topic_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_set_default_datawriter_qos(
    DDS_Publisher* self,
    const struct DDS_DataWriterQos* qos);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_Publisher_set_default_datawriter_qos_with_profile(
    DDS_Publisher* self,
    const char *library_name, const char * profile_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_set_default_profile(
    DDS_Publisher* self,
    const char* library_name,
    const char* profile_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_set_default_library(
    DDS_Publisher* self,const char* library_name);

extern DDSCDllExport DDS_DataWriter* DDS_Publisher_create_datawriter(
    DDS_Publisher* self,
    DDS_Topic* topic,
    const struct DDS_DataWriterQos* qos,
    const struct DDS_DataWriterListener* listener,
    DDS_StatusMask mask);

extern DDSCDllExport DDS_DataWriter* DDS_Publisher_create_datawriter_with_profile(
    DDS_Publisher* self,
    DDS_Topic* topic,
    const char* library_name,
    const char* profile_name,
    const struct DDS_DataWriterListener* listener,
    DDS_StatusMask mask);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_create_datawriters_from_config(
    DDS_Publisher * self,
    struct DDS_DataWriterSeq * writers,
    const char * configuration_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_delete_datawriter(
    DDS_Publisher* self,
    DDS_DataWriter* a_datawriter);

extern DDSCDllExport DDS_DataWriter* DDS_Publisher_lookup_datawriter(
    DDS_Publisher* self,
    const char* topic_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_suspend_publications(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_resume_publications(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_begin_coherent_changes(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_end_coherent_changes(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_get_all_datawriters(
    DDS_Publisher* self,
    struct DDS_DataWriterSeq* writers);

extern DDSCDllExport DDS_DomainParticipant* DDS_Publisher_get_participant(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_delete_contained_entities(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_copy_from_topic_qos(
    DDS_Publisher* self,
    struct DDS_DataWriterQos* a_datawriter_qos,
    const struct DDS_TopicQos* a_topic_qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_set_qos(
    DDS_Publisher* self,
    const struct DDS_PublisherQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_set_qos_with_profile(
    DDS_Publisher* self,
    const char* library_name,
    const char* profile_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_get_qos(DDS_Publisher* self,
    struct DDS_PublisherQos* qos);

extern DDSCDllExport const char *DDS_Publisher_get_default_library(
                                        DDS_Publisher *self);

extern DDSCDllExport const char *DDS_Publisher_get_default_profile(
                                        DDS_Publisher *self);

extern DDSCDllExport const char * DDS_Publisher_get_default_profile_library(
    DDS_Publisher *self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_set_listener(
    DDS_Publisher* self,
    const struct DDS_PublisherListener* l, DDS_StatusMask mask);

extern DDSCDllExport struct DDS_PublisherListener DDS_Publisher_get_listener(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_get_listenerX(
    DDS_Publisher* self, struct DDS_PublisherListener* listener);

extern DDSCDllExport DDS_ReturnCode_t
DDS_Publisher_get_builtin_topic_key(const DDS_Publisher* self,
                      DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_wait_for_acknowledgments(
    DDS_Publisher* self, const struct DDS_Duration_t* max_wait);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_wait_for_asynchronous_publishing(
    DDS_Publisher* self, const struct DDS_Duration_t* max_wait);

extern DDSCDllExport DDS_DataWriter* DDS_Publisher_lookup_datawriter_by_builtin_topic_key(
    DDS_Publisher* self,
    DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport 
DDS_DataWriter* DDS_Publisher_lookup_datawriter_by_name(
        DDS_Publisher* self,
        const char* datawriter_name);


#define DDS_DataWriter_as_entity(dataWriterPtr) \
            ((DDS_Entity*) dataWriterPtr)

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_assert_liveliness(
    DDS_DataWriter* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_get_matched_subscription_locators(
    DDS_DataWriter* self, struct DDS_LocatorSeq* locators);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_get_matched_subscriptions(
    DDS_DataWriter* self, struct DDS_InstanceHandleSeq* subscription_handles);

struct DDS_SubscriptionBuiltinTopicData;

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_get_matched_subscription_data(
    DDS_DataWriter* self,
    struct DDS_SubscriptionBuiltinTopicData* subscription_data,
    const DDS_InstanceHandle_t* subscription_handle);

struct DDS_ParticipantBuiltinTopicData;

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_get_matched_subscription_participant_data(
    DDS_DataWriter* self,
    struct DDS_ParticipantBuiltinTopicData* participant_data,
    const DDS_InstanceHandle_t* subscription_handle);

extern DDSCDllExport DDS_Topic* DDS_DataWriter_get_topic(
    DDS_DataWriter* self);

extern DDSCDllExport DDS_Publisher* DDS_DataWriter_get_publisher(
    DDS_DataWriter* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_wait_for_acknowledgments(
    DDS_DataWriter* self, const struct DDS_Duration_t* max_wait);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_wait_for_sample_acknowledgment(
    DDS_DataWriter* self,
    const struct DDS_SampleIdentity_t * identity,
    const struct DDS_Duration_t* max_wait);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_is_sample_app_acknowledged(
    DDS_DataWriter* self,
    DDS_Boolean * is_app_ack,
    const struct DDS_SampleIdentity_t * identity);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_wait_for_asynchronous_publishing(
    DDS_DataWriter* self, const struct DDS_Duration_t* max_wait);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_liveliness_lost_status(
    DDS_DataWriter* self,
    struct DDS_LivelinessLostStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_offered_deadline_missed_status(
    DDS_DataWriter* self,
    struct DDS_OfferedDeadlineMissedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_offered_incompatible_qos_status(
    DDS_DataWriter* self,
    struct DDS_OfferedIncompatibleQosStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_publication_matched_status(
    DDS_DataWriter* self,
    struct DDS_PublicationMatchedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_get_reliable_writer_cache_changed_status(
    DDS_DataWriter* self,
    struct DDS_ReliableWriterCacheChangedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_get_reliable_reader_activity_changed_status(
    DDS_DataWriter* self,
    struct DDS_ReliableReaderActivityChangedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_datawriter_cache_status(
    DDS_DataWriter* self,
    struct DDS_DataWriterCacheStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_datawriter_protocol_status(
    DDS_DataWriter* self,
    struct DDS_DataWriterProtocolStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_matched_subscription_datawriter_protocol_status(
    DDS_DataWriter* self,
    struct DDS_DataWriterProtocolStatus* status,
    const DDS_InstanceHandle_t* subscription_handle);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_matched_subscription_datawriter_protocol_status_by_locator(
    DDS_DataWriter* self,
    struct DDS_DataWriterProtocolStatus* status,
    const struct DDS_Locator_t* locator);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_service_request_accepted_status(
    DDS_DataWriter* self,
    struct DDS_ServiceRequestAcceptedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_liveliness_lost_status_ex(
    DDS_DataWriter* self,
    struct DDS_LivelinessLostStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_offered_deadline_missed_status_ex(
    DDS_DataWriter* self,
    struct DDS_OfferedDeadlineMissedStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_offered_incompatible_qos_status_ex(
    DDS_DataWriter* self,
    struct DDS_OfferedIncompatibleQosStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_publication_matched_status_ex(
    DDS_DataWriter* self,
    struct DDS_PublicationMatchedStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_get_reliable_writer_cache_changed_status_ex(
    DDS_DataWriter* self,
    struct DDS_ReliableWriterCacheChangedStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_get_reliable_reader_activity_changed_status_ex(
    DDS_DataWriter* self,
    struct DDS_ReliableReaderActivityChangedStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_datawriter_cache_status_ex(
    DDS_DataWriter* self,
    struct DDS_DataWriterCacheStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_datawriter_protocol_status_ex(
    DDS_DataWriter* self,
    struct DDS_DataWriterProtocolStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_matched_subscription_datawriter_protocol_status_ex(
    DDS_DataWriter* self,
    struct DDS_DataWriterProtocolStatus* status,
    const DDS_InstanceHandle_t* subscription_handle,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_matched_subscription_datawriter_protocol_status_by_locator_ex(
    DDS_DataWriter* self,
    struct DDS_DataWriterProtocolStatus* status,
    const struct DDS_Locator_t* locator,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_service_request_accepted_status_ex(
    DDS_DataWriter* self,
    struct DDS_ServiceRequestAcceptedStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_liveliness_lost_statusT(
    DDS_DataWriter* self,
    const struct DDS_LivelinessLostStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_offered_deadline_missed_statusT(
    DDS_DataWriter* self,
    const struct DDS_OfferedDeadlineMissedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_offered_incompatible_qos_statusT(
    DDS_DataWriter* self,
    const struct DDS_OfferedIncompatibleQosStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_publication_matched_statusT(
    DDS_DataWriter* self,
    const struct DDS_PublicationMatchedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_set_reliable_writer_cache_changed_statusT(
    DDS_DataWriter* self,
    const struct DDS_ReliableWriterCacheChangedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_set_reliable_reader_activity_changed_statusT(
    DDS_DataWriter* self,
    const struct DDS_ReliableReaderActivityChangedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_datawriter_cache_statusT(
    DDS_DataWriter* self,
    const struct DDS_DataWriterCacheStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_datawriter_protocol_statusT(
    DDS_DataWriter* self,
    const struct DDS_DataWriterProtocolStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_matched_subscription_datawriter_protocol_statusT(
    DDS_DataWriter* self,
    const struct DDS_DataWriterProtocolStatus* status,
    const DDS_InstanceHandle_t* subscription_handle);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_matched_subscription_datawriter_protocol_status_by_locatorT(
    DDS_DataWriter* self,
    const struct DDS_DataWriterProtocolStatus* status,
    const struct DDS_Locator_t* locator);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_service_request_accepted_statusT(
    DDS_DataWriter* self,
    const struct DDS_ServiceRequestAcceptedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_set_qos(
    DDS_DataWriter* self,
    const struct DDS_DataWriterQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_set_qos_with_profile(
    DDS_DataWriter* self,
    const char* library_name,
    const char* profile_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_get_qos(
    DDS_DataWriter* self,
    struct DDS_DataWriterQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_set_listener(
    DDS_DataWriter* self,
    const struct DDS_DataWriterListener* l, DDS_StatusMask mask);

extern DDSCDllExport struct DDS_DataWriterListener DDS_DataWriter_get_listener(
    DDS_DataWriter* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_get_listenerX(
    DDS_DataWriter* self, struct DDS_DataWriterListener* listener);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_get_builtin_topic_key(const DDS_DataWriter* self,
                                     DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_Boolean
DDS_DataWriter_is_keyed(DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_flush(DDS_DataWriter* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_call_listenerT(
    DDS_DataWriter* self, DDS_StatusMask mask);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_set_durable_subscription_infoI(
    DDS_DataWriter* self,
    const struct NDDS_WriterHistory_DurableSubscription * dur_sub);

extern DDSCDllExport
const struct NDDS_WriterHistory_DurableSubscription * 
    DDS_DataWriter_get_durable_subscription_infoI(
        DDS_DataWriter* self,
        const char * dur_sub_name);


#ifdef __cplusplus
    }   /* extern "C" */
#endif

#endif /* dds_c_publication_h */
