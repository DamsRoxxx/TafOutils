/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)dds_c_registry.h    generated by: makeheader    Fri Feb 16 13:51:59 2018
 *
 *		built from:	registry.ifc
 */

#ifndef dds_c_registry_h
#define dds_c_registry_h


#ifndef dds_c_infrastructure_h
	#include "dds_c/dds_c_infrastructure.h"
#endif
#ifndef reda_inlineList_h
	#include "reda/reda_inlineList.h"
#endif

#ifdef __cplusplus
    extern "C" {
#endif

typedef void *DDS_RegistryValue;

typedef
void (*DDS_RegistryDeleteValueFnc)(
	const char *name,
	DDS_RegistryValue value,
	void *deleteValueFncParameter);

typedef
DDS_RegistryValue (*DDS_RegistryCreateValueFnc)(
	const char *name,
        void *createValueFncParameter);

typedef enum {
	DDS_REGISTRY_RETURN_CODE_ERROR,
	DDS_REGISTRY_RETURN_CODE_SUCCESS,
	DDS_REGISTRY_RETURN_CODE_NOT_FOUND
} DDS_RegistryReturnCode;

struct DDS_RegistryRecord {
	struct REDAInlineListNode _node;
	/* The key */
	const char *name;
	/* An opaque pointer for storage */
	DDS_RegistryValue value;
	/* A reference count to this record */	
	unsigned int referenceCount;
	/* The free function associated with this record */
	DDS_RegistryDeleteValueFnc deleteValueFnc;
	/* The parameter associated with the free function */
	void *deleteValueFncParameter;
};

struct DDS_RegistryConfiguration {
	/* The maximum length of the name string */
	unsigned int nameMaxLength;
        /* Flag for whether to use explicit locking */
	RTIBool multiThreadedAccess;
	/* Pool property for record pool */
	struct REDAFastBufferPoolProperty recordPoolProperty;
	/* Semaphore property */
	struct RTIOsapiSemaphoreProperty mutexProperty;
};


#define DDS_REGISTRY_CONFIGURATION_DEFAULT { 		\
    128,	/* nameMaxLength */			\
    RTI_TRUE,	/* multiThreadedAccess */		\
    REDA_FAST_BUFFER_POOL_PROPERTY_DEFAULT, /* recordPoolProperty */ \
    RTI_OSAPI_SEMAPHORE_PROPERTY_DEFAULT /* mutexProperty */ \
}

struct DDS_Registry {
	/* The list used to store the records */
	struct REDAInlineList *_list;
	/* The configuration parameters for this service instance */
	struct DDS_RegistryConfiguration _config;
	/* The fast buffer pool used for the records */
	struct REDAFastBufferPool *_recordPool;
	/* The mutex used to protect the table */
	struct RTIOsapiSemaphore *_mutex;
};

extern DDSCDllExport
struct DDS_Registry *
DDS_Registry_new(
	DDS_RegistryReturnCode *retCode, /* out */
	struct DDS_RegistryConfiguration *config);

extern DDSCDllExport
DDS_RegistryReturnCode
DDS_Registry_delete(
	struct DDS_Registry *registry);

extern DDSCDllExport
DDS_RegistryValue
DDS_Registry_findRecord(
	DDS_RegistryReturnCode *retCode, /* out */
	struct DDS_Registry *registry,
	const char *name);

extern DDSCDllExport
DDS_RegistryValue
DDS_Registry_assertRecord(
	DDS_RegistryReturnCode *retCode, /* out */
	struct DDS_Registry *registry,
	const char *name, 
	DDS_RegistryCreateValueFnc createValueFnc,
	void *createValueFncParameter,
	DDS_RegistryDeleteValueFnc deleteValueFnc,
	void *deleteValueFncParameter);

extern DDSCDllExport
DDS_RegistryReturnCode
DDS_Registry_releaseRecord(
	struct DDS_Registry *registry,
	const char *name);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* dds_c_registry_h */
