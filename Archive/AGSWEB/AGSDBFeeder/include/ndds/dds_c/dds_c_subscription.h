/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)dds_c_subscription.h    generated by: makeheader    Fri Feb 16 13:51:58 2018
 *
 *		built from:	subscription.ifc
 */

#ifndef dds_c_subscription_h
#define dds_c_subscription_h



  #ifndef dds_c_sequence_h
     #include "dds_c/dds_c_sequence.h"
  #endif

  #ifndef dds_c_topic_h
     #include "dds_c/dds_c_topic.h"
  #endif

  #ifndef dds_c_dll_h
     #include "dds_c/dds_c_dll.h"
  #endif

  #ifndef dds_c_publication_h
     #include "dds_c/dds_c_publication.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

typedef struct DDS_DataReaderImpl DDS_DataReader;

typedef struct DDS_SubscriberImpl DDS_Subscriber;

typedef DDS_Subscriber* DDS_Subscriber_ptr;


DDS_SEQUENCE(DDS_SubscriberSeq, DDS_Subscriber_ptr);

struct DDS_RequestedDeadlineMissedStatus {

    /*e \dref_RequestedDeadlineMissedStatus_total_count
     */                                                     
    DDS_Long total_count;

    /*e \dref_RequestedDeadlineMissedStatus_total_count_change
     */                                                     
    DDS_Long total_count_change;

    /*e \dref_RequestedDeadlineMissedStatus_last_instance_handle
     */                                                     
    DDS_InstanceHandle_t last_instance_handle;
};


#define DDS_RequestedDeadlineMissedStatus_INITIALIZER \
        { 0L, 0L, DDS_HANDLE_NIL_NATIVE }

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedDeadlineMissedStatus_initialize(
    struct DDS_RequestedDeadlineMissedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedDeadlineMissedStatus_copy(
    struct DDS_RequestedDeadlineMissedStatus *self,
    const struct DDS_RequestedDeadlineMissedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedDeadlineMissedStatus_finalize(
    struct DDS_RequestedDeadlineMissedStatus *self);

struct DDS_LivelinessChangedStatus {

    /*e \dref_LivelinessChangedStatus_alive_count
     */                                                     
    DDS_Long alive_count;

    /*e \dref_LivelinessChangedStatus_not_alive_count
     */                                                     
    DDS_Long not_alive_count;

    /*e \dref_LivelinessChangedStatus_alive_count_change
     */                                                     
    DDS_Long alive_count_change;

    /*e \dref_LivelinessChangedStatus_not_alive_count_change
     */
    DDS_Long not_alive_count_change;
    
    /*e \dref_LivelinessChangedStatus_last_publication_handle
     */
    DDS_InstanceHandle_t last_publication_handle;
};


#define DDS_LivelinessChangedStatus_INITIALIZER { 0L, 0L, 0L, 0L, \
    DDS_HANDLE_NIL_NATIVE }

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessChangedStatus_initialize(
    struct DDS_LivelinessChangedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessChangedStatus_copy(
    struct DDS_LivelinessChangedStatus *self,
    const struct DDS_LivelinessChangedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessChangedStatus_finalize(
    struct DDS_LivelinessChangedStatus *self);

struct DDS_RequestedIncompatibleQosStatus {
    /*e \dref_RequestedIncompatibleQosStatus_total_count
	 */
    DDS_Long total_count;

    /*e \dref_RequestedIncompatibleQosStatus_total_count_change
     */                                                     
    DDS_Long total_count_change;

    /*e \dref_RequestedIncompatibleQosStatus_last_policy_id
     */                                                     
    DDS_QosPolicyId_t last_policy_id;

    /*e \dref_RequestedIncompatibleQosStatus_policies
     */                                                     
    struct DDS_QosPolicyCountSeq policies;
};


#define DDS_RequestedIncompatibleQosStatus_INITIALIZER \
        { 0L, 0L, DDS_INVALID_QOS_POLICY_ID, DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedIncompatibleQosStatus_initialize(
    struct DDS_RequestedIncompatibleQosStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedIncompatibleQosStatus_copy(
    struct DDS_RequestedIncompatibleQosStatus *self,
    const struct DDS_RequestedIncompatibleQosStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedIncompatibleQosStatus_finalize(
    struct DDS_RequestedIncompatibleQosStatus *self);

typedef enum {
    /*e \dref_SampleLostStatusKind_NOT_LOST
     */                                                     
    DDS_NOT_LOST,

    /*e \dref_SampleLostStatusKind_LOST_BY_WRITER
    */
    DDS_LOST_BY_WRITER,

    /*e \dref_SampleLostStatusKind_LOST_BY_INSTANCES_LIMIT
     */                                                     
    DDS_LOST_BY_INSTANCES_LIMIT,

    /*e \dref_SampleLostStatusKind_LOST_BY_REMOTE_WRITERS_PER_INSTANCE_LIMIT
    */
    DDS_LOST_BY_REMOTE_WRITERS_PER_INSTANCE_LIMIT,

    /*e \dref_SampleLostStatusKind_LOST_BY_INCOMPLETE_COHERENT_SET
    */
    DDS_LOST_BY_INCOMPLETE_COHERENT_SET,

    /*e \dref_SampleLostStatusKind_LOST_BY_LARGE_COHERENT_SET
    */
    DDS_LOST_BY_LARGE_COHERENT_SET,

    /*e \dref_SampleLostStatusKind_LOST_BY_SAMPLES_PER_REMOTE_WRITER_LIMIT
    */
    DDS_LOST_BY_SAMPLES_PER_REMOTE_WRITER_LIMIT,

    /*e \dref_SampleLostStatusKind_LOST_BY_VIRTUAL_WRITERS_LIMIT
    */
    DDS_LOST_BY_VIRTUAL_WRITERS_LIMIT,

    /*e \dref_SampleLostStatusKind_LOST_BY_REMOTE_WRITERS_PER_SAMPLE_LIMIT
    */
    DDS_LOST_BY_REMOTE_WRITERS_PER_SAMPLE_LIMIT,

    /*e \dref_SampleLostStatusKind_LOST_BY_AVAILABILITY_WAITING_TIME
    */
    DDS_LOST_BY_AVAILABILITY_WAITING_TIME,

    /*e \dref_SampleLostStatusKind_LOST_BY_REMOTE_WRITER_SAMPLES_PER_VIRTUAL_QUEUE_LIMIT
    */
    DDS_LOST_BY_REMOTE_WRITER_SAMPLES_PER_VIRTUAL_QUEUE_LIMIT,

    /*e \dref_SampleLostStatusKind_LOST_BY_OUT_OF_MEMORY
    */
    DDS_LOST_BY_OUT_OF_MEMORY
} DDS_SampleLostStatusKind;

struct DDS_SampleLostStatus {
    /*e  \dref_SampleLostStatus_total_count
     */                                                     
    DDS_Long total_count;

    /*e  \dref_SampleLostStatus_total_count_change
     */                                                     
    DDS_Long total_count_change;

    /*e \dref_SampleLostStatus_last_reason
     */                                                     
    DDS_SampleLostStatusKind last_reason;
};


#define DDS_SampleLostStatus_INITIALIZER { 0L, 0L, DDS_NOT_LOST }

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleLostStatus_initialize(
    struct DDS_SampleLostStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleLostStatus_copy(
    struct DDS_SampleLostStatus *self,
    const struct DDS_SampleLostStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleLostStatus_finalize(
    struct DDS_SampleLostStatus *self);

typedef enum {

    /*e \dref_SampleRejectedStatusKind_NOT_REJECTED
     */                                                     
    DDS_NOT_REJECTED,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_INSTANCES_LIMIT
     */                                                     
    DDS_REJECTED_BY_INSTANCES_LIMIT,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_SAMPLES_LIMIT
     */                                                     
    DDS_REJECTED_BY_SAMPLES_LIMIT,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT
     */                                                     
    DDS_REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_REMOTE_WRITERS_LIMIT
     */
    DDS_REJECTED_BY_REMOTE_WRITERS_LIMIT,
    
    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_REMOTE_WRITERS_PER_INSTANCE_LIMIT
     */
    DDS_REJECTED_BY_REMOTE_WRITERS_PER_INSTANCE_LIMIT,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_SAMPLES_PER_REMOTE_WRITER_LIMIT
     */
    DDS_REJECTED_BY_SAMPLES_PER_REMOTE_WRITER_LIMIT,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_VIRTUAL_WRITERS_LIMIT
    */
    DDS_REJECTED_BY_VIRTUAL_WRITERS_LIMIT,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_REMOTE_WRITERS_PER_SAMPLE_LIMIT
    */
    DDS_REJECTED_BY_REMOTE_WRITERS_PER_SAMPLE_LIMIT,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_REMOTE_WRITER_SAMPLES_PER_VIRTUAL_QUEUE_LIMIT
    */
    DDS_REJECTED_BY_REMOTE_WRITER_SAMPLES_PER_VIRTUAL_QUEUE_LIMIT
} DDS_SampleRejectedStatusKind;


#define DDS_REJECTED_BY_INSTANCE_LIMIT DDS_REJECTED_BY_INSTANCES_LIMIT

struct DDS_SampleRejectedStatus {

    /*e \dref_SampleRejectedStatus_total_count
     */                                                     
    DDS_Long total_count;

    /*e \dref_SampleRejectedStatus_total_count_change
     */                                                     
    DDS_Long total_count_change;

    /*e \dref_SampleRejectedStatus_last_reason
     */                                                     
    DDS_SampleRejectedStatusKind last_reason;

    /*e \dref_SampleRejectedStatus_last_instance_handle
     */
    DDS_InstanceHandle_t last_instance_handle;
};


#define DDS_SampleRejectedStatus_INITIALIZER \
        { 0L, 0L, DDS_NOT_REJECTED,DDS_HANDLE_NIL_NATIVE }

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleRejectedStatus_initialize(
    struct DDS_SampleRejectedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleRejectedStatus_copy(
    struct DDS_SampleRejectedStatus *self,
    const struct DDS_SampleRejectedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleRejectedStatus_finalize(
    struct DDS_SampleRejectedStatus *self);

struct DDS_SubscriptionMatchedStatus {

    /*e \dref_SubscriptionMatchedStatus_total_count
     */                                                     
    DDS_Long total_count;

    /*e \dref_SubscriptionMatchedStatus_total_count_change
     */                                                     
    DDS_Long total_count_change;

    /*e \dref_SubscriptionMatchedStatus_current_count
     */
    DDS_Long current_count;

    /*e \dref_SubscriptionMatchedStatus_current_count_peak
     */
    DDS_Long current_count_peak;

    /*e \dref_SubscriptionMatchedStatus_current_count_change
     */
    DDS_Long current_count_change;

    /*e \dref_SubscriptionMatchedStatus_last_publication_handle
     */                                                     
    DDS_InstanceHandle_t last_publication_handle;
};


#define DDS_SubscriptionMatchedStatus_INITIALIZER \
        { 0L, 0L, 0L, 0L, 0L, DDS_HANDLE_NIL_NATIVE}

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriptionMatchedStatus_initialize(
    struct DDS_SubscriptionMatchedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriptionMatchedStatus_copy(
    struct DDS_SubscriptionMatchedStatus *self,
    const struct DDS_SubscriptionMatchedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriptionMatchedStatus_finalize(
    struct DDS_SubscriptionMatchedStatus *self);

struct DDS_DataReaderCacheStatus {
    /*e \dref_DataReaderCacheStatus_sample_count_peak
     */
    DDS_LongLong sample_count_peak; 
    /*e \dref_DataReaderCacheStatus_sample_count
     */
    DDS_LongLong sample_count;
};


#if (!defined(RTI_WIN32) && !defined(RTI_WINCE)) || defined(WIN_GCC)
#define DDS_DataReaderCacheStatus_INITIALIZER \
        { 0LL, 0LL }
#else
#define DDS_DataReaderCacheStatus_INITIALIZER \
        { 0i64, 0i64 }
#endif

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderCacheStatus_initialize(
    struct DDS_DataReaderCacheStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderCacheStatus_copy(
    struct DDS_DataReaderCacheStatus *self,
    const struct DDS_DataReaderCacheStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderCacheStatus_finalize(
    struct DDS_DataReaderCacheStatus *self);

struct DDS_DataReaderProtocolStatus {
    /*e \dref_DataReaderProtocolStatus_received_sample_count
     */
    DDS_LongLong received_sample_count;
    /*e \dref_DataReaderProtocolStatus_received_sample_count_change
     */
    DDS_LongLong received_sample_count_change;
    /*e \dref_DataReaderProtocolStatus_received_sample_bytes
     */
    DDS_LongLong received_sample_bytes;
    /*e \dref_DataReaderProtocolStatus_received_sample_bytes_change
     */
    DDS_LongLong received_sample_bytes_change;
    /*e \dref_DataReaderProtocolStatus_duplicate_sample_count
     */
    DDS_LongLong duplicate_sample_count;
    /*e \dref_DataReaderProtocolStatus_duplicate_sample_count_change
     */
    DDS_LongLong duplicate_sample_count_change;
    /*e \dref_DataReaderProtocolStatus_duplicate_sample_bytes
     */
    DDS_LongLong duplicate_sample_bytes;
    /*e \dref_DataReaderProtocolStatus_duplicate_sample_bytes_change
     */
    DDS_LongLong duplicate_sample_bytes_change;
    /*e \dref_DataReaderProtocolStatus_filtered_sample_count
     */
    DDS_LongLong filtered_sample_count;
    /*e \dref_DataReaderProtocolStatus_filtered_sample_count_change
     */
    DDS_LongLong filtered_sample_count_change;
    /*e \dref_DataReaderProtocolStatus_filtered_sample_bytes
     */
    DDS_LongLong filtered_sample_bytes;
    /*e \dref_DataReaderProtocolStatus_filtered_sample_bytes_change
     */
    DDS_LongLong filtered_sample_bytes_change;
    /*e \dref_DataReaderProtocolStatus_received_heartbeat_count
     */
    DDS_LongLong received_heartbeat_count;
    /*e \dref_DataReaderProtocolStatus_received_heartbeat_count_change
     */
    DDS_LongLong received_heartbeat_count_change;
    /*e \dref_DataReaderProtocolStatus_received_heartbeat_bytes
     */
    DDS_LongLong received_heartbeat_bytes;
    /*e \dref_DataReaderProtocolStatus_received_heartbeat_bytes_change
     */
    DDS_LongLong received_heartbeat_bytes_change;
    /*e \dref_DataReaderProtocolStatus_sent_ack_count
     */
    DDS_LongLong sent_ack_count;
    /*e \dref_DataReaderProtocolStatus_sent_ack_count_change
     */
    DDS_LongLong sent_ack_count_change;
    /*e \dref_DataReaderProtocolStatus_sent_ack_bytes
     */
    DDS_LongLong sent_ack_bytes;
    /*e \dref_DataReaderProtocolStatus_sent_ack_bytes_change
     */
    DDS_LongLong sent_ack_bytes_change;
    /*e \dref_DataReaderProtocolStatus_sent_nack_count
     */
    DDS_LongLong sent_nack_count;
    /*e \dref_DataReaderProtocolStatus_sent_nack_count_change
     */
    DDS_LongLong sent_nack_count_change;
    /*e \dref_DataReaderProtocolStatus_sent_nack_bytes
     */
    DDS_LongLong sent_nack_bytes;
    /*e \dref_DataReaderProtocolStatus_sent_nack_bytes_change
     */
    DDS_LongLong sent_nack_bytes_change;
    /*e \dref_DataReaderProtocolStatus_received_gap_count
     */
    DDS_LongLong received_gap_count;
    /*e \dref_DataReaderProtocolStatus_received_gap_count_change
     */
    DDS_LongLong received_gap_count_change;
    /*e \dref_DataReaderProtocolStatus_received_gap_bytes
     */
    DDS_LongLong received_gap_bytes;
    /*e \dref_DataReaderProtocolStatus_received_gap_bytes_change
     */
    DDS_LongLong received_gap_bytes_change;
    /*e \dref_DataReaderProtocolStatus_rejected_sample_count
     */
    DDS_LongLong rejected_sample_count;
    /*e \dref_DataReaderProtocolStatus_rejected_sample_count_change
     */
    DDS_LongLong rejected_sample_count_change;
    /*e \dref_DataReaderProtocolStatus_first_available_sample_sequence_number
     */
    struct DDS_SequenceNumber_t first_available_sample_sequence_number;
    /*e \dref_DataReaderProtocolStatus_last_available_sample_sequence_number
     */
    struct DDS_SequenceNumber_t last_available_sample_sequence_number;
    /*e \dref_DataReaderProtocolStatus_last_committed_sample_sequence_number
     */
    struct DDS_SequenceNumber_t last_committed_sample_sequence_number;
    /*e \dref_DataReaderProtocolStatus_uncommitted_sample_count
     */
    DDS_Long uncommitted_sample_count;
};


#if (!defined(RTI_WIN32) && !defined(RTI_WINCE)) || defined(WIN_GCC)
#define DDS_DataReaderProtocolStatus_INITIALIZER \
        { 0LL, 0LL, 0LL, 0LL, \
          0LL, 0LL, 0LL, 0LL, \
          0LL, 0LL, 0LL, 0LL, \
          0LL, 0LL, 0LL, 0LL, \
          0LL, 0LL, 0LL, 0LL, \
          0LL, 0LL, 0LL, 0LL, \
          0LL, 0LL, 0LL, 0LL, \
          0LL, 0LL, \
          {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
          {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
          {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
          0L  \
         }
#else
#define DDS_DataReaderProtocolStatus_INITIALIZER \
        { 0i64, 0i64, 0i64, 0i64, \
          0i64, 0i64, 0i64, 0i64, \
          0i64, 0i64, 0i64, 0i64, \
          0i64, 0i64, 0i64, 0i64, \
          0i64, 0i64, 0i64, 0i64, \
          0i64, 0i64, 0i64, 0i64, \
          0i64, 0i64, 0i64, 0i64, \
          0i64, 0i64, \
          {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
          {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
          {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, \
          0L  \
         }
#endif

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderProtocolStatus_initialize(
    struct DDS_DataReaderProtocolStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderProtocolStatus_copy(
    struct DDS_DataReaderProtocolStatus *self,
    const struct DDS_DataReaderProtocolStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderProtocolStatus_finalize(
    struct DDS_DataReaderProtocolStatus *self);

typedef enum {

    /*e \dref_SampleStateKind_READ_SAMPLE_STATE
     */       
    DDS_READ_SAMPLE_STATE     = 0x0001 << 0,

    /*e \dref_SampleStateKind_NOT_READ_SAMPLE_STATE
     */       
    DDS_NOT_READ_SAMPLE_STATE = 0x0001 << 1

} DDS_SampleStateKind;

typedef DDS_UnsignedLong DDS_SampleStateMask;

 extern DDSCDllVariable const DDS_SampleStateMask DDS_ANY_SAMPLE_STATE;

typedef enum {

    /*e \dref_ViewStateKind_NEW_VIEW_STATE
     */       
    DDS_NEW_VIEW_STATE     = 0x0001 << 0,

    /*e \dref_ViewStateKind_NOT_NEW_VIEW_STATE
     */       
    DDS_NOT_NEW_VIEW_STATE = 0x0001 << 1

} DDS_ViewStateKind;

typedef DDS_UnsignedLong DDS_ViewStateMask;

 extern DDSCDllVariable const DDS_ViewStateMask DDS_ANY_VIEW_STATE;

typedef enum {

    /*e \dref_InstanceStateKind_ALIVE_INSTANCE_STATE
     */       
    DDS_ALIVE_INSTANCE_STATE                = 0x0001 << 0,

    /*e \dref_InstanceStateKind_NOT_ALIVE_DISPOSED_INSTANCE_STATE
     */       
    DDS_NOT_ALIVE_DISPOSED_INSTANCE_STATE   = 0x0001 << 1,
    
    /*e \dref_InstanceStateKind_NOT_ALIVE_NO_WRITERS_INSTANCE_STATE
     */       
    DDS_NOT_ALIVE_NO_WRITERS_INSTANCE_STATE = 0x0001 << 2

} DDS_InstanceStateKind;

typedef DDS_UnsignedLong DDS_InstanceStateMask;

 extern DDSCDllVariable const DDS_InstanceStateMask
DDS_ANY_INSTANCE_STATE;

 extern DDSCDllVariable const DDS_InstanceStateMask
DDS_NOT_ALIVE_INSTANCE_STATE;


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_SampleInfo;

struct DDSCPPDllExport DDS_SampleInfo {

    /*e \dref_SampleInfo_sample_state
    */                                                     
    DDS_SampleStateKind  sample_state;

    /*e \dref_SampleInfo_view_state
    */                                                     
    DDS_ViewStateKind view_state;

    /*e \dref_SampleInfo_instance_state
    */                                                     
    DDS_InstanceStateKind instance_state;

    /*e \dref_SampleInfo_source_timestamp
    */                                                     
    struct DDS_Time_t    source_timestamp;

    /*e \dref_SampleInfo_instance_handle
    */                                                     
    DDS_InstanceHandle_t instance_handle;

    /*e \dref_SampleInfo_publication_handle
    */                                                     
    DDS_InstanceHandle_t publication_handle;

    /*e \dref_SampleInfo_disposed_generation_count
    */                                                     
    DDS_Long disposed_generation_count;

    /*e \dref_SampleInfo_no_writers_generation_count
    */                                                     
    DDS_Long no_writers_generation_count;

    /*e \dref_SampleInfo_sample_rank
    */                                                     
    DDS_Long sample_rank;

    /*e \dref_SampleInfo_generation_rank
    */                                                     
    DDS_Long generation_rank;

    /*e \dref_SampleInfo_absolute_generation_rank
    */                                                     
    DDS_Long absolute_generation_rank;

    /*e \dref_SampleInfo_valid_data
    */                                                     
    DDS_Boolean valid_data;

    /*e \dref_SampleInfo_reception_timestamp
    */ 
    struct DDS_Time_t reception_timestamp;

    /*e \dref_SampleInfo_publication_sequence_number 
    */
    struct DDS_SequenceNumber_t publication_sequence_number;
    
    /*e \dref_SampleInfo_reception_sequence_number 
    */
    struct DDS_SequenceNumber_t reception_sequence_number;

    /*i \dref_SampleInfo_publication_virtual_guid */
    struct DDS_GUID_t publication_virtual_guid;

    /*i \dref_SampleInfo_ publication_virtual_sequence_number
    */
    struct DDS_SequenceNumber_t publication_virtual_sequence_number;

    /*e \dref_SampleInfo_original_publication_virtual_guid */
    struct DDS_GUID_t original_publication_virtual_guid;

    /*e \dref_SampleInfo_original_publication_virtual_sequence_number
    */
    struct DDS_SequenceNumber_t original_publication_virtual_sequence_number;

    /*e \dref_SampleInfo_related_original_publication_virtual_guid */
    struct DDS_GUID_t related_original_publication_virtual_guid;

    /*e \dref_SampleInfo_related_original_publication_virtual_sequence_number
    */
    struct DDS_SequenceNumber_t related_original_publication_virtual_sequence_number;
    /*e \dref_SampleInfo_flag
     */
    DDS_SampleFlag flag;
    /*e \dref_SampleInfo_source_guid
     */
    struct DDS_GUID_t source_guid;
    /*e \dref_SampleInfo_related_source_guid
     */
    struct DDS_GUID_t related_source_guid;
    /*e \dref_SampleInfo_related_subscription_guid
     */
    struct DDS_GUID_t related_subscription_guid;
    /*e \dref_SampleInfo_topic_query_guid
     */
    struct DDS_GUID_t topic_query_guid;
    /*i \dref_SampleInfo_sample_hash
     */    
    DDS_Hash sample_hash;
    /*i \dref_SampleInfo_sample_signature
     */
    DDS_SampleSignature *sample_signature;
    
 #ifdef RTI_CPP
    DDS_SampleInfo();
 #endif
};

 extern DDSCDllVariable const struct DDS_SampleInfo 
DDS_SAMPLEINFO_DEFAULT;

extern DDSCDllExport
void DDS_SampleInfo_get_sample_identity(
    const struct DDS_SampleInfo * self,
    struct DDS_SampleIdentity_t * identity);

extern DDSCDllExport
void DDS_SampleInfo_get_related_sample_identity(
    const struct DDS_SampleInfo * self,
    struct DDS_SampleIdentity_t * related_identity);


struct DDS_PrintFormat;

extern DDSCDllExport
DDS_ReturnCode_t DDS_SampleInfoFormatter_print_w_params(
        const struct DDS_SampleInfo * self,
        struct RTIXMLSaveContext *dst,
        struct DDS_PrintFormat *print_format);

extern DDSCDllExport
DDS_ReturnCode_t DDS_SampleInfoFormatter_to_xml(
    const struct DDS_SampleInfo * self,
    char *str,
    DDS_UnsignedLong *str_size);

extern DDSCDllExport
DDS_ReturnCode_t DDS_SampleInfoFormatter_to_json(
    const struct DDS_SampleInfo * self,
    char *str,
    DDS_UnsignedLong *str_size);


DDS_SEQUENCE(DDS_SampleInfoSeq, struct DDS_SampleInfo);

#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif


typedef struct DDS_ReadConditionImpl DDS_ReadCondition;

typedef DDS_ReadCondition* DDS_ReadCondition_ptr;

typedef enum {

    /*e \dref_StreamKind_LIVE_STREAM
     */       
    DDS_LIVE_STREAM     = 0x0001 << 0,

    /*e \dref_StreamKind_TOPIC_QUERY_STREAM
     */       
    DDS_TOPIC_QUERY_STREAM = 0x0001 << 1

} DDS_StreamKind;

typedef DDS_UnsignedLong DDS_StreamKindMask;

 extern DDSCDllVariable const DDS_StreamKindMask DDS_ANY_STREAM;

struct DDS_ReadConditionParams {
    /*e \dref_ReadConditionParams_sample_states
     */
    DDS_SampleStateMask sample_states;
    /*e \dref_ReadConditionParams_view_states
     */    
    DDS_ViewStateMask view_states;
    /*e \dref_ReadConditionParams_instance_states
     */
    DDS_InstanceStateMask instance_states;
    /*e \dref_ReadConditionParams_stream_kinds
     */
    DDS_StreamKindMask stream_kinds;    
};

 extern DDSCDllVariable const struct DDS_ReadConditionParams
DDS_READCONDITIONPARAMS_DEFAULT;


#define DDS_ReadCondition_as_condition(readConditionPtr) \
            ((DDS_Condition*) readConditionPtr)
DDS_SEQUENCE(DDS_ReadConditionSeq, DDS_ReadCondition_ptr);

extern DDSCDllExport DDS_SampleStateMask
DDS_ReadCondition_get_sample_state_mask(
    DDS_ReadCondition* self);

extern DDSCDllExport DDS_ViewStateMask
    DDS_ReadCondition_get_view_state_mask(
    DDS_ReadCondition* self);

extern DDSCDllExport DDS_InstanceStateMask
    DDS_ReadCondition_get_instance_state_mask(
    DDS_ReadCondition* self);

extern DDSCDllExport DDS_StreamKindMask 
    DDS_ReadCondition_get_stream_kind_mask(
    DDS_ReadCondition* self);

extern DDSCDllExport DDS_DataReader*
DDS_ReadCondition_get_datareader(
    DDS_ReadCondition* self);

typedef struct DDS_IndexConditionImpl DDS_IndexCondition;


#define DDS_IndexCondition_as_readcondition(indexConditionPtr) \
            ((DDS_ReadCondition*) indexConditionPtr)


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT_W_ERROR_CHECKING(DDS_QueryConditionParams);

struct DDS_QueryConditionParams {
    /*e \dref_QueryConditionParams_as_readconditionparam
     */    
    struct DDS_ReadConditionParams as_readconditionparams;
    /*e \dref_QueryConditionParams_query_expression
     */
    char* query_expression;
    /*e \dref_QueryConditionParams_query_parameters
     */
    struct DDS_StringSeq query_parameters;
   
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_QueryConditionParams)
};

 extern DDSCDllVariable const struct DDS_QueryConditionParams
DDS_QUERYCONDITIONPARAMS_DEFAULT;

typedef struct DDS_QueryConditionImpl DDS_QueryCondition;


#define DDS_QueryCondition_as_readcondition(queryConditionPtr) \
            ((DDS_ReadCondition*) queryConditionPtr)

extern DDSCDllExport const char* DDS_QueryCondition_get_query_expression(
    DDS_QueryCondition* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_QueryCondition_get_query_parameters(
    DDS_QueryCondition* self,
    struct DDS_StringSeq* query_parameters);

extern DDSCDllExport DDS_ReturnCode_t DDS_QueryCondition_set_query_parameters(
    DDS_QueryCondition* self,
    const struct DDS_StringSeq* query_parameters);

struct DDS_DataReaderQos;

extern DDSCDllExport DDS_Boolean DDS_DataReaderQos_equals(
    const struct DDS_DataReaderQos *self,
    const struct DDS_DataReaderQos *other);

struct DDS_DataReaderQos {
    /*e \dref_DataReaderQos_durability
    */                                                     
    struct DDS_DurabilityQosPolicy          durability;

    /*e \dref_DataReaderQos_deadline
    */                                                     
    struct DDS_DeadlineQosPolicy            deadline;

    /*e \dref_DataReaderQos_latency_budget
    */                                                     
    struct DDS_LatencyBudgetQosPolicy       latency_budget;

    /*e \dref_DataReaderQos_liveliness
    */                                                     
    struct DDS_LivelinessQosPolicy          liveliness;

    /*e \dref_DataReaderQos_reliability
    */                                                     
    struct DDS_ReliabilityQosPolicy         reliability;

    /*e \dref_DataReaderQos_destination_order
    */                                                     
    struct DDS_DestinationOrderQosPolicy    destination_order;

    /*e \dref_DataReaderQos_history
    */                                                     
    struct DDS_HistoryQosPolicy             history;

    /*e \dref_DataReaderQos_resource_limits
    */                                                     
    struct DDS_ResourceLimitsQosPolicy      resource_limits;

    /*e \dref_DataReaderQos_user_data 
    */                                                     
    struct DDS_UserDataQosPolicy            user_data;

    /*e \dref_DataReaderQos_ownership 
    */                                                     
    struct DDS_OwnershipQosPolicy           ownership;

    /*e \dref_DataReaderQos_time_based_filter
    */                                                     
    struct DDS_TimeBasedFilterQosPolicy     time_based_filter;

    /*e \dref_DataReaderQos_reader_data_lifecycle
     */
    struct DDS_ReaderDataLifecycleQosPolicy reader_data_lifecycle;

    /*e \dref_DataReaderQos_type_consistency */
    struct DDS_TypeConsistencyEnforcementQosPolicy type_consistency;

    /* --- Extensions: ---------------------------------------------------- */
    /*e \dref_DataReaderQos_reader_resource_limits
     */
    struct DDS_DataReaderResourceLimitsQosPolicy reader_resource_limits;

    /*e \dref_DataReaderQos_protocol
    */                                                     
    struct DDS_DataReaderProtocolQosPolicy     protocol;

    /*e \dref_DataReaderQos_transport_selection
     */    
    struct DDS_TransportSelectionQosPolicy transport_selection;
    
    /*e \dref_DataReaderQos_unicast
     */    
    struct DDS_TransportUnicastQosPolicy unicast;    
    
    /*e \dref_DataReaderQos_multicast
     */    
    struct DDS_TransportMulticastQosPolicy multicast;

    /*i \dref_DataReaderQos_encapsulation
     */    
    struct DDS_TransportEncapsulationQosPolicy encapsulation;

    /*e \dref_DataReaderQos_property
     */
    struct DDS_PropertyQosPolicy property;

    /*e \dref_DataReaderQos_service */
    struct DDS_ServiceQosPolicy service;

    /*e \dref_DataReaderQos_availability */
    struct DDS_AvailabilityQosPolicy availability;

    /*e \dref_DataReaderQos_subscription_name
     */
    struct DDS_EntityNameQosPolicy subscription_name;
    
    /*e \dref_DataReaderQos_transport_priority
     */
    struct DDS_TransportPriorityQosPolicy transport_priority;
    /* ========================== */
    /* leave type_support at last */
    /* ========================== */

   /*e \dref_DataReaderQos_type_support
    */
    struct DDS_TypeSupportQosPolicy type_support;

#ifdef RTI_CPP
    /*e 
      @brief Compares two DataReaderQos objects for equality
      @see DDS_DataReaderQos_equals
    */ 
    inline bool operator==(const DDS_DataReaderQos& r) const {
        if (DDS_DataReaderQos_equals(this, &r)) {
            return true;
        }

        return false;
    };

    /*e 
      @brief Compares two DataReaderQos objects for inequality
      @see DDS_DataReaderQos_equals
    */ 
    inline bool operator!=(const DDS_DataReaderQos& r) const {
        if (DDS_DataReaderQos_equals(this, &r)) {
            return false;
        }

        return true;
    };
#endif
};

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderQos_initialize(
    struct DDS_DataReaderQos* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderQos_copy(
    struct DDS_DataReaderQos *self,
    const struct DDS_DataReaderQos *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderQos_finalize(
    struct DDS_DataReaderQos *self);


#define DDS_DataReaderQos_INITIALIZER            {        \
    DDS_DURABILITY_QOS_POLICY_DEFAULT,                    \
    DDS_DEADLINE_QOS_POLICY_DEFAULT,                      \
    DDS_LATENCY_BUDGET_QOS_POLICY_DEFAULT,                \
    DDS_LIVELINESS_QOS_POLICY_DEFAULT,                    \
    DDS_RELIABILITY_QOS_POLICY_DEFAULT,                   \
    DDS_DESTINATION_ORDER_QOS_POLICY_DEFAULT,             \
    DDS_HISTORY_QOS_POLICY_DEFAULT,                       \
    DDS_RESOURCE_LIMITS_QOS_POLICY_DEFAULT,               \
    DDS_USER_DATA_QOS_POLICY_DEFAULT,                     \
    DDS_OWNERSHIP_QOS_POLICY_DEFAULT,                     \
    DDS_TIME_BASED_FILTER_QOS_POLICY_DEFAULT,             \
    DDS_READER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT,         \
    DDS_TYPE_CONSISTENCY_ENFORCEMENT_QOS_POLICY_DEFAULT, \
    DDS_DATA_READER_RESOURCE_LIMITS_QOS_POLICY_DEFAULT,   \
    DDS_DATA_READER_PROTOCOL_QOS_POLICY_DEFAULT,          \
    DDS_TRANSPORT_SELECTION_QOS_POLICY_DEFAULT,           \
    DDS_TRANSPORT_UNICAST_QOS_POLICY_DEFAULT,             \
    DDS_TRANSPORT_MULTICAST_QOS_POLICY_DEFAULT,           \
    DDS_TRANSPORT_ENCAPSULATION_QOS_POLICY_DEFAULT,       \
    DDS_PROPERTY_QOS_POLICY_DEFAULT,                      \
    DDS_SERVICE_QOS_POLICY_DEFAULT,                       \
    DDS_AVAILABILITY_QOS_POLICY_DEFAULT,                  \
    DDS_ENTITY_NAME_QOS_POLICY_DEFAULT,                   \
    DDS_TRANSPORT_PRIORITY_QOS_POLICY_DEFAULT,            \
    DDS_TYPESUPPORT_QOS_POLICY_DEFAULT                    \
}

extern DDSCDllExport
void DDS_DataReaderQos_save(const struct DDS_DataReaderQos* self,
                            const struct DDS_DataReaderQos* base, 
                            struct RTIXMLSaveContext* dst);

struct DDS_SubscriberQos;

extern DDSCDllExport DDS_Boolean DDS_SubscriberQos_equals(
    const struct DDS_SubscriberQos *self,
    const struct DDS_SubscriberQos *other);

struct DDS_SubscriberQos {

    /*e \dref_SubscriberQos_presentation
    */                                                     
    struct DDS_PresentationQosPolicy    presentation;

    /*e \dref_SubscriberQos_partition
    */                                                     
    struct DDS_PartitionQosPolicy       partition;

    /*e \dref_SubscriberQos_group_data
    */                                                     
    struct DDS_GroupDataQosPolicy       group_data;

    /*e \dref_SubscriberQos_entity_factory
     */
    struct DDS_EntityFactoryQosPolicy  entity_factory;

    /* --- Extensions: ---------------------------------------------------- */

    /*e \dref_SubscriberQos_exclusive_area
    */
    struct DDS_ExclusiveAreaQosPolicy exclusive_area;

    /*i \dref_SubscriberQos_protocol
     */
    struct DDS_SubscriberProtocolQosPolicy protocol;

    /*e \dref_SubscriberQos_subscriber_name
     */
    struct DDS_EntityNameQosPolicy subscriber_name;

#ifdef RTI_CPP
    /*e 
      @brief Compares two SubscriberQos objects for equality
      @see DDS_SubscriberQos_equals
    */ 
    inline bool operator==(const DDS_SubscriberQos& r) const {
        if (DDS_SubscriberQos_equals(this, &r)) {
            return true;
        }

        return false;
    };

    /*e 
      @brief Compares two SubscriberQos objects for inequality
      @see DDS_SubscriberQos_equals
    */ 
    inline bool operator!=(const DDS_SubscriberQos& r) const {
        if (DDS_SubscriberQos_equals(this, &r)) {
            return false;
        }

        return true;
    };
#endif
};

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriberQos_initialize(
    struct DDS_SubscriberQos* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriberQos_copy(
    struct DDS_SubscriberQos *self,
    const struct DDS_SubscriberQos *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriberQos_finalize(
    struct DDS_SubscriberQos *self);


#define DDS_SubscriberQos_INITIALIZER   { 	\
    DDS_PRESENTATION_QOS_POLICY_DEFAULT,    	\
    DDS_PARTITION_QOS_POLICY_DEFAULT,       	\
    DDS_GROUP_DATA_QOS_POLICY_DEFAULT,      	\
    DDS_ENTITY_FACTORY_QOS_POLICY_DEFAULT,  	\
    DDS_EXCLUSIVE_AREA_QOS_POLICY_DEFAULT, 	\
    DDS_SUBSCRIBER_PROTOCOL_QOS_POLICY_DEFAULT,	\
    DDS_ENTITY_NAME_QOS_POLICY_DEFAULT          \
}

extern DDSCDllExport
void DDS_SubscriberQos_save(const struct DDS_SubscriberQos* self,
                            const struct DDS_SubscriberQos* base, 
                            struct RTIXMLSaveContext* dst);

typedef DDS_DataReader* DDS_DataReader_ptr;


DDS_SEQUENCE(DDS_DataReaderSeq, DDS_DataReader_ptr);

typedef void (*DDS_DataReaderListener_RequestedDeadlineMissedCallback)(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_RequestedDeadlineMissedStatus* status);

typedef void (*DDS_DataReaderListener_LivelinessChangedCallback)(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_LivelinessChangedStatus* status);

typedef void (*DDS_DataReaderListener_RequestedIncompatibleQosCallback)(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_RequestedIncompatibleQosStatus* status);

typedef void (*DDS_DataReaderListener_SampleRejectedCallback)(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_SampleRejectedStatus* status);

typedef void (*DDS_DataReaderListener_DataAvailableCallback)(
    void* listener_data,
    DDS_DataReader* reader);

typedef void (*DDS_DataReaderListener_SubscriptionMatchedCallback)(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_SubscriptionMatchedStatus* status);

typedef void (*DDS_DataReaderListener_SampleLostCallback)(
    void* listener_data,
    DDS_DataReader* reader, 
    const struct DDS_SampleLostStatus* status);

struct DDS_DataReaderListener {

    /*ce \dref_DataReaderListener_as_listener
     */
    struct DDS_Listener as_listener;
    
    /*ce \dref_DataReaderListener_on_requested_deadline_missed
     */                                                     
    DDS_DataReaderListener_RequestedDeadlineMissedCallback
        on_requested_deadline_missed;

    /*ce \dref_DataReaderListener_on_requested_incompatible_qos
     */                                                     
    DDS_DataReaderListener_RequestedIncompatibleQosCallback
        on_requested_incompatible_qos;

    /*ce \dref_DataReaderListener_on_sample_rejected
     */                                                     
    DDS_DataReaderListener_SampleRejectedCallback on_sample_rejected;

    /*ce \dref_DataReaderListener_on_liveliness_changed
     */                                                     
    DDS_DataReaderListener_LivelinessChangedCallback
        on_liveliness_changed;

    /*ce \dref_DataReaderListener_on_data_available
     */                                                     
    DDS_DataReaderListener_DataAvailableCallback on_data_available;

    /*ce \dref_DataReaderListener_on_subscription_matched
     */                                                     
    DDS_DataReaderListener_SubscriptionMatchedCallback on_subscription_matched;

    /*ce \dref_DataReaderListener_on_sample_lost
     */                                                     
    DDS_DataReaderListener_SampleLostCallback on_sample_lost;

};


#define DDS_DataReaderListener_INITIALIZER  { \
  DDS_Listener_INITIALIZER, \
  (DDS_DataReaderListener_RequestedDeadlineMissedCallback)NULL, \
  (DDS_DataReaderListener_RequestedIncompatibleQosCallback)NULL, \
  (DDS_DataReaderListener_SampleRejectedCallback)NULL, \
  (DDS_DataReaderListener_LivelinessChangedCallback)NULL, \
  (DDS_DataReaderListener_DataAvailableCallback)NULL, \
  (DDS_DataReaderListener_SubscriptionMatchedCallback)NULL, \
  (DDS_DataReaderListener_SampleLostCallback)NULL }

typedef void (*DDS_SubscriberListener_DataOnReadersCallback)(
    void* listener_data, DDS_Subscriber* sub);

struct DDS_SubscriberListener {

    /*ce \dref_SubscriberListener_as_datareaderlistener
     */
    struct DDS_DataReaderListener as_datareaderlistener;

    /*ce \dref_SubscriberListener_on_data_on_readers
     */                                                     
    DDS_SubscriberListener_DataOnReadersCallback on_data_on_readers;
};


#define DDS_SubscriberListener_INITIALIZER  \
    { DDS_DataReaderListener_INITIALIZER, \
      (DDS_SubscriberListener_DataOnReadersCallback)NULL }

 extern DDSCDllVariable const struct DDS_DataReaderQos
DDS_DATAREADER_QOS_DEFAULT;

 extern DDSCDllVariable const struct DDS_DataReaderQos
DDS_DATAREADER_QOS_USE_TOPIC_QOS;


#define DDS_Subscriber_as_entity(subscriberPtr) \
            ((DDS_Entity*) subscriberPtr)

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_get_default_datareader_qos(
    DDS_Subscriber* self,
    struct DDS_DataReaderQos* qos);

extern DDSCDllExport 
DDS_ReturnCode_t DDS_Subscriber_get_default_datareader_qos_w_topic_name(
    DDS_Subscriber* self,
    struct DDS_DataReaderQos* qos,
    const char* topic_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_set_default_datareader_qos(
    DDS_Subscriber* self,
    const struct DDS_DataReaderQos* qos);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_Subscriber_set_default_datareader_qos_with_profile(
    DDS_Subscriber* self,
    const char *library_name, const char * profile_name);

extern DDSCDllExport DDS_DataReader* DDS_Subscriber_create_datareader(
    DDS_Subscriber* self,
    DDS_TopicDescription* topic,
    const struct DDS_DataReaderQos* qos,
    const struct DDS_DataReaderListener* listener,
    DDS_StatusMask mask);

extern DDSCDllExport DDS_DataReader* 
DDS_Subscriber_create_datareader_with_profile(
    DDS_Subscriber* self,
    DDS_TopicDescription* topic,
    const char* library_name,
    const char* profile_name,
    const struct DDS_DataReaderListener* listener,
    DDS_StatusMask mask);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_create_datareaders_from_config(
    DDS_Subscriber * self,
    struct DDS_DataReaderSeq * readers,
    const char * configuration_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_delete_datareader(
    DDS_Subscriber* self, DDS_DataReader* a_datareader);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_delete_contained_entities(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_DataReader* DDS_Subscriber_lookup_datareader(
    DDS_Subscriber* self, const char* topic_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_begin_access(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_end_access(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_get_datareaders(
    DDS_Subscriber* self,
    struct DDS_DataReaderSeq* readers,
    DDS_SampleStateMask sample_states, DDS_ViewStateMask view_states,
    DDS_InstanceStateMask instance_states);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_get_all_datareaders(
    DDS_Subscriber* self,
    struct DDS_DataReaderSeq* readers);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_notify_datareaders(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_DomainParticipant* DDS_Subscriber_get_participant(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_copy_from_topic_qos(
    DDS_Subscriber* self, struct DDS_DataReaderQos* datareader_qos,
    const struct DDS_TopicQos* topic_qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_set_qos(
    DDS_Subscriber* self,
    const struct DDS_SubscriberQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_set_qos_with_profile(
    DDS_Subscriber* self,
    const char* library_name,
    const char* profile_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_get_qos(
    DDS_Subscriber* self,
    struct DDS_SubscriberQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_set_default_profile(
    DDS_Subscriber* self,
    const char* library_name,
    const char* profile_name);

extern DDSCDllExport const char * DDS_Subscriber_get_default_profile(
    DDS_Subscriber* self);

extern DDSCDllExport  const char *DDS_Subscriber_get_default_profile_library(
                DDS_Subscriber *self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_set_default_library(
    DDS_Subscriber* self,const char* library_name);

extern DDSCDllExport const char * DDS_Subscriber_get_default_library(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_set_listener(
    DDS_Subscriber* self,
    const struct DDS_SubscriberListener* l, DDS_StatusMask mask);

extern DDSCDllExport struct DDS_SubscriberListener DDS_Subscriber_get_listener(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_get_listenerX(
    DDS_Subscriber* self, struct DDS_SubscriberListener* listener);

extern DDSCDllExport DDS_ReturnCode_t
DDS_Subscriber_get_builtin_topic_key(const DDS_Subscriber* self,
                                     DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_call_listenerT(
    DDS_Subscriber* self, DDS_StatusMask mask);

extern DDSCDllExport DDS_DataReader* DDS_Subscriber_lookup_datareader_by_builtin_topic_key(
    DDS_Subscriber* self,
    DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport 
DDS_DataReader* DDS_Subscriber_lookup_datareader_by_name(
        DDS_Subscriber* self,
        const char* datareader_name);


#define DDS_DataReader_as_entity(dataReaderPtr) \
            ((DDS_Entity*) dataReaderPtr)

extern DDSCDllExport DDS_ReadCondition* DDS_DataReader_create_readcondition(
    DDS_DataReader* self, DDS_SampleStateMask sample_states, 
    DDS_ViewStateMask view_states, DDS_InstanceStateMask instance_states);

extern DDSCDllExport DDS_ReadCondition* DDS_DataReader_create_readcondition_w_params(
    DDS_DataReader* self, 
    const struct DDS_ReadConditionParams * params);

extern DDSCDllExport DDS_QueryCondition* DDS_DataReader_create_querycondition(
    DDS_DataReader* self, DDS_SampleStateMask sample_states, 
    DDS_ViewStateMask view_states, DDS_InstanceStateMask instance_states,
    const char* query_expression,
    const struct DDS_StringSeq* query_parameters);

extern DDSCDllExport DDS_QueryCondition* DDS_DataReader_create_querycondition_w_params(
    DDS_DataReader* self, 
    const struct DDS_QueryConditionParams * params);

extern DDSCDllExport DDS_IndexCondition* DDS_DataReader_create_indexcondition(
    DDS_DataReader* self, DDS_SampleStateMask sample_states, 
    DDS_ViewStateMask view_states, DDS_InstanceStateMask instance_states,
    const char * index_name,struct DDS_SampleInfo * sample_info);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_create_index(
    DDS_DataReader* self, 
    const char * index_name,
    REDAOrderedDataTypeCompareFunction compare_function);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_delete_index(
    DDS_DataReader* self, 
    const char * index_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_create_correlation_index(
    DDS_DataReader* self, 
    const char * index_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_create_related_sample_identity_index(
    DDS_DataReader* self, 
    const char * index_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_delete_readcondition(
    DDS_DataReader* self, DDS_ReadCondition* condition);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_delete_contained_entities(
    DDS_DataReader* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_wait_for_historical_data(
    DDS_DataReader* self,
    const struct DDS_Duration_t* max_wait);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_acknowledge_sample_w_response(
    DDS_DataReader* self,
    const struct DDS_SampleInfo * sample_info,
    const struct DDS_AckResponseData_t * response_data);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_acknowledge_up_through_sample_w_response(
    DDS_DataReader* self,
    const struct DDS_SampleInfo * sample_info,
    const struct DDS_AckResponseData_t * response_data);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_acknowledge_all_w_response(
    DDS_DataReader* self,
    const struct DDS_AckResponseData_t * response_data);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_acknowledge_sample(
    DDS_DataReader* self,
    const struct DDS_SampleInfo * sample_info);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_acknowledge_up_through_sample(
    DDS_DataReader* self,
    const struct DDS_SampleInfo * sample_info);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_acknowledge_all(
    DDS_DataReader* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_set_last_publication_sequence_number(
    DDS_DataReader* self,
    const DDS_InstanceHandle_t * publication_handle,
    int offset_mode,
    const struct DDS_SequenceNumber_t * sequence_number);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_get_matched_publications(
    DDS_DataReader* self, struct DDS_InstanceHandleSeq* publication_handles);

struct DDS_PublicationBuiltinTopicData;

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataReader_get_matched_publication_data(
    DDS_DataReader* self,
    struct DDS_PublicationBuiltinTopicData* publication_data,
    const DDS_InstanceHandle_t* publication_handle);

struct DDS_ParticipantBuiltinTopicData;

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataReader_get_matched_publication_participant_data(
    DDS_DataReader* self,
    struct DDS_ParticipantBuiltinTopicData* participant_data,
    const DDS_InstanceHandle_t* publication_handle);

extern DDSCDllExport DDS_TopicDescription* DDS_DataReader_get_topicdescription(
    DDS_DataReader* self);

extern DDSCDllExport DDS_Subscriber* DDS_DataReader_get_subscriber(
    DDS_DataReader* self);

struct PRESPsReader;

extern DDSCDllExport struct PRESPsReader* DDS_DataReader_get_presentation_readerI(
	    DDS_DataReader* self);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_sample_rejected_status(
    DDS_DataReader* self,
    struct DDS_SampleRejectedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_liveliness_changed_status(
    DDS_DataReader* self,
    struct DDS_LivelinessChangedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_requested_deadline_missed_status(
    DDS_DataReader* self,
    struct DDS_RequestedDeadlineMissedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_requested_incompatible_qos_status(
    DDS_DataReader* self,
    struct DDS_RequestedIncompatibleQosStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_subscription_matched_status(
    DDS_DataReader* self,
    struct DDS_SubscriptionMatchedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_sample_lost_status(
    DDS_DataReader* self,
    struct DDS_SampleLostStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_datareader_cache_status(
    DDS_DataReader* self,
    struct DDS_DataReaderCacheStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_datareader_protocol_status(
    DDS_DataReader* self,
    struct DDS_DataReaderProtocolStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_matched_publication_datareader_protocol_status(
    DDS_DataReader* self,
    struct DDS_DataReaderProtocolStatus* status,
    const DDS_InstanceHandle_t* publication_handle);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_sample_rejected_status_ex(
    DDS_DataReader* self,
    struct DDS_SampleRejectedStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_liveliness_changed_status_ex(
    DDS_DataReader* self,
    struct DDS_LivelinessChangedStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_requested_deadline_missed_status_ex(
    DDS_DataReader* self,
    struct DDS_RequestedDeadlineMissedStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_requested_incompatible_qos_status_ex(
    DDS_DataReader* self,
    struct DDS_RequestedIncompatibleQosStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_subscription_matched_status_ex(
    DDS_DataReader* self,
    struct DDS_SubscriptionMatchedStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_sample_lost_status_ex(
    DDS_DataReader* self,
    struct DDS_SampleLostStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_datareader_cache_status_ex(
    DDS_DataReader* self,
    struct DDS_DataReaderCacheStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_datareader_protocol_status_ex(
    DDS_DataReader* self,
    struct DDS_DataReaderProtocolStatus* status,
    DDS_Boolean clear_change);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_matched_publication_datareader_protocol_status_ex(
    DDS_DataReader* self,
    struct DDS_DataReaderProtocolStatus* status,
    const DDS_InstanceHandle_t* publication_handle,
    DDS_Boolean clear_change);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataReader_set_sample_rejected_statusT(
    DDS_DataReader* self, const struct DDS_SampleRejectedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataReader_set_liveliness_changed_statusT(
    DDS_DataReader* self, const struct DDS_LivelinessChangedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataReader_set_requested_deadline_missed_statusT(
    DDS_DataReader* self, 
    const struct DDS_RequestedDeadlineMissedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataReader_set_requested_incompatible_qos_statusT(
    DDS_DataReader* self, 
    const struct DDS_RequestedIncompatibleQosStatus* status);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_set_sample_lost_statusT(
    DDS_DataReader* self, const struct DDS_SampleLostStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_set_subscription_matched_statusT(
    DDS_DataReader* self, const struct DDS_SubscriptionMatchedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_set_datareader_cache_statusT(
    DDS_DataReader* self, const struct DDS_DataReaderCacheStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_set_datareader_protocol_statusT(
    DDS_DataReader* self, const struct DDS_DataReaderProtocolStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_set_matched_publication_datareader_protocol_statusT(
    DDS_DataReader* self, 
    const struct DDS_DataReaderProtocolStatus* status,
    const DDS_InstanceHandle_t* publication_handle);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_set_qos(
    DDS_DataReader* self,
    const struct DDS_DataReaderQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_set_qos_with_profile(
    DDS_DataReader* self,
    const char* library_name,
    const char* profile_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_get_qos(
    DDS_DataReader* self,
    struct DDS_DataReaderQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_set_listener(
    DDS_DataReader* self,
    const struct DDS_DataReaderListener* l, DDS_StatusMask mask);

extern DDSCDllExport struct DDS_DataReaderListener DDS_DataReader_get_listener(
    DDS_DataReader* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_get_listenerX(DDS_DataReader* self,
    struct DDS_DataReaderListener* listener);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataReader_get_builtin_topic_key(const DDS_DataReader* self,
                                     DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_Boolean
DDS_DataReader_is_keyed(DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_call_listenerT(
    DDS_DataReader* self, DDS_StatusMask mask);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_add_remote_writer_queue(
    DDS_DataReader* self,
    const struct DDS_GUID_t* queue_writer_guid,
    const struct DDS_DataWriterQos* datawriter_qos);

extern DDSCDllExport 
DDS_ReturnCode_t DDS_DataReader_assert_remote_writer_queue(
    DDS_DataReader* self,
    const struct DDS_GUID_t* queue_writer_guid,
    const struct DDS_DataWriterQos* datawriter_qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_delete_remote_writer_queue(
    DDS_DataReader* self,
    const struct DDS_GUID_t* queue_writer_guid);


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT_W_ERROR_CHECKING(DDS_TopicQuerySelection);

typedef struct DDS_TopicQuerySelection {

    /*e \dref_TopicQuerySelection_filter_class_name
     */
    char *filter_class_name;

    /*e \dref_TopicQuerySelection_filter_expression
     */
    char *filter_expression;

    /*e \dref_TopicQuerySelection_filter_parameters
     */
    struct DDS_StringSeq filter_parameters;
   
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT_NO_IMPL(DDS_TopicQuerySelection)

} DDS_TopicQuerySelection;


#define DDS_TopicQuerySelection_INITIALIZER \
{ NULL, \
  NULL, \
  DDS_SEQUENCE_INITIALIZER \
}

 extern DDSCDllVariable const struct DDS_TopicQuerySelection 
DDS_TOPIC_QUERY_SELECTION_USE_READER_CONTENT_FILTER;

 extern DDSCDllVariable const struct DDS_TopicQuerySelection 
DDS_TOPIC_QUERY_SELECTION_SELECT_ALL;

typedef struct DDS_TopicQueryImpl DDS_TopicQuery;

typedef DDS_TopicQuery* DDS_TopicQuery_ptr;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT_W_ERROR_CHECKING(DDS_TopicQueryData);
DDS_SEQUENCE(DDS_TopicQuerySeq, DDS_TopicQuery_ptr);

typedef struct DDS_TopicQueryData {

    /*e \dref_TopicQueryData_topic_query_selection
      */
    struct DDS_TopicQuerySelection topic_query_selection;
    
    /*i \dref_TopicQueryData_sync_sequence_number
     */
    struct DDS_SequenceNumber_t sync_sequence_number;

    /*e \dref_TopicQueryData_topic_name
     */
    char *topic_name;

    /*e \dref_TopicQueryData_original_related_reader_guid
     */
    struct DDS_GUID_t original_related_reader_guid;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT_NO_IMPL(DDS_TopicQueryData)
} DDS_TopicQueryData;

struct DDS_ServiceRequest;

extern DDSCDllExport 
DDS_Boolean DDS_TopicQueryHelper_topic_query_data_from_service_request(
    struct DDS_TopicQueryData *topic_query_data, 
    const struct DDS_ServiceRequest *service_request);

extern DDSCDllExport DDS_ReturnCode_t
DDS_TopicQuery_get_guid(
    DDS_TopicQuery *self, DDS_GUID_t *guid);

extern DDSCDllExport  DDS_ReturnCode_t
DDS_TopicQuery_get_selection(
    DDS_TopicQuery *self, 
    struct DDS_TopicQuerySelection*selection);

extern DDSCDllExport DDS_DataReader*
 DDS_TopicQuery_get_datareader(DDS_TopicQuery *self);

extern DDSCDllExport DDS_TopicQuery*
DDS_DataReader_create_topic_query(
    DDS_DataReader* self, 
    const struct DDS_TopicQuerySelection* selection);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataReader_delete_topic_query(
    DDS_DataReader* self, 
    DDS_TopicQuery* query);

extern DDSCDllExport 
DDS_TopicQuery * DDS_DataReader_lookup_topic_query(
    DDS_DataReader* self, 
    const struct DDS_GUID_t * guid);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_all_topic_queries(
    DDS_DataReader* self,
    struct DDS_TopicQuerySeq* topic_queries);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* dds_c_subscription_h */
