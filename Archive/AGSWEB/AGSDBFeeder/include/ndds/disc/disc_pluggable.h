/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)disc_pluggable.h    generated by: makeheader    Fri Feb 16 13:51:47 2018
 *
 *		built from:	pluggable.ifc
 */

#ifndef disc_pluggable_h
#define disc_pluggable_h



 #ifndef rti_makeheader_h
    #include "log/log_makeheader.h"
 #endif
 #ifndef reda_database_h
    #include "reda/reda_database.h"
 #endif
 #ifndef reda_weakReference_h
    #include "reda/reda_weakReference.h"
 #endif
 #ifndef reda_worker_h
    #include "reda/reda_worker.h"
 #endif
 #ifndef pres_common_h
    #include "pres/pres_common.h"
 #endif
 #ifndef pres_participant_h
    #include "pres/pres_participant.h"
 #endif
 #ifndef pres_psService_h
    #include "pres/pres_psService.h"
 #endif
 #ifndef pres_psReaderWriter_h
    #include "pres/pres_psReaderWriter.h"
 #endif
 #ifndef disc_dll_h
    #include "disc/disc_dll.h"
 #endif
 #ifndef disc_builtin_h
    #include "disc/disc_builtin.h"
 #endif

#ifdef __cplusplus
    extern "C" {
#endif


struct DISCPluginManager;


struct DISCParticipantDiscoveryPlugin;


struct DISCEndpointDiscoveryPlugin;


struct DISCCookieHandle;


struct DISCCookieValue {
    int data[8];
};


struct DISCCookieHandle {
    /* this is already in cookie's key, but duplicating it here allows a very quick check */
    struct DISCDiscoveryPlugin *_plugin;
    struct REDAWeakReference _cookieWR;
};


struct DISCSourceInfo {
    /*e Where applicable, plugin-defined GUID of information source.
    */
    struct MIGRtpsGuid srcGuid;
    /*e Where applicable, plugin-defined timestamp of information source.
    */
    struct RTINtpTime srcTimestamp;
};


/*e \ingroup DISCPluggableModule
  \brief Used to initialize DISCCookieValue.
*/
  #define DISC_COOKIE_VALUE_INITIALIZE { \
      { 0, 0, 0, 0, 0, 0, 0, 0 } /* data */ \
  }

/*e \ingroup DISCPluggableModule
  \brief Used to initialize DISCSourceInfo.
*/
  #define DISC_SUPPORT_INFO_INITIALIZE { \
      MIG_RTPS_GUID_UNKNOWN, /* srcGuid */ \
      RTI_NTP_TIME_ZERO /* srcTimestamp */ \
  }

/*e \ingroup DISCPluggableModule
  \brief Return code - "other" error code.
*/
  #define DISC_RETURN_PLUGIN_FAILED_OTHER           1
/*e \ingroup DISCPluggableModule
  \brief Return code - asserting remote entity is specificallly ignored by the user (via DDS ignore API).
*/
  #define DISC_RETURN_PLUGIN_FAILED_IGNORED         2
/*e \ingroup DISCPluggableModule
  \brief Return code - asserting remote entity belongs to our own participant.
*/
  #define DISC_RETURN_PLUGIN_FAILED_SELF            3
/*e \ingroup DISCPluggableModule
  \brief Return code - attempting to remove/unregister an entity not previously asserted by the plugin.
*/
  #define DISC_RETURN_PLUGIN_FAILED_NOT_ASSERTED    4
/*e \ingroup DISCPluggableModule
  \brief Return code - user-supplied container too small to contain reply.
*/
  #define DISC_RETURN_PLUGIN_FAILED_TOO_SMALL       5

/*e \ingroup DISCPluggableModule
  \brief Maximum ID of services to be discovered by any installed endpoint discovery plugins.
*/
  #define DISC_MAX_SERVICE_ID 2


/*e \ingroup DISCPluggableModule
  \brief Default discovery plugin manager property.
*/
#define DISC_PLUGIN_MANAGER_PROPERTY_DEFAULT { \
    MIG_RTPS_HOST_ID_UNKNOWN, /* hostId */ \
    MIG_RTPS_APP_ID_UNKNOWN, /* appId */ \
    MIG_RTPS_INSTANCE_ID_UNKNOWN, /* instanceId */ \
    0, /* domain ID */ \
    -1, /* edpRedundancyCount */ \
    256, /* maxPluginInfoParametersChars */ \
    { \
        (DISC_MAX_PDP_PLUGINS+DISC_MAX_EDP_PLUGINS)/2, /* initial */ \
        (DISC_MAX_PDP_PLUGINS+DISC_MAX_EDP_PLUGINS), /* maximal */ \
        REDA_FAST_BUFFER_POOL_UNLIMITED /* increment */ \
    }, /* pluginInfoParametersGrowth */ \
    { \
        128, /* initial */ \
        REDA_FAST_BUFFER_POOL_UNLIMITED, /* maximal */ \
        REDA_FAST_BUFFER_POOL_UNLIMITED /* increment */ \
    }, /* cookieAssertedEntitiesGrowth */ \
    { \
        {16, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
        REDA_TABLE_USE_DEFAULT_VALUE \
    }, /* remoteParticipantsTable */ \
    { \
        {64, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
        REDA_TABLE_USE_DEFAULT_VALUE \
    }, /* remoteWritersTable */ \
    { \
        {64, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
        REDA_TABLE_USE_DEFAULT_VALUE \
    }, /* remoteReadersTable */ \
    { \
        {16, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
        REDA_TABLE_USE_DEFAULT_VALUE \
    }, /* cookiesTable */ \
    {1, 0}, /* entityRemovalSnooze */ \
    RTI_TRUE, /* filterDomainBroadcastAnnouncements */ \
    RTI_TRUE /* isEndpointDiscoveryEnabled */ \
}


struct DISCPluginManagerProperty {
    /*e Host ID of the participant we are discovering for.
    */
    MIGRtpsHostId hostId;
    /*e Application ID of the participant we are discovering for.
    */
    MIGRtpsAppId appId;
    /*e Instance ID of the participant we are discovering for.
    */
    MIGRtpsInstanceId instanceId;
    /*e Domain ID associated with the DISC plugin manager */
    int domainId;
    /*e The number of EDPs the plugin manager shall attempt to invoke upon
        participant discovery. Use -1 to trigger all EDPs.
    */
    int edpRedundancyCount;

    /*e Max cumulative size of any single plugin's (PDP or EDP) info parameters.
    */
    int maxPluginInfoParametersSize;
    /*e Growth property of the number of plugins utilizing the info parameter.
        Max size is recommended to be DISC_MAX_PDP_PLUGINS + DISC_MAX_EDP_PLUGINS.
    */
    struct REDAFastBufferPoolGrowthProperty pluginInfoParametersGrowth;
    /*e Growth property of the number of remote entities asserted with cookies.
        2 plugins asserting the same remote entity counts as 2. 1 plugin
        asserting the same remote entity twice with 2 different cookies also counts as 2.
    */
    struct REDAFastBufferPoolGrowthProperty cookieAssertedEntitiesGrowth;

    /*e Properties of the table storing discovered remote participants.
    */
    struct REDATableProperty remoteParticipantsTable;
    /*e Properties of the table storing discovered remote writers.
    */
    struct REDATableProperty remoteWritersTable;
    /*e Properties of the table storing discovered remote readers.
    */
    struct REDATableProperty remoteReadersTable;
    /*e Properties of the table storing cookies used during assertions; determines the number of cookies.
    */
    struct REDATableProperty cookiesTable;
    /*e Event generator "snooze" time for fully unregistered remote entities.
    */
    struct RTINtpTime entityRemovalSnooze;
    /*e Filters domain broadcast announcements to default domain
    */
    RTIBool filterDomainBroadcastAnnouncements;
    /* @brief Indicates whether endpoint discovery is initially disabled for
     * all the remote participants
     */
    RTIBool isEndpointDiscoveryEnabled;
};

extern DISCDllExport
struct DISCPluginManager *DISCPluginManager_new(
    struct PRESParticipant *participant,
    struct REDADatabase *database,
    struct REDAExclusiveArea *tableEA,
    struct REDAExclusiveArea *recordEA,
    const struct DISCPluginManagerProperty *property,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCPluginManager_shutdown(
    struct DISCPluginManager *me, struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCPluginManager_delete(
    struct DISCPluginManager *me, struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCPluginManager_registerBuiltinTopic(
    struct DISCPluginManager *me,
    DISCBuiltinTopicKind topicKind,
    struct PRESPsReader *reader,
    PRESPsReaderTransformSampleFunction transformFnc,
    struct REDAWorker *worker);

typedef enum {
    /*e
     * empty: used for indicating no properties are included. The discovery
     * manager will pass a null pluginOptions pointer to the involved APIs.
     */
    DISC_PLUGIN_CUSTOM_OPTIONS_KIND_EMPTY,
    /*e
     * unknown: used for testing purposes
     */
    DISC_PLUGIN_CUSTOM_OPTIONS_KIND_UNKNOWN,
    /*e
     * disc plugin (SDP or EDS): these options allow one to distinguish between
     * regular mode and proxy mode (used for supporting EDS in non-server
     * participants). Note that disc plugin APIs also support passing null
     * options (when triggered by custom plugins).
     */
    DISC_PLUGIN_CUSTOM_OPTIONS_KIND_DISC,
    /*e
     * disc pa plugin (EDS server): these options allow one to distinguish
     * between an event triggered by a remote EDS client, or a remote EDS
     * server.
     */
    DISC_PLUGIN_CUSTOM_OPTIONS_KIND_DISC_PA
} DISCPluginCustomOptionsKind;


  #define DISC_PLUGIN_CUSTOM_OPTIONS_DATA_MAX_SIZE 4

struct DISCPluginCustomOptions {
    DISCPluginCustomOptionsKind kind;
    void *data[DISC_PLUGIN_CUSTOM_OPTIONS_DATA_MAX_SIZE];
};


/*e \ingroup DISCPluggableModule
  \brief Used to initialize DISCPluginCustomOptions.
*/
  #define DISC_PLUGIN_CUSTOM_OPTIONS_INITIALIZER { \
        DISC_PLUGIN_CUSTOM_OPTIONS_KIND_EMPTY, /* kind */ \
        { NULL, NULL, NULL, NULL } /* data */ \
    }


  #define DISC_PLUGIN_LISTENER_STORAGE_DATA_MAX_SIZE 8

struct DISCPluginListenerStorage {
    void *data[DISC_PLUGIN_LISTENER_STORAGE_DATA_MAX_SIZE];
};


/*e \ingroup DISCPluggableModule
  \brief Used to initialize DISCCookieValue.
*/
  #define DISC_PLUGIN_LISTENER_STORAGE_INITIALIZER { \
      { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL } /* data */ \
  }

typedef int
(*DISCCookieValueCompareFunction)(
    const struct DISCPluginListenerStorage *listenerStorage,
    const struct DISCCookieValue *left,
    const struct DISCCookieValue *right);


struct DISCParticipantDiscoveryListener;

typedef void
(*DISCParticipantDiscoveryListenerGetPluginInformation)(
    struct DISCParticipantDiscoveryListener *listener,
    struct DISCParticipantDiscoveryPlugin *plugin,
    PRESBuiltinEndpointMask *builtin_endpoints,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCParticipantDiscoveryListenerOnAfterLocalParticipantEnabledCallback)(
    struct DISCParticipantDiscoveryListener *listener,
    struct DISCParticipantDiscoveryPlugin *plugin,
    const struct DISCBuiltinTopicParticipantData *data,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCParticipantDiscoveryListenerOnAfterLocalParticipantChangedCallback)(
    struct DISCParticipantDiscoveryListener *listener,
    struct DISCParticipantDiscoveryPlugin *plugin,
    const struct DISCBuiltinTopicParticipantData *data,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCParticipantDiscoveryListenerOnAfterRemoteParticipantEnabledCallback)(
    struct DISCParticipantDiscoveryListener *listener,
    struct DISCParticipantDiscoveryPlugin *plugin,
    const struct DISCBuiltinTopicParticipantData *data,
    const struct DISCPluginCustomOptions *pluginOptions,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCParticipantDiscoveryListenerOnAfterRemoteParticipantChangedCallback)(
    struct DISCParticipantDiscoveryListener *listener,
    struct DISCParticipantDiscoveryPlugin *plugin,
    const struct DISCBuiltinTopicParticipantData *data,
    const struct DISCBuiltinTopicParticipantData *oldData,
    const struct DISCPluginCustomOptions *pluginOptions,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCParticipantDiscoveryListenerOnBeforeRemoteParticipantIgnoredCallback)(
    struct DISCParticipantDiscoveryListener *listener,
    struct DISCParticipantDiscoveryPlugin *plugin,
    const struct MIGRtpsGuid *guid,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCParticipantDiscoveryListenerOnBeforeRemoteParticipantRemovedCallback)(
    struct DISCParticipantDiscoveryListener *listener,
    struct DISCParticipantDiscoveryPlugin *plugin,
    const struct MIGRtpsGuid *guid,
    const struct PRESLocatorQosPolicy *metatrafficMulticastLocator,
    const struct PRESLocatorQosPolicy *metatrafficUnicastLocator,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCParticipantDiscoveryListenerOnBeforeLocalParticipantDeletedCallback)(
    struct DISCParticipantDiscoveryListener *listener,
    struct DISCParticipantDiscoveryPlugin *plugin,
    const struct MIGRtpsGuid *guid,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCParticipantDiscoveryListenerOnAfterLocalParticipantDeletedCallback)(
    struct DISCParticipantDiscoveryListener *listener,
    struct DISCParticipantDiscoveryPlugin *plugin,
    const struct MIGRtpsGuid *guid,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);


struct DISCParticipantDiscoveryListener {
    /*e User-defined function to compare and sort its cookies used during assertions.
        Compare 2 instances of DISCCookieValue.
    */
    DISCCookieValueCompareFunction
        compareCookies;
    /*e
    */
    DISCParticipantDiscoveryListenerGetPluginInformation
        getPluginInformation;
    /*e
    */
    DISCParticipantDiscoveryListenerOnAfterLocalParticipantEnabledCallback
        onAfterLocalParticipantEnabled;
    /*e
    */
    DISCParticipantDiscoveryListenerOnAfterRemoteParticipantEnabledCallback
        onAfterRemoteParticipantEnabled;
    /*e
    */
    DISCParticipantDiscoveryListenerOnAfterLocalParticipantChangedCallback
        onAfterLocalParticipantChanged;
    /*e
    */
    DISCParticipantDiscoveryListenerOnAfterRemoteParticipantChangedCallback
        onAfterRemoteParticipantChanged;
    /*e
    */
    DISCParticipantDiscoveryListenerOnBeforeRemoteParticipantIgnoredCallback
        onBeforeRemoteParticipantIgnored;
    /*e
    */
    DISCParticipantDiscoveryListenerOnBeforeRemoteParticipantRemovedCallback
        onBeforeRemoteParticipantRemoved;
    /*e
    */
    DISCParticipantDiscoveryListenerOnBeforeLocalParticipantDeletedCallback
        onBeforeLocalParticipantDeleted;
    /*e
    */
    DISCParticipantDiscoveryListenerOnAfterLocalParticipantDeletedCallback
        onAfterLocalParticipantDeleted;
};

extern DISCDllExport
struct DISCParticipantDiscoveryPlugin *
    DISCPluginManager_registerParticipantDiscoveryPlugin(
        struct DISCPluginManager *me,
        const struct DISCParticipantDiscoveryListener *listener,
        const struct DISCPluginListenerStorage *listenerStorage,
        struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCParticipantDiscoveryPlugin_assertCookie(
    struct DISCParticipantDiscoveryPlugin *me,
    int *failReason,
    struct DISCCookieHandle *cookieHandle,
    const struct DISCCookieValue *value,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCParticipantDiscoveryPlugin_removeCookie(
    struct DISCParticipantDiscoveryPlugin *me,
    int *failReason,
    const struct DISCCookieHandle *cookieHandle,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCParticipantDiscoveryPlugin_removeCookieByValue(
    struct DISCParticipantDiscoveryPlugin *me,
    int *failReason,
    const struct DISCCookieValue *value,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCParticipantDiscoveryPlugin_assertRemoteParticipant(
    struct DISCParticipantDiscoveryPlugin *me,
    int *failReason,
    RTIBool *ignoredByUser,
    const struct DISCBuiltinTopicParticipantData *participantData,
    const struct DISCSourceInfo *sourceInfo,
    const struct DISCCookieHandle *cookieHandle,
    const struct DISCPluginCustomOptions *pluginOptions,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCParticipantDiscoveryPlugin_unregisterRemoteParticipant(
    struct DISCParticipantDiscoveryPlugin *me,
    int *failReason,
    const struct MIGRtpsGuid *guid,
    const struct DISCSourceInfo *sourceInfo,
    const struct DISCPluginCustomOptions *pluginOptions,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCParticipantDiscoveryPlugin_unregisterRemoteParticipantsByCookie(
    struct DISCParticipantDiscoveryPlugin *me,
    int *failReason,
    const struct DISCCookieHandle *cookieHandle,
    const struct DISCSourceInfo *sourceInfo,
    const struct DISCPluginCustomOptions *pluginOptions,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCParticipantDiscoveryPlugin_removeRemoteParticipant(
    struct DISCParticipantDiscoveryPlugin *me,
    int *failReason,
    const struct MIGRtpsGuid *guid,
    const struct DISCSourceInfo *sourceInfo,
    const struct DISCPluginCustomOptions *pluginOptions,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCParticipantDiscoveryPlugin_removeRemoteParticipantsByCookie(
    struct DISCParticipantDiscoveryPlugin *me,
    int *failReason,
    const struct DISCCookieHandle *cookieHandle,
    const struct DISCSourceInfo *sourceInfo,
    const struct DISCPluginCustomOptions *pluginOptions,
    struct REDAWorker *worker);

extern DISCDllExport
void * DISCParticipantDiscoveryPlugin_getUserData(
    struct DISCParticipantDiscoveryPlugin *me);

extern DISCDllExport
void DISCParticipantDiscoveryPlugin_setUserData(
    struct DISCParticipantDiscoveryPlugin *me,
    void * userData);

extern DISCDllExport
int DISCParticipantDiscoveryPlugin_getDomainId(
    struct DISCParticipantDiscoveryPlugin *me);

extern DISCDllExport
struct REDAExclusiveArea * DISCParticipantDiscoveryPlugin_getTableEa(
    const struct DISCParticipantDiscoveryPlugin *me);

extern DISCDllExport
struct PRESParticipant * DISCParticipantDiscoveryPlugin_getParticipant(
    const struct DISCParticipantDiscoveryPlugin *me);


struct DISCEndpointDiscoveryListener;

typedef void
(*DISCEndpointDiscoveryListenerGetPluginInformation)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    PRESBuiltinEndpointMask *builtin_endpoints,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCEndpointDiscoveryListenerOnAfterLocalParticipantEnabledCallback)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    const struct DISCBuiltinTopicParticipantData *data,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCEndpointDiscoveryListenerOnBeforeLocalParticipantDeletedCallback)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    const struct MIGRtpsGuid *guid,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef RTIBool
(*DISCEndpointDiscoveryListenerOnAfterRemoteParticipantEnabledCallback)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    const struct DISCBuiltinTopicParticipantData *data,
    const struct DISCPluginCustomOptions *pluginOptions,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCEndpointDiscoveryListenerOnBeforeRemoteParticipantUnregisteredCallback)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    const struct MIGRtpsGuid *guid,
    RTIBool previousReply,
    RTIBool fullyUned,
    const struct DISCPluginCustomOptions *pluginOptions,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCEndpointDiscoveryListenerOnBeforeRemoteParticipantDeletedCallback)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    const struct MIGRtpsGuid *guid,
    RTIBool previousReply,
    const struct DISCPluginCustomOptions *pluginOptions,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCEndpointDiscoveryListenerOnAfterLocalWriterEnabledCallback)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    const struct DISCBuiltinTopicPublicationData *data,
    RTIBool useSecureChannel,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCEndpointDiscoveryListenerOnAfterLocalWriterChangedCallback)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    const struct DISCBuiltinTopicPublicationData *data,
    RTIBool useSecureChannel,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCEndpointDiscoveryListenerOnAfterLocalWriterDeletedCallback)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    const struct MIGRtpsGuid *guid,
    RTIBool useSecureChannel,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCEndpointDiscoveryListenerOnAfterLocalReaderEnabledCallback)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    const struct DISCBuiltinTopicSubscriptionData *data,
    RTIBool useSecureChannel,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCEndpointDiscoveryListenerOnAfterLocalReaderChangedCallback)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    const struct DISCBuiltinTopicSubscriptionData *data,
    RTIBool useSecureChannel,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);

typedef void
(*DISCEndpointDiscoveryListenerOnAfterLocalReaderDeletedCallback)(
    struct DISCEndpointDiscoveryListener *listener,
    struct DISCEndpointDiscoveryPlugin *plugin,
    const struct MIGRtpsGuid *guid,
    RTIBool useSecureChannel,
    const struct DISCPluginListenerStorage *listenerStorage,
    struct REDAWorker *worker);


struct DISCEndpointDiscoveryListener {

    /*e User-defined function to compare and sort its cookies used during assertions.
        Compare 2 instances of DISCCookieValue.
    */
    DISCCookieValueCompareFunction
        compareCookies;

    /*e
    */
    DISCEndpointDiscoveryListenerGetPluginInformation
        getPluginInformation;
    /*e
    */
    DISCEndpointDiscoveryListenerOnAfterLocalParticipantEnabledCallback
        onAfterLocalParticipantEnabled;
    /*e
    */
    DISCEndpointDiscoveryListenerOnBeforeLocalParticipantDeletedCallback
        onBeforeLocalParticipantDeleted;

    /*e
    */
    DISCEndpointDiscoveryListenerOnAfterRemoteParticipantEnabledCallback
        onAfterRemoteParticipantEnabled;
    /*e
    */
    DISCEndpointDiscoveryListenerOnBeforeRemoteParticipantUnregisteredCallback
        onBeforeRemoteParticipantUnregistered;
    /*e
    */
    DISCEndpointDiscoveryListenerOnBeforeRemoteParticipantDeletedCallback
        onBeforeRemoteParticipantDeleted;

    /*e
    */
    DISCEndpointDiscoveryListenerOnAfterLocalWriterEnabledCallback
        onAfterLocalWriterEnabled;
    /*e
    */
    DISCEndpointDiscoveryListenerOnAfterLocalWriterChangedCallback
        onAfterLocalWriterChanged;
    /*e
    */
    DISCEndpointDiscoveryListenerOnAfterLocalWriterDeletedCallback
        onAfterLocalWriterDeleted;

    /*e
    */
    DISCEndpointDiscoveryListenerOnAfterLocalReaderEnabledCallback
        onAfterLocalReaderEnabled;
    /*e
    */
    DISCEndpointDiscoveryListenerOnAfterLocalReaderChangedCallback
        onAfterLocalReaderChanged;
    /*e
    */
    DISCEndpointDiscoveryListenerOnAfterLocalReaderDeletedCallback
        onAfterLocalReaderDeleted;
};

extern DISCDllExport
struct DISCEndpointDiscoveryPlugin *
    DISCPluginManager_registerEndpointDiscoveryPlugin(
        struct DISCPluginManager *me,
        PRESServiceId serviceId,
        const struct DISCEndpointDiscoveryListener *listener,
        const struct DISCPluginListenerStorage *listenerStorage,
        struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_assertCookie(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    struct DISCCookieHandle *cookieHandle,
    const struct DISCCookieValue *value,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_removeCookie(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct DISCCookieHandle *cookieHandle,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_removeCookieByValue(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct DISCCookieValue *value,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_getRemoteParticipantAsserters(
    const struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    struct DISCPluginInfo *pdpAsserters,
    int *numPdpAsserters,
    const struct MIGRtpsGuid *guid,
    int maxPdpAsserters,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_assertRemoteWriter(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct DISCBuiltinTopicPublicationData *publicationData,
    const struct DISCSourceInfo *sourceInfo,
    const struct DISCCookieHandle *cookieHandle,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_unregisterRemoteWriter(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct MIGRtpsGuid *guid,
    const struct DISCSourceInfo *sourceInfo,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_unregisterRemoteWritersByCookie(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct DISCCookieHandle *cookieHandle,
    const struct DISCSourceInfo *sourceInfo,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_removeRemoteWriter(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct MIGRtpsGuid *guid,
    const struct DISCSourceInfo *sourceInfo,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_removeRemoteWritersByCookie(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct DISCCookieHandle *cookieHandle,
    const struct DISCSourceInfo *sourceInfo,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_assertRemoteReader(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct DISCBuiltinTopicSubscriptionData *subscriptionData,
    const struct DISCSourceInfo *sourceInfo,
    const struct DISCCookieHandle *cookieHandle,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_unregisterRemoteReader(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct MIGRtpsGuid *guid,
    const struct DISCSourceInfo *sourceInfo,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_unregisterRemoteReadersByCookie(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct DISCCookieHandle *cookieHandle,
    const struct DISCSourceInfo *sourceInfo,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_removeRemoteReader(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct MIGRtpsGuid *guid,
    const struct DISCSourceInfo *sourceInfo,
    struct REDAWorker *worker);

extern DISCDllExport
RTIBool DISCEndpointDiscoveryPlugin_removeRemoteReadersByCookie(
    struct DISCEndpointDiscoveryPlugin *me,
    int *failReason,
    const struct DISCCookieHandle *cookieHandle,
    const struct DISCSourceInfo *sourceInfo,
    struct REDAWorker *worker);

extern DISCDllExport
void * DISCEndpointDiscoveryPlugin_getUserData(
    struct DISCEndpointDiscoveryPlugin *me);

extern DISCDllExport
void DISCEndpointDiscoveryPlugin_setUserData(
    struct DISCEndpointDiscoveryPlugin *me,
    void * userData);

extern DISCDllExport
RTIBool DISCPluginManager_resumeEndpointDiscovery(
        struct DISCPluginManager * me,    
        struct MIGRtpsGuid * participantGuid,
        struct REDAWorker * worker);



#ifdef __cplusplus
    }	/* extern "C" */
#endif

#include "disc/disc_pluggable_impl.h"

#endif /* disc_pluggable_h */
