/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)reda_orderedDataType_impl.h    generated by: makeheader    Fri Feb 16 13:51:15 2018
 *
 *		built from:	orderedDataType_impl.ifc
 */

#ifndef reda_orderedDataType_impl_h
#define reda_orderedDataType_impl_h


#ifdef __cplusplus
    extern "C" {
#endif

struct REDAOrderedDataType {
    /*i Size of the data */
    int _instanceSize;
    /*i Alignment requirement */
    RTIOsapiAlignment _instanceAlignment;
    /*i Comparison function */
    REDAOrderedDataTypeCompareFunction _compareFnc;
    /*i Function to stringify the data for printing purposes. */
    REDAOrderedDataTypePrintFunction _printFnc;
};


/* ----------------------------------------------------------------- */
#define REDAOrderedDataType_getInstanceSize(dataType) \
    ((dataType)->_instanceSize)

/* ----------------------------------------------------------------- */
#define REDAOrderedDataType_getInstanceAlignment(dataType) \
    ((dataType)->_instanceAlignment)

/* ----------------------------------------------------------------- */
#define REDAOrderedDataType_getCompareFnc(dataType) ((dataType)->_compareFnc)

/* ----------------------------------------------------------------- */
#define REDAOrderedDataType_getPrintFnc(dataType) ((dataType)->_printFnc)

/* ----------------------------------------------------------------- */
#define REDAOrderedDataType_defineFromStructure(dataType, structureType, \
                                                compareFnc, printFnc) \
    REDAOrderedDataType_define(                                          \
	dataType,                                                        \
        sizeof(structureType),                                           \
        RTIOsapiAlignment_getAlignmentOf(structureType),                 \
	compareFnc, printFnc)


#define REDAOrderedDataType_compareNativeMacro(left, right) \
       ( ((left) > (right))?1:( ((left) < (right))?(-1):0) )

#define REDAOrderedDataType_compare1XIntMacro(left, right) \
       ( (*(left) > *(right))?1:( (*(left) < *(right))?(-1):0) )

#define REDAOrderedDataType_compare2XIntMacro(left, right) \
    (  (*(left) == *(right))? \
        REDAOrderedDataType_compare1XIntMacro((left)+1, (right)+1): \
	REDAOrderedDataType_compare1XIntMacro(left, right)      )

#define REDAOrderedDataType_compare3XIntMacro(left, right) \
    (  (*(left) == *(right))? \
        REDAOrderedDataType_compare2XIntMacro((left)+1, (right)+1): \
	REDAOrderedDataType_compare1XIntMacro(left, right)      )

#define REDAOrderedDataType_compare4XIntMacro(left, right) \
    (  (*(left) == *(right))? \
        REDAOrderedDataType_compare3XIntMacro((left)+1, (right)+1): \
	REDAOrderedDataType_compare1XIntMacro(left, right)      )

#define REDAOrderedDataType_compare5XIntMacro(left, right) \
    (  (*(left) == *(right))? \
        REDAOrderedDataType_compare4XIntMacro((left)+1, (right)+1): \
	REDAOrderedDataType_compare1XIntMacro(left, right)      )

#define REDAOrderedDataType_compare6XIntMacro(left, right) \
    (  (*(left) == *(right))? \
        REDAOrderedDataType_compare5XIntMacro((left)+1, (right)+1): \
	REDAOrderedDataType_compare1XIntMacro(left, right)      )

#define REDAOrderedDataType_compare7XIntMacro(left, right) \
    (  (*(left) == *(right))? \
        REDAOrderedDataType_compare6XIntMacro((left)+1, (right)+1): \
        REDAOrderedDataType_compare1XIntMacro(left, right)      )

#define REDAOrderedDataType_compare8XIntMacro(left, right) \
    (  (*(left) == *(right))? \
        REDAOrderedDataType_compare7XIntMacro((left)+1, (right)+1): \
        REDAOrderedDataType_compare1XIntMacro(left, right)      )

#define REDAOrderedDataType_compare9XIntMacro(left, right) \
    (  (*(left) == *(right))? \
        REDAOrderedDataType_compare8XIntMacro((left)+1, (right)+1): \
        REDAOrderedDataType_compare1XIntMacro(left, right)      )

#define REDAOrderedDataType_comparePointerMacro(left, right) \
        REDAOrderedDataType_compareNativeMacro(*((void**)(left)), \
                                               *((void**)(right)))
        
#define REDAOrderedDataType_compareUIntMacro(left, right) \
          REDAOrderedDataType_compare1XIntMacro((unsigned int*)(left),  \
                                                (unsigned int*)(right))
     
#define REDAOrderedDataType_compareDoubleUIntMacro(left, right) \
          REDAOrderedDataType_compare2XIntMacro((unsigned int*)(left),  \
                                                (unsigned int*)(right))

#define REDAOrderedDataType_compareTripleUIntMacro(left, right) \
          REDAOrderedDataType_compare3XIntMacro((unsigned int*)(left),  \
                                                (unsigned int*)(right))

#define REDAOrderedDataType_compareQuadUIntMacro(left, right) \
          REDAOrderedDataType_compare4XIntMacro((unsigned int*)(left),  \
                                                (unsigned int*)(right))

#define REDAOrderedDataType_compareFiveUIntMacro(left, right) \
          REDAOrderedDataType_compare5XIntMacro((unsigned int*)(left),  \
                                                (unsigned int*)(right))

#define REDAOrderedDataType_compareSixUIntMacro(left, right) \
          REDAOrderedDataType_compare6XIntMacro((unsigned int*)(left),  \
                                                (unsigned int*)(right))

#define REDAOrderedDataType_compareNineUIntMacro(left, right) \
          REDAOrderedDataType_compare9XIntMacro((unsigned int*)(left),  \
                                                (unsigned int*)(right))

#define REDAOrderedDataType_compareIntMacro(left, right) \
          REDAOrderedDataType_compare1XIntMacro((int*)(left),  \
                                                (int*)(right))
     
#define REDAOrderedDataType_compareDoubleIntMacro(left, right) \
          REDAOrderedDataType_compare2XIntMacro((int*)(left),  \
                                                (int*)(right))

#define REDAOrderedDataType_compareTripleIntMacro(left, right) \
          REDAOrderedDataType_compare3XIntMacro((int*)(left),  \
                                                (int*)(right))

#define REDAOrderedDataType_compareQuadIntMacro(left, right) \
          REDAOrderedDataType_compare4XIntMacro((int*)(left),  \
                                                (int*)(right))

#define REDAOrderedDataType_compareQuadPointerMacro(left, right) \
          REDAOrderedDataType_compare4XIntMacro((void**)(left),  \
                                                (void**)(right))

#define REDAOrderedDataType_compareFiveIntMacro(left, right) \
          REDAOrderedDataType_compare5XIntMacro((int*)(left),  \
                                                (int*)(right))

/* ----------------------------------------------------------------- */
#define REDAOrderedDataType_compareUsingFnc(compareFnc, left, right) \
   ((compareFnc == REDAOrderedDataType_compareUInt) ? \
    REDAOrderedDataType_compareUIntMacro(left, right) : \
    ((compareFnc == REDAOrderedDataType_compareDoubleUInt) ? \
     REDAOrderedDataType_compareDoubleUIntMacro(left, right) : \
     ((compareFnc==REDAOrderedDataType_compareTripleUInt) ? \
      REDAOrderedDataType_compareTripleUIntMacro(left, right) : \
      ((compareFnc==REDAOrderedDataType_compareQuadUInt) ? \
       REDAOrderedDataType_compareQuadUIntMacro(left, right) : \
       ((compareFnc==REDAOrderedDataType_compareSixUInt) ? \
        REDAOrderedDataType_compareSixUIntMacro(left, right) : \
        ((compareFnc==REDAOrderedDataType_comparePointer) ? \
         REDAOrderedDataType_comparePointerMacro(left, right) : \
         ((compareFnc==REDAOrderedDataType_compareQuadPointer) ? \
          REDAOrderedDataType_compareQuadPointerMacro(left, right) : \
          compareFnc(left, right))))))))


/* ----------------------------------------------------------------- */
#define REDAOrderedDataType_isBuiltinCompareFnc(compareFnc) \
   ((compareFnc == REDAOrderedDataType_compareUInt)       || \
    (compareFnc == REDAOrderedDataType_compareDoubleUInt) || \
    (compareFnc==REDAOrderedDataType_compareTripleUInt)   || \
    (compareFnc==REDAOrderedDataType_compareQuadUInt)     || \
    (compareFnc==REDAOrderedDataType_compareSixUInt)      || \
    (compareFnc==REDAOrderedDataType_comparePointer)      || \
    (compareFnc==REDAOrderedDataType_compareQuadPointer))


/*RTPS.2.0: TODO, intro compareFiveInt, */
/* ----------------------------------------------------------------- */
#define REDAOrderedDataType_compare(dataType, left, right)         \
    (REDAOrderedDataType_compareUsingFnc(((dataType)->_compareFnc), \
                                         (left), (right)) )



#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* reda_orderedDataType_impl_h */
