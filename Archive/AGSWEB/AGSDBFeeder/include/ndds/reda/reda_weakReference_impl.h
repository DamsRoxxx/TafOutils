/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)reda_weakReference_impl.h    generated by: makeheader    Fri Feb 16 13:51:16 2018
 *
 *		built from:	weakReference_impl.ifc
 */

#ifndef reda_weakReference_impl_h
#define reda_weakReference_impl_h


  #ifndef reda_epoch_h
    #include "reda/reda_epoch.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


#define REDA_WEAK_REFERENT_MAX_ROWS (16)

struct REDAWeakReferent;

 
struct REDAWeakReferenceManager {
    /* The EA to protect the manager's critical sections */
    struct REDAExclusiveArea *_adminEA;

    /* maximum number of weak references it can dispense */
    int _weakReferenceCountMax;

    /* initial number of weak references allocated */
    int _weakReferenceCountInit;
    
    /*i Sparse matrix of weak references that can grow as needed
	while retaining the indices of the already allocated referents
    */
    struct REDAWeakReferent *_referentRow[REDA_WEAK_REFERENT_MAX_ROWS];
    /* Number of allocated rows */
    int _numRows;
    /* Size of each row */
    int _referentRowSize[REDA_WEAK_REFERENT_MAX_ROWS];
     
    /* Defines the head and tail of the list of free referents */
    int _headReferentIndex;
    int _tailReferentIndex;

    /* number of weak references it has dispensed */
    int _weakReferenceCount;
    /* maximum number of referents that have ever been used */
    int _weakReferenceCountHighWatermark;
    /* number of weak references it has allocated */
    int _weakReferenceAllocatedCount;
};


  #define REDA_WEAK_REFERENCE_INDEX_INVALID ((int)-1)

 
struct REDAWeakReference {
    /*i Back pointer to the manager.

      INVARIANTS immediately imply:
      <OL>
      <LI>the WeakReferenceManager can never be destroyed; it would typically
      be the last component destroyed when the system is completely shut
      down and we have some guarantee that nobody will use weak references
      <LI>the WeakReferenceManager can never shrink (manageeCountMax
      can never decrease; it could increase)
      </OL>
    */
    const struct REDAWeakReferenceManager *_manager;

    /*i Weak reference points to an entry in the internal array of weak
      referents of weak reference manager.
    */
    int _index;

    /*i epoch is to confirm the validity of a reference when dereferencing. */
    REDAEpoch _referentEpochAtCreation;
};


struct REDAWeakReferent {
    const struct REDASkiplistNode *_slNode;
    REDAEpoch _epoch;
    struct REDATable *_table;
    /* Keeps track of the free ones efficiently */
    int _indexOfNextFreeReferent;
};


#define REDAWeakReferenceManager_index2row(index)     ((index & 0xf0000000)>>28)
#define REDAWeakReferenceManager_index2column(index)  (index & 0x0fffffff)
#define REDAWeakReferenceManager_row2index(row)       (row * 0x10000000)

/* ----------------------------------------------------------------- */
  #define REDAWeakReference_isValid(ref) \
    ((ref)->_manager != NULL && \
     (ref)->_index != REDA_WEAK_REFERENCE_INDEX_INVALID)

/* ----------------------------------------------------------------- */
  #define REDAWeakReference_referToSameRecord(left, right) \
    ((left)->_index == (right)->_index && (left)->_manager == (right)->_manager)

/* ----------------------------------------------------------------- */
  #define REDAWeakReference_refersToExistingRecord(r)   \
      (((r)->_manager->_referentRow                                              \
		 [REDAWeakReferenceManager_index2row((r)->_index)]               \
		 [REDAWeakReferenceManager_index2column((r)->_index)])._epoch == \
              (r)->_referentEpochAtCreation) 

/* ----------------------------------------------------------------- */
  #define REDAWeakReference_equals !REDAWeakReference_compare

/* ----------------------------------------------------------------- */
  #define REDAWeakReference_reset(ref) \
    (ref)->_manager = NULL; \
    (ref)->_index = REDA_WEAK_REFERENCE_INDEX_INVALID; \
    (ref)->_referentEpochAtCreation = REDA_EPOCH_UNKNOWN


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* reda_weakReference_impl_h */
