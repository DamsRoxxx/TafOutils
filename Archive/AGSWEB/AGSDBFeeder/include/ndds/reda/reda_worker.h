/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)reda_worker.h    generated by: makeheader    Fri Feb 16 13:51:18 2018
 *
 *		built from:	worker.ifc
 */

#ifndef reda_worker_h
#define reda_worker_h



  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef reda_dll_h
    #include "reda/reda_dll.h"
  #endif
  #ifndef osapi_thread_h
    #include "osapi/osapi_thread.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

struct REDAWorkerFactory;

struct REDAWorker;

struct REDAObjectPerWorker;

struct REDAExclusiveArea;

extern REDADllExport 
struct REDAWorkerFactory *
REDAWorkerFactory_new(int objectPerWorkerCountMax);

extern REDADllExport 
void
REDAWorkerFactory_delete(struct REDAWorkerFactory *workerFactory);

extern REDADllExport 
struct REDAWorker *
REDAWorkerFactory_createWorker(struct REDAWorkerFactory *workerFactory,
                                 const char *name);

extern REDADllExport int
REDAWorkerFactory_getWorkerCount(struct REDAWorkerFactory *workerFactory);

extern REDADllExport 
void 
REDAWorkerFactory_destroyWorker(struct REDAWorkerFactory *workerFactory,
                                  struct REDAWorker *worker);

extern REDADllExport 
int REDAWorkerFactory_getMaxStorageCount(
    const struct REDAWorkerFactory *workerFactory);

typedef 
void*
(*REDAObjectPerWorkerConstructor)(void *parameter, 
                                  struct REDAWorker *worker);

typedef 
void
(*REDAObjectPerWorkerDestructor)(void *instance, 
                                 void *parameter,
				 struct REDAWorker *worker);

extern REDADllExport struct REDAObjectPerWorker * 
REDAWorkerFactory_createObjectPerWorker(
    struct REDAWorkerFactory *workerFactory, const char* name,
    REDAObjectPerWorkerConstructor constructor, void* constructorParameter,
    REDAObjectPerWorkerDestructor destructor, void* destructorParameter);

extern REDADllExport void
REDAWorkerFactory_destroyObjectPerWorker(
    struct REDAWorkerFactory *workerFactory,
    struct REDAObjectPerWorker *objectPerWorker,
    struct REDAWorker *worker);

extern REDADllExport struct REDAExclusiveArea *
REDAWorkerFactory_createExclusiveArea(
    struct REDAWorkerFactory *workerFactory, int level);

extern REDADllExport void REDAWorkerFactory_destroyExclusiveArea(
    struct REDAWorkerFactory *workerFactory,
    struct REDAExclusiveArea *exclusiveArea);

extern REDADllExport 
int 
REDAExclusiveArea_getLevel(const struct REDAExclusiveArea *exclusiveArea);

extern REDADllExport 
const char *
REDAWorker_getName(const struct REDAWorker *worker);

extern REDADllExport 
void *
REDAWorker_getObject(const struct REDAWorker *worker,
	             struct REDAObjectPerWorker *objectPerWorker);

extern REDADllExport 
void *
REDAWorker_assertObject(struct REDAWorker *worker,
	                struct REDAObjectPerWorker *objectPerWorker);

extern REDADllExport 
void
REDAWorker_destroyObject(struct REDAWorker *worker,
                         struct REDAObjectPerWorker *objectPerWorker,
                         struct REDAWorker *callingThreadWorker);


  #define REDA_WORKER_STORAGE_EXCEEDS_MAX (1)


  #define REDA_WORKER_STORAGE_ALREADY_EXISTS (2)


  #define REDA_WORKER_STORAGE_OUT_OF_MEMORY (3)


/*e \ingroup REDAWorkerEnterExclusiveAreaFailStatus
  @brief Not permitted to enter the exclusive area.
*/
  #define REDA_WORKER_EXCLUSIVE_AREA_FORBIDDEN (1)
/*e \ingroup REDAWorkerEnterExclusiveAreaFailStatus
  @brief Failed to enter or leave REDAExclusiveArea.
*/
  #define REDA_WORKER_EXCLUSIVE_AREA_FAILURE (2)

extern REDADllExport RTIBool 
REDAWorker_enterExclusiveArea(struct REDAWorker *worker, 
                              int *failStatus, 
                              const struct REDAExclusiveArea *exclusiveArea);

extern REDADllExport RTIBool 
REDAWorker_leaveExclusiveArea(struct REDAWorker *worker, 
                              int *failStatus,
                              const struct REDAExclusiveArea *exclusiveArea);

extern REDADllExport struct REDAWorkerFactory*
REDAWorker_getFactory(struct REDAWorker *worker);

struct REDAWorkerFactoryInfo {
    /*e */
    void* workerFactoryId;
    /*e */
    int workerCount;
    /*e */
    int maxObjectPerWorker;
    /*e */
    int objectPerWorkerCount;
};

extern REDADllExport struct REDAWorkerFactoryInfo *
REDAWorkerFactoryInfo_new(struct REDAWorkerFactory *workerFactory);

extern REDADllExport void
REDAWorkerFactoryInfo_delete(struct REDAWorkerFactoryInfo *info);

extern REDADllExport void
REDAWorkerFactoryInfo_print(struct REDAWorkerFactoryInfo *info, int indent,
			    int verbosity);

struct REDAWorkerInfo {
    /*e */
    void* workerId;
    /*e */
    const char *name;
    /*e */
    int inEACount;
    /*e */
    int highestInEALevel;
    /*e */
    int workerSpecificObjectCount;
};

extern REDADllExport struct REDAWorkerInfo *
REDAWorkerInfo_new(struct REDAWorker *worker);

extern REDADllExport void
REDAWorkerInfo_delete(struct REDAWorkerInfo *info);

extern REDADllExport void
REDAWorkerInfo_print(struct REDAWorkerInfo *info, int indent, int verbosity);

struct REDAExclusiveAreaInfo {
    /*e ID */
    void* exclusiveAreaId;
    /*e WorkerInfo */
    struct REDAWorkerInfo *workerInEAInfo;
    /*e Number of time the worker has entered the EA */
    int enteredCount;
    /*e The EA's level */
    int level;
    /*e The reference count (0 for non-reference-counting EA's) */
    int refCount;
};

extern REDADllExport struct REDAExclusiveAreaInfo *
REDAExclusiveAreaInfo_new(struct REDAExclusiveArea *exclusiveArea);

extern REDADllExport void
REDAExclusiveAreaInfo_delete(struct REDAExclusiveAreaInfo *info);

extern REDADllExport void
REDAExclusiveAreaInfo_print(struct REDAExclusiveAreaInfo *info, int indent,
			    int verbosity);

struct REDAWorkerPerThread;

extern REDADllExport
struct REDAWorkerPerThread * REDAWorkerPerThread_new(
        struct REDAWorkerFactory * workerFactory);

extern REDADllExport
struct REDAWorkerPerThread * REDAWorkerPerThread_newWithTss(
        struct REDAWorkerFactory * workerFactory,
        RTIOsapiThreadTssFactory *tss);

extern REDADllExport
void REDAWorkerPerThread_delete(struct REDAWorkerPerThread * self);

extern REDADllExport
struct REDAWorker * REDAWorkerPerThread_getWorkerWithName(
        struct REDAWorkerPerThread * self,
        const char * workerName);

extern REDADllExport
struct REDAWorker * REDAWorkerPerThread_getWorker(
        struct REDAWorkerPerThread * self);

extern REDADllExport
void REDAWorkerPerThread_deleteWorker(struct REDAWorkerPerThread * self);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "reda/reda_worker_impl.h"

#endif /* reda_worker_h */
