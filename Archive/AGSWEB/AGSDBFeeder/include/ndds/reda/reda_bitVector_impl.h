/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)reda_bitVector_impl.h    generated by: makeheader    Fri Feb 16 13:51:17 2018
 *
 *		built from:	bitVector_impl.ifc
 */

#ifndef reda_bitVector_impl_h
#define reda_bitVector_impl_h



#include "limits.h"

  #ifndef reda_dll_h
    #include "reda/reda_dll.h"
  #endif
  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef osapi_alignment_h
    #include "osapi/osapi_alignment.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


struct REDABitVector {
    RTI_UINT8 *_bitfield;
    RTI_UINT32 _bitfieldSize;
    RTI_INT32 _bitfieldSizeInBytes;    
};


        
/** \ingroup REDABitVectorClass
 * 
 * @brief Returns a bit within the BitVector
 *
 * @param bitPosition   The requested bit position of the BitVector starting by 0
 *
 * @return              The value of the bit.
 */
#define REDABitVector_getBit(selfPointer, bitPosition) \
        (((selfPointer)->_bitfield[(bitPosition) / 8] >> ((bitPosition) % 8) ) & 0x01 )


/** \ingroup REDABitVectorClass
 * 
 * @brief set a bit within the BitVector to 1
 *
 * @param bitPosition   The requested bit position of the BitVector starting by 0
 *
 */
#define REDABitVector_setBitToOne(selfPointer, bitPosition) \
        (selfPointer)->_bitfield[(bitPosition) / 8] |= \
                (((RTI_UINT32)1) << ((bitPosition) % 8) )

/** \ingroup REDABitVectorClass
 * 
 * @brief set a bit within the BitVector to zero
 *
 * @param bitPosition   The requested bit postion of the BitVector starting by 0
 *
 */
#define REDABitVector_setBitToZero(selfPointer, bitPosition) \
        (selfPointer)->_bitfield[(bitPosition) / 8] &= \
                ~( ((RTI_UINT32)1) << ((bitPosition) % 8) )  

/** \ingroup REDABitVectorClass
 * 
 * @brief set a bit within the BitVector to to the specified value.
 * 
 * This operation will mask to the least significant bit of the bit value.
 *
 * @param bitPosition   The requested bit postion of the BitVector starting by 0
 * @param bitValue      The value of the bit. Either 1 or 0
 *
 */
#define REDABitVector_setBit(selfPointer, bitPosition, bitValue) {\
        int bytePosition = (bitPosition) / 8; \
        int relativeBitPosition = (bitPosition) % 8; \
        int currentByteWithBitReset = 0; \
        \
        currentByteWithBitReset = \
                (selfPointer)->_bitfield[bytePosition] \
                & ~( ((RTI_UINT32)1) << relativeBitPosition); \
        (selfPointer)->_bitfield[bytePosition] = \
                currentByteWithBitReset \
                | (((bitValue) && 0x01) << relativeBitPosition); \
}

/** \ingroup REDABitVectorClass
 * 
 * @brief REturns the underlying char array
 *
 * @param self          The bit BitVector to be modified
 * @param bitPosition   The requested bit postion of the BitVector starting by 0
 * @param bitValue      The value of the bit
 *
 */
#define REDABitVector_getCharArray(selfPointer) (selfPointer)->_bitfield 
        


#ifdef __cplusplus
    }	/* extern "C" */
#endif


#endif /* reda_bitVector_impl_h */
