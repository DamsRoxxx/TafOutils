/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)reda_bloomFilter_impl.h    generated by: makeheader    Fri Feb 16 13:51:17 2018
 *
 *		built from:	bloomFilter_impl.ifc
 */

#ifndef reda_bloomFilter_impl_h
#define reda_bloomFilter_impl_h



#include "limits.h"

  #ifndef reda_dll_h
    #include "reda/reda_dll.h"
  #endif
  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef osapi_alignment_h
    #include "osapi/osapi_alignment.h"
  #endif
   #ifndef reda_bitVector_h
    #include "reda/reda_bitVector.h"
  #endif
  
  #ifndef reda_bloomFilter_h
    #include "reda/reda_bloomFilter.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


struct REDABloomFilter {
    /*e @brief Underlying bit vector */
    struct REDABitVector *bitVector;

    /*e @brief number of element hashes */
    RTI_UINT16 hashCount;
    /*e @brief A hash array buffer to provide as an output for the hash definition */
    RTI_UINT32 *hashes;

    /*e @brief Concrete hash definition */
    struct REDABloomFilterHashDefinition hashDefinition;

    /*e @brief The number of elements present in this BloomFilter */
    RTI_UINT32 elementSetSize;
};



/*e \ingroup REDABloomFilterClass
 * 
 * @brief Queries a element provided the expected positions that must be set
 * in this BloomFilter's bit vector.
 *
 * @param   bitPositions   The positions in the map to be checked. Length must
 *                         be equal to the number of hashes.
 * @param   isElementInFilter   The result of the query
 *                              <code>1</code> if the element is in the bloom filter
 */
#define REDABloomFilter_queryElementFromBitPositions( \
        selfPointer, \
        bitPositions, \
        isElementInFilterPtr) \
    {\
        int i = 0; \
        for(i = 0; i < (selfPointer)->hashCount; i++) \
        { \
            (*isElementInFilterPtr) = REDABitVector_getBit( \
                    (selfPointer)->bitMap, \
                    (bitPositions)[i]); \
            if (! (*isElementInFilterPtr)) {\
                break; \
            }\
        } \
    }
        

/*e \ingroup REDABloomFilterClass
 * 
 * @brief Returns the bit position within a bloom filter of the specified size
 * from a a hash array. 
 * The hash array is an array of bytes that represent up to 'offset' number of 
 * hashes. The hash value is obtained as the integer value of the four consecutive
 * bytes from the specified offset. 
 *
 * NOTE: Valid only for size < 65536 bits
 *
 * @param hashPtr    hash value byte array
 * @param offset     First position to consider inside the hash value byte array
 */
#define REDABloomFilter_hashValueToBitPosition(hashPtr, offset, bfSizeInBits) \
        ( ((int) (hashPtr)[offset] + ( ((int) (hashPtr)[(offset) + 1]) << 8) ) % (bfSizeInBits)f )
        


#ifdef __cplusplus
    }	/* extern "C" */
#endif


#endif /* reda_bloomFilter_impl_h */
