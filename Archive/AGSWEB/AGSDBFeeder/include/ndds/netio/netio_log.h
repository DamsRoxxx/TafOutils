/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)netio_log.h    generated by: makeheader    Fri Feb 16 13:51:35 2018
 *
 *		built from:	log.ifc
 */

#ifndef netio_log_h
#define netio_log_h


  #ifndef osapi_ntptime_h
    #include "osapi/osapi_ntptime.h"
  #endif
  #ifndef log_common_h
    #include "log/log_common.h"
  #endif
  #ifndef reda_sequenceNumber_h
    #include "reda/reda_sequenceNumber.h"
  #endif
  #ifndef netio_dll_h
    #include "netio/netio_dll.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


/*e \ingroup RTINetioLogMessageClass
  \brief Not really a submodule per se, but a way to get unique number for
  transport API error code
  @see RTILogNumberBitmapClass
 */
  #define SUBMODULE_NETIO_TRANSPORT       (0x0000)

/*e \ingroup RTINetioLogMessageClass
  \brief Netio core submodule identifier. For use in log message numbers.
  @see RTILogNumberBitmapClass
 */
  #define SUBMODULE_NETIO_CORE            (0x1000)
/*e \ingroup RTINetioLogMessageClass
  \brief Netio transport table submodule identifier. For use in log message numbers.
  @see RTILogNumberBitmapClass
 */
  #define SUBMODULE_NETIO_CONFIGURATOR    (0x5000)
/*e \ingroup RTINetioLogMessageClass
  \brief Netio sender submodule identifier. For use in log message numbers.
  @see RTILogNumberBitmapClass
 */
  #define SUBMODULE_NETIO_SENDER          (0x6000)
/*e \ingroup RTINetioLogMessageClass
  \brief Netio receiver submodule identifier. For use in log message numbers.
  @see RTILogNumberBitmapClass
 */
  #define SUBMODULE_NETIO_RECEIVER        (0x7000)


  #define RTI_NETIO_SUBMODULE_MASK_COMMON         (0x0001)


  #define RTI_NETIO_SUBMODULE_MASK_CONFIGURATOR (0x0010)


  #define RTI_NETIO_SUBMODULE_MASK_SENDER       (0x0020)


  #define RTI_NETIO_SUBMODULE_MASK_RECEIVER     (0x0040)


  #define RTI_NETIO_SUBMODULE_MASK_ALL          (0xFFFF)

extern RTINetioDllVariable const struct RTILogMessage RTI_NETIO_LOG_SEND_FAILURE_s;

extern RTINetioDllExport void RTINetioLog_setVerbosity(
    RTILogBitmap submoduleMask, int verbosity);

extern RTINetioDllExport void RTINetioLog_setBitmaps(
    RTILogBitmap submoduleMask, RTILogBitmap instrumentationMask);

extern RTINetioDllExport void RTINetioLog_getBitmaps(
    RTILogBitmap *submoduleMask, RTILogBitmap *instrumentationMask);

struct REDABuffer; /* forward declare to appease compiler */

struct REDAWorker;

struct RTINetioWorkerStat {
    /*e # bytes sent through this worker so far */
    struct REDASequenceNumber bytesSent;
    /*e # bytes received with this worker so far */
    struct REDASequenceNumber bytesReceived;

    /*e The last time this worker started the RTINetioSender_sendFast
      operation.  If the worker is still sending, timeSendExited may be
      less than this time.
    */
    struct RTINtpTime timeSendEntered;

    /*e The last time this worker finished a SUCCESSFUL send operation on
       RTINetioSender.  */
    struct RTINtpTime timeSendExited;

    /*e The last time this worker started RTINetioReceiver_receiveFast. */
    struct RTINtpTime timeReceiveEntered;

    /*e The last time this worker finished RTINetioReceiver_receiveFast */
    struct RTINtpTime timeReceiveExited;
};

struct REDAWorkerFactory;

extern RTINetioDllExport RTIBool
RTINetioWorkerStat_init(struct REDAWorkerFactory *workerFactory);

extern RTINetioDllExport void
RTINetioWorkerStat_finalize(struct REDAWorkerFactory *workerFactory,
                            struct REDAWorker *worker);

extern RTINetioDllExport void
RTINetioWorkerStat_print(const void *stat, const char *desc,  int indent);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

/* pick up performance boosting macros */
  #include "netio/netio_common_stat_impl.h"

#endif /* netio_log_h */
