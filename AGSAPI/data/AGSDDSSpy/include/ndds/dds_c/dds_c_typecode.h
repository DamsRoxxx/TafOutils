/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)dds_c_typecode.h    generated by: makeheader    Fri Feb 16 13:51:58 2018
 *
 *		built from:	typecode.ifc
 */

#ifndef dds_c_typecode_h
#define dds_c_typecode_h


#include "dds_c/dds_c_common.h"
#include "dds_c/dds_c_infrastructure.h"

#ifndef cdr_typeCode_h
  #include "cdr/cdr_typeCode.h"
#endif

#ifndef dds_c_sequence_h
  #include "dds_c/dds_c_sequence.h"
#endif

#ifdef __cplusplus
    extern "C" {
#endif


typedef enum {
    /*e \dref_TCKind_TK_NULL
     */
    DDS_TK_NULL,

    /*e \dref_TCKind_TK_SHORT
     */    
    DDS_TK_SHORT, 

    /*e \dref_TCKind_TK_LONG
     */    
    DDS_TK_LONG, 
    
    /*e \dref_TCKind_TK_USHORT
     */    
    DDS_TK_USHORT,
    
    /*e \dref_TCKind_TK_ULONG
     */        
    DDS_TK_ULONG,
    
    /*e \dref_TCKind_TK_FLOAT
     */        
    DDS_TK_FLOAT,
    
    /*e \dref_TCKind_TK_DOUBLE
     */        
    DDS_TK_DOUBLE,
    
    /*e \dref_TCKind_TK_BOOLEAN
     */        
    DDS_TK_BOOLEAN,
    
    /*e \dref_TCKind_TK_CHAR
     */
    DDS_TK_CHAR,
    
    /*e \dref_TCKind_TK_OCTET
     */        
    DDS_TK_OCTET,
    
    /*e \dref_TCKind_TK_STRUCT
     */        
    DDS_TK_STRUCT,
    
    /*e \dref_TCKind_TK_UNION
     */        
    DDS_TK_UNION,
    
    /*e \dref_TCKind_TK_ENUM
     */        
    DDS_TK_ENUM,
    
    /*e \dref_TCKind_TK_STRING
     */        
    DDS_TK_STRING,
    
    /*e \dref_TCKind_TK_SEQUENCE
     */        
    DDS_TK_SEQUENCE,
    
    /*e \dref_TCKind_TK_ARRAY
     */        
    DDS_TK_ARRAY, 
    
    /*e \dref_TCKind_TK_ALIAS
     */        
    DDS_TK_ALIAS,
    
    /*e \dref_TCKind_TK_LONGLONG
     */        
    DDS_TK_LONGLONG,
    
    /*e \dref_TCKind_TK_ULONGLONG
     */        
    DDS_TK_ULONGLONG,
    
    /*e \dref_TCKind_TK_LONGDOUBLE
     */        
    DDS_TK_LONGDOUBLE,
    
    /*e \dref_TCKind_TK_WCHAR
     */        
    DDS_TK_WCHAR,
    
    /*e \dref_TCKind_TK_WSTRING
     */        
    DDS_TK_WSTRING,

    /*e \dref_TCKind_TK_VALUE
     */
    DDS_TK_VALUE,

    /*i \dref_TCKind_TK_SPARSE
     */
    DDS_TK_SPARSE,

    /*i \dref_TCKind_TK_RAW_BYTES
     */
    DDS_TK_RAW_BYTES = 0x7e,

    /*i \dref_TCKind_TK_RAW_BYTES_KEYED
     */
    DDS_TK_RAW_BYTES_KEYED = 0x7f,
    
    /*i \dref_TCKind_TK_FINAL
    */
    DDS_TK_FINAL_EXTENSIBILITY = 0x4000,
    
    /*i \dref_TCKind_TK_MUTABLE
    */
    DDS_TK_MUTABLE_EXTENSIBILITY = 0x2000  

} DDS_TCKind;

typedef enum {
    /*e \dref_ExtensibilityKind_FINAL_EXTENSIBILITY
     */    
    DDS_FINAL_EXTENSIBILITY, 
    /*e \dref_ExtensibilityKind_EXTENSIBLE_EXTENSIBILITY
     */    
    DDS_EXTENSIBLE_EXTENSIBILITY, 
    /*e \dref_ExtensibilityKind_MUTABLE_EXTENSIBILITY
     */        
    DDS_MUTABLE_EXTENSIBILITY
} DDS_ExtensibilityKind;


/*e \dref_TypeCode_MEMBER_ID_INVALID
*/
#define DDS_TYPECODE_MEMBER_ID_INVALID 0x7FFFFFFFL

/*i \dref_TypeCode_MEMBER_ID_SPARSE_UNSPECIFIED
*/
#define DDS_TYPECODE_MEMBER_ID_SPARSE_UNSPECIFIED 0

/*i \dref_TypeCode_MEMBER_ID_SPARSE_RESERVED_BEGIN
*/
#define DDS_TYPECODE_MEMBER_ID_SPARSE_RESERVED_BEGIN 0xFFF0

/*e \dref_TypeCode_INDEX_INVALID
*/
#define DDS_TYPECODE_INDEX_INVALID (unsigned long)0xFFFFFFFF


/*e \dref_TypeCode_NOT_BITFIELD
*/
#define DDS_TYPECODE_NOT_BITFIELD  (-1)

typedef short DDS_ValueModifier;


/*e \dref_ValueModifier_VM_NONE
*/
#define DDS_VM_NONE (short)0

/*e \dref_ValueModifier_VM_CUSTOM
*/
#define DDS_VM_CUSTOM (short)1

/*e \dref_ValueModifier_VM_ABSTRACT
*/
#define DDS_VM_ABSTRACT (short)2

/*e \dref_ValueModifier_VM_TRUNCATABLE
*/
#define DDS_VM_TRUNCATABLE (short)3


typedef short DDS_Visibility;


/*e \dref_Visibility_PRIVATE_MEMBER
*/
#define DDS_PRIVATE_MEMBER (short)0
/*e \dref_Visibility_PUBLIC_MEMBER
*/
#define DDS_PUBLIC_MEMBER (short)1

typedef DDS_Octet DDS_MemberType;


/*e \dref_TypeCode_NONKEY_MEMBER
*/
#define DDS_TYPECODE_NONKEY_MEMBER (DDS_Octet)0

/*e \dref_TypeCode_KEY_MEMBER
*/
#define DDS_TYPECODE_KEY_MEMBER (DDS_Octet)1

/*e \dref_TypeCode_NONKEY_REQUIRED_MEMBER
*/
#define DDS_TYPECODE_NONKEY_REQUIRED_MEMBER (DDS_Octet)2


#ifdef RTI_CPP
#define DDS_TYPECODE_DLL_EXPORT DDSCPPDllExport
#else
#define DDS_TYPECODE_DLL_EXPORT DDSCDllExport
#endif /* RTI_CPP */

typedef struct RTICdrTypeCodeMember DDS_TypeCode_Member;

typedef struct RTICdrTypeCodeRepresentation DDS_TypeCode_Representation;


struct DDS_TYPECODE_DLL_EXPORT DDS_TypeCode {
    RTICdrTypeCode _data;
    #ifdef RTI_CPP
    /* Methods */
    /*e \dref_TypeCode_kind */
    DDS_TCKind kind(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_extensibility_kind */
    DDS_ExtensibilityKind extensibility_kind(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_equal */
    DDS_Boolean equal(const DDS_TypeCode * tc,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_name */
    const char * name(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_member_count */
    DDS_UnsignedLong member_count(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_member_name */
    const char * member_name(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_find_member_by_name */
    DDS_UnsignedLong find_member_by_name(
            const char * name,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_member_type */
    DDS_TypeCode * member_type(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_member_label_count */
    DDS_UnsignedLong member_label_count(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_member_label */
    DDS_Long member_label(DDS_UnsignedLong member_index,DDS_UnsignedLong label_index,
                          DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_member_ordinal */
    DDS_Long member_ordinal(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*i \dref_TypeCode_find_member_by_label */
    DDS_UnsignedLong find_member_by_label(
            DDS_Long label,DDS_ExceptionCode_t & ex) const;
    /*i \dref_TypeCode_get_member_flags */
    DDS_Octet get_member_flags(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_is_member_key */
    DDS_Boolean is_member_key(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_is_member_required */
    DDS_Boolean is_member_required(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_is_member_pointer */
    DDS_Boolean is_member_pointer(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_is_member_bitfield */
    DDS_Boolean is_member_bitfield(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_member_bitfield_bits */
    DDS_Short member_bitfield_bits(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_member_visibility */
    DDS_Visibility member_visibility(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_discriminator_type */
    DDS_TypeCode * discriminator_type(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_length */
    DDS_UnsignedLong length(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_array_dimension_count */
    DDS_UnsignedLong array_dimension_count(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_array_dimension */
    DDS_UnsignedLong array_dimension(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_element_count */
    DDS_UnsignedLong element_count(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_content_type */
    DDS_TypeCode * content_type(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_is_alias_pointer */
    DDS_Boolean is_alias_pointer(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_default_index */
    DDS_Long default_index(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_concrete_base_type */
    DDS_TypeCode * concrete_base_type(DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_type_modifier */
    DDS_ValueModifier type_modifier(DDS_ExceptionCode_t & ex) const;

    /*e \dref_TypeCode_member_id */
    DDS_Long member_id(
        DDS_UnsignedLong index,
        DDS_ExceptionCode_t & ex) const;
    /*e \dref_TypeCode_find_member_by_id */
    DDS_UnsignedLong find_member_by_id(
        DDS_Long id,
        DDS_ExceptionCode_t & ex) const;
    /*i \dref_TypeCode_member_representation_count */
    DDS_UnsignedLong member_representation_count(
            DDS_UnsignedLong index,DDS_ExceptionCode_t & ex) const;
    /*i \dref_TypeCode_member_representation_id */
    DDS_Long member_representation_id(
        DDS_UnsignedLong mIndex,
        DDS_UnsignedLong rIndex,DDS_ExceptionCode_t & ex) const;
    /*i \dref_TypeCode_is_member_representation_pointer */
    DDS_Boolean is_member_representation_pointer(
        DDS_UnsignedLong mIndex,
        DDS_UnsignedLong rIndex,DDS_ExceptionCode_t & ex) const;
    /*i \dref_TypeCode_is_member_representation_bitfield */ 
    DDS_Boolean is_member_representation_bitfield(
        DDS_UnsignedLong mIndex,
        DDS_UnsignedLong rIndex,
        DDS_ExceptionCode_t & ex) const;
    /*i \dref_TypeCode_member_representation_bitfield_bits */
    DDS_Short member_representation_bitfield_bits(
        DDS_UnsignedLong mIndex,
        DDS_UnsignedLong rIndex,
        DDS_ExceptionCode_t & ex) const;
    /*i \dref_TypeCode_member_representation_type */
    DDS_TypeCode * member_representation_type(
        DDS_UnsignedLong mIndex,
        DDS_UnsignedLong rIndex,
        DDS_ExceptionCode_t & ex) const;

    /*i \dref_TypeCode_get_serialized_size */
    DDS_UnsignedLong get_serialized_size(
        DDS_ExceptionCode_t & ex) const;
        
     /*e \dref_TypeCode_get_type_object_serialized_size */
    DDS_UnsignedLong get_type_object_serialized_size(
        DDS_ExceptionCode_t & ex) const;       

    /*e \dref_TypeCode_add_member_to_enum */
    DDS_UnsignedLong add_member_to_enum(
        const char * name,
        DDS_Long ordinal,
        DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCode_add_member_to_union */
    DDS_UnsignedLong add_member_to_union(
        const char * name,
        DDS_Long id,
        const DDS_LongSeq & labels,
        const DDS_TypeCode *tc,
        DDS_Boolean is_pointer,
        DDS_ExceptionCode_t & ex);

    /*e \dref_TypeCode_add_member */
    DDS_UnsignedLong add_member(
        const char * name,
        DDS_Long id, /* or label */
        const DDS_TypeCode *tc,
        DDS_Octet member_flags,
        DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCode_add_member_ex */
    DDS_UnsignedLong add_member_ex(
        const char * name,
        DDS_Long id, /* or label */
        const DDS_TypeCode *tc,
        DDS_Octet member_flags,
        DDS_Visibility visibility,
        DDS_Boolean is_pointer,
        DDS_Short bits,
        DDS_ExceptionCode_t & ex);

    /*i \dref_TypeCode_add_representation */
    DDS_UnsignedLong add_representation(
        const char * name,
        DDS_Long new_id,
        const DDS_TypeCode *tc,
        DDS_ExceptionCode_t & ex);

    /*i \dref_TypeCode_add_representation_ex */
    DDS_UnsignedLong add_representation_ex(
        const char * name,
        DDS_Long new_id,
        const DDS_TypeCode *tc,
        DDS_Boolean is_pointer,
        DDS_Short bits,
        DDS_ExceptionCode_t & ex);

    /*e \dref_TypeCode_print_IDL */
    void print_IDL(DDS_UnsignedLong indent,DDS_ExceptionCode_t & ex) const;        
    #endif    
};


typedef struct DDS_TypeCode DDS_TypeCode;


struct DDS_StructMember {
    /*e \dref_StructMember_name */
    char * name;
    /*e \dref_StructMember_type */
    const DDS_TypeCode * type;
    /*e \dref_StructMember_is_pointer */
    DDS_Boolean is_pointer;
    /*e \dref_StructMember_bits */
    DDS_Short bits;
    /*e \dref_StructMember_is_key */
    DDS_Boolean is_key;
    /*e \dref_StructMember_id */
    DDS_Long id;
    /*e \dref_StructMember_is_optional */
    DDS_Boolean is_optional;
};


DDS_SEQUENCE(DDS_StructMemberSeq, struct DDS_StructMember);


struct DDS_UnionMember {
    /*e \dref_UnionMember_name */
    char * name;
    /*e \dref_UnionMember_is_pointer */
    DDS_Boolean is_pointer;
    /*e \dref_UnionMember_labels */
    struct DDS_LongSeq labels;
    /*e \dref_UnionMember_type */
    const DDS_TypeCode * type;
};


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

DDS_SEQUENCE(DDS_UnionMemberSeq, struct DDS_UnionMember);

#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif


struct DDS_EnumMember {
    /*e \dref_EnumMember_name */
    char * name;
    /*e \dref_EnumMember_ordinal */
    DDS_Long ordinal;
};


DDS_SEQUENCE(DDS_EnumMemberSeq,struct DDS_EnumMember);


struct DDS_ValueMember {
    /*e \dref_ValueMember_name */
    char * name;
    /*e \dref_ValueMember_type */
    const DDS_TypeCode * type;
    /*e \dref_ValueMember_is_pointer */
    DDS_Boolean is_pointer;
    /*e \dref_ValueMember_bits */
    DDS_Short bits;
    /*e \dref_ValueMember_is_key */
    DDS_Boolean is_key;
    /*e \dref_ValueMember_access */
    DDS_Visibility access;
    /*e \dref_ValueMember_id */
    DDS_Long id;
    /*e \dref_ValueMember_is_optional */
    DDS_Boolean is_optional;

};


DDS_SEQUENCE(DDS_ValueMemberSeq, struct DDS_ValueMember);


struct DDS_TYPECODE_DLL_EXPORT DDS_TypeCodeFactory {
    char _dummy; /* Win32 requires at least one field in the structure */
    #ifdef RTI_CPP
    /* Methods */
    /*e \dref_TypeCodeFactory_get_instance */
    static DDS_TypeCodeFactory * get_instance();
    /*e \dref_TypeCodeFactory_clone_tc */
    DDS_TypeCode * clone_tc(const DDS_TypeCode * tc,DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_delete_tc */
    void delete_tc(DDS_TypeCode * tc,DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_get_primitive_tc */
    const DDS_TypeCode * get_primitive_tc(DDS_TCKind tc_kind);
    /*e \dref_TypeCodeFactory_create_struct_tc */
    DDS_TypeCode * create_struct_tc(const char * name,
				    const DDS_StructMemberSeq & members,
				    DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_struct_tc_ex */
    DDS_TypeCode * create_struct_tc(const char * name,
                                    DDS_ExtensibilityKind extensibility_kind,
                                    const DDS_StructMemberSeq & members,
                                    DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_value_tc */
    DDS_TypeCode * create_value_tc(const char * name,
				   DDS_ValueModifier type_modifier,
				   const DDS_TypeCode * concrete_base,
				   const DDS_ValueMemberSeq & members,
				   DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_value_tc_ex */
    DDS_TypeCode * create_value_tc(const char * name,
                                   DDS_ExtensibilityKind extensibility_kind,
                                   DDS_ValueModifier type_modifier,
                                   const DDS_TypeCode * concrete_base,
                                   const DDS_ValueMemberSeq & members,
                                   DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_union_tc */
    DDS_TypeCode * create_union_tc(const char * name,
				   const DDS_TypeCode * discriminator_type,
			           DDS_Long default_index,
				   const DDS_UnionMemberSeq & members,
				   DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_union_tc_ex */
    DDS_TypeCode * create_union_tc(const char * name,
                                   DDS_ExtensibilityKind extensibility_kind,
                                   const DDS_TypeCode * discriminator_type,
                                   DDS_Long default_index,
                                   const DDS_UnionMemberSeq & members,
                                   DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_enum_tc */
    DDS_TypeCode * create_enum_tc(const char * name,
	                          const DDS_EnumMemberSeq & members,
			          DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_enum_tc_ex */
    DDS_TypeCode * create_enum_tc(const char * name,
                                  DDS_ExtensibilityKind extensibility_kind,
                                  const DDS_EnumMemberSeq & members,
                                  DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_alias_tc */
    DDS_TypeCode * create_alias_tc(const char * name,
				   const DDS_TypeCode * original_type,
				   DDS_Boolean is_pointer,
				   DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_string_tc */
    DDS_TypeCode * create_string_tc(DDS_UnsignedLong bound,
			            DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_wstring_tc */
    DDS_TypeCode * create_wstring_tc(DDS_UnsignedLong bound,
				     DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_sequence_tc */
    DDS_TypeCode * create_sequence_tc(DDS_UnsignedLong bound,
				      const DDS_TypeCode * element_type,
				      DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_array_tc */
    DDS_TypeCode * create_array_tc(const DDS_UnsignedLongSeq & dimensions,
				   const DDS_TypeCode * element_type,
				   DDS_ExceptionCode_t & ex);
    /*e \dref_TypeCodeFactory_create_array_tc_single_dim */
    DDS_TypeCode * create_array_tc(
                    DDS_UnsignedLong length,
                    const DDS_TypeCode* element_type,
                    DDS_ExceptionCode_t& ex);
    /*i \dref_TypeCodeFactory_create_sparse_tc */
    DDS_TypeCode * create_sparse_tc(const char * name,
				   DDS_ValueModifier type_modifier,
				   const DDS_TypeCode * concrete_base,
				   DDS_ExceptionCode_t & ex);
    /*i \dref_TypeCodeFactory_create_raw_bytes_tc */
    DDS_TypeCode * create_raw_bytes_tc(DDS_UnsignedLong bound,
                                       DDS_Boolean is_keyed,
                                       DDS_ExceptionCode_t & ex);
    /*i \dref_TypeCodeFactory_create_tc_from_xml_file */
    DDS_TypeCode * create_tc_from_xml_file(const char * file_name,
                                           const char * type_name,
                                           struct DDS_StringSeq & include_paths,
                                           DDS_UnsignedLong unbounded_string_max_length,
                                           DDS_UnsignedLong unbounded_sequence_max_length,
                                           DDS_ExceptionCode_t & ex);
    #endif
};

 
typedef struct DDS_TypeCodeFactory DDS_TypeCodeFactory;


#define DDS_INITIALIZE_PRIMITIVE_TYPECODE(kind)\
    {{kind,DDS_BOOLEAN_FALSE,-1,NULL,NULL,0,0,NULL,0,NULL,DDS_VM_NONE}}
#define DDS_INITIALIZE_STRING_TYPECODE(maximum)\
    {{DDS_TK_STRING,DDS_BOOLEAN_FALSE,-1,NULL,NULL,maximum,0,NULL,0,NULL,DDS_VM_NONE}}
#define DDS_INITIALIZE_WSTRING_TYPECODE(maximum)\
    {{DDS_TK_WSTRING,DDS_BOOLEAN_FALSE,-1,NULL,NULL,maximum,0,NULL,0,NULL,DDS_VM_NONE}}
#define DDS_INITIALIZE_SEQUENCE_TYPECODE(maximum,typecode)\
    {{DDS_TK_SEQUENCE,DDS_BOOLEAN_FALSE,-1,NULL,typecode,maximum,0,NULL,0,NULL,DDS_VM_NONE}}
#define DDS_INITIALIZE_ARRAY_TYPECODE(dimensionsCount,dimension_1,dimensions,typecode)\
    {{DDS_TK_ARRAY,DDS_BOOLEAN_FALSE,-1,NULL,typecode,dimension_1,dimensionsCount,dimensions,0,NULL,DDS_VM_NONE}}
#define DDS_INITIALIZE_ALIAS_TYPECODE(dimension,typecode,pointer)\
    {{DDS_TK_ALIAS,pointer,-1,NULL,typecode,dimension,0,NULL,0,NULL,DDS_VM_NONE}}

extern DDSCDllExport DDS_TCKind DDS_TypeCode_kind(const DDS_TypeCode * self,
                                                  DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_ExtensibilityKind DDS_TypeCode_extensibility_kind(
        const DDS_TypeCode * self,
        DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Boolean DDS_TypeCode_equal(const DDS_TypeCode * self,
                                                    const DDS_TypeCode * tc,
                                                    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Boolean DDS_TypeCode_is_subset(const DDS_TypeCode * self,
                                                        const DDS_TypeCode * tc,
                                                        DDS_ExceptionCode_t * ex);

extern DDSCDllExport const char * DDS_TypeCode_name(const DDS_TypeCode * self,
                                                    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_member_count(const DDS_TypeCode * self,
                                                                DDS_ExceptionCode_t * ex);

extern DDSCDllExport const char * DDS_TypeCode_member_name(const DDS_TypeCode * self,
                                                           DDS_UnsignedLong index,
                                                           DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_find_member_by_name(
    const DDS_TypeCode * self,
    const char * name,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCode_member_type(const DDS_TypeCode * self,
                                                             DDS_UnsignedLong index,
                                                             DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_member_label_count(const DDS_TypeCode * self,
                                                                      DDS_UnsignedLong index,
                                                                      DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Long DDS_TypeCode_member_label(const DDS_TypeCode * self,
                                                        DDS_UnsignedLong member_index,
                                                        DDS_UnsignedLong label_index,
                                                        DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Long DDS_TypeCode_member_ordinal(const DDS_TypeCode * self,
                                                          DDS_UnsignedLong index,
                                                          DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_find_member_by_label(
    const DDS_TypeCode * self,
    DDS_Long label, /* or ordinal */
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Octet DDS_TypeCode_get_member_flags(const DDS_TypeCode * self,
                                                             DDS_UnsignedLong index,
                                                             DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Boolean DDS_TypeCode_is_member_key(const DDS_TypeCode * self,
                                                            DDS_UnsignedLong index,
                                                            DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Boolean DDS_TypeCode_is_member_required(const DDS_TypeCode * self,
                                                                 DDS_UnsignedLong index,
                                                                 DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Boolean DDS_TypeCode_is_member_pointer(const DDS_TypeCode * self,
                                                                DDS_UnsignedLong index,
                                                                DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Boolean DDS_TypeCode_is_member_bitfield(const DDS_TypeCode * self,
                                                                 DDS_UnsignedLong index,
                                                                 DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Short DDS_TypeCode_member_bitfield_bits(const DDS_TypeCode * self,
                                                                 DDS_UnsignedLong index,
                                                                 DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Visibility DDS_TypeCode_member_visibility(const DDS_TypeCode * self,
                                                                   DDS_UnsignedLong index,
                                                                   DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCode_discriminator_type(const DDS_TypeCode * self,
                                                                    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_length(const DDS_TypeCode * self,
                                                          DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_array_dimension_count(
    const DDS_TypeCode * self,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_array_dimension(const DDS_TypeCode * self,
                                                                   DDS_UnsignedLong index,
                                                                   DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_element_count(const DDS_TypeCode * self,
                                                                 DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCode_content_type(const DDS_TypeCode * self, 
                                                              DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Boolean DDS_TypeCode_is_alias_pointer(const DDS_TypeCode * self,
                                                               DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Long DDS_TypeCode_default_index(const DDS_TypeCode * self,
                                                         DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCode_concrete_base_type(const DDS_TypeCode * self,
                                                                    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_ValueModifier DDS_TypeCode_type_modifier(const DDS_TypeCode * self,
                                                                  DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_find_member_by_id(
    const DDS_TypeCode * self,
    DDS_Long id,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_find_member_by_idI(
    const DDS_TypeCode * self,
    DDS_UnsignedLong * rIndexOut,
    DDS_Long id,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_member_representation_count(
    const DDS_TypeCode * self,
    DDS_UnsignedLong index,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Long DDS_TypeCode_member_representation_id(
    const DDS_TypeCode * self,
    DDS_UnsignedLong mIndex,
    DDS_UnsignedLong rIndex,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Long DDS_TypeCode_member_id(
    const DDS_TypeCode * self,
    DDS_UnsignedLong index,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Boolean DDS_TypeCode_is_member_representation_pointer(
    const DDS_TypeCode * self,
    DDS_UnsignedLong mIndex,
    DDS_UnsignedLong rIndex,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Boolean DDS_TypeCode_is_member_representation_bitfield(
    const DDS_TypeCode * self,
    DDS_UnsignedLong mIndex,
    DDS_UnsignedLong rIndex,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Short DDS_TypeCode_member_representation_bitfield_bits(
    const DDS_TypeCode * self,
    DDS_UnsignedLong mIndex,
    DDS_UnsignedLong rIndex,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCode_member_representation_type(
    const DDS_TypeCode * self,
    DDS_UnsignedLong mIndex,
    DDS_UnsignedLong rIndex,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_get_serialized_size(
    const DDS_TypeCode * self,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_get_type_object_serialized_size(
    const DDS_TypeCode * self,
    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_add_member_to_enum(
        DDS_TypeCode * self,
        const char * name,
        DDS_Long ordinal,
        DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_add_member_to_union(
        DDS_TypeCode * self,
        const char * name,
        DDS_Long id,
        const struct DDS_LongSeq *labels,
        const DDS_TypeCode *tc,
        DDS_Boolean is_pointer,
        DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_add_member(
        DDS_TypeCode * self,
        const char * name,
        DDS_Long id, /* or label */
        const DDS_TypeCode *tc,
        DDS_Octet member_flags,
        DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_add_member_ex(
        DDS_TypeCode * self,
        const char * name,
        DDS_Long id, /* or label */
        const DDS_TypeCode *tc,
        DDS_Octet member_flags,
        DDS_Visibility visibility,
        DDS_Boolean is_pointer,
        DDS_Short bits,
        DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_add_representation(
        DDS_TypeCode * self,
        const char * name,
        DDS_Long new_id,
        const DDS_TypeCode *tc,
        DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_UnsignedLong DDS_TypeCode_add_representation_ex(
        DDS_TypeCode * self,
        const char * name,
        DDS_Long new_id,
        const DDS_TypeCode *tc,
        DDS_Boolean is_pointer,
        DDS_Short bits,
        DDS_ExceptionCode_t * ex);

extern DDSCDllExport void DDS_TypeCode_print_IDL(const DDS_TypeCode * self,
                                                 DDS_UnsignedLong indent,
                                                 DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_Boolean DDS_TypeCode_is_keyed(
        DDS_TypeCode * self,
        DDS_ExceptionCode_t * ex);

extern DDSCDllExport
DDS_UnsignedLong DDS_TypeCode_get_cdr_serialized_sample_max_size(
        DDS_TypeCode * self, 
        DDS_Boolean include_encapsulation);

extern DDSCDllExport
DDS_Boolean DDS_TypeCode_has_mutable_aggregation_type(
    DDS_TypeCode *self, DDS_ExceptionCode_t *ex);

extern DDSCDllExport
DDS_Boolean DDS_TypeCode_is_unbounded(
    DDS_TypeCode *self, 
    DDS_Boolean keyOnly,
    DDS_ExceptionCode_t *ex);

extern DDSCDllExport
void DDS_TypeCode_cdr_to_parametrized_cdr(
    /* const */ struct RTICdrStream * src,
    struct RTICdrStream * dst,
    /* const */ DDS_TypeCode * tc,
    DDS_ExceptionCode_t *ex);

extern DDSCDllExport DDS_TypeCodeFactory * DDS_TypeCodeFactory_get_instance();

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_clone_tc(
							DDS_TypeCodeFactory * self,
							const DDS_TypeCode * tc,
							DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_clone_tc_optimizedI(
							DDS_TypeCodeFactory * self,
							const DDS_TypeCode * tc,
							DDS_ExceptionCode_t * ex);

extern DDSCDllExport void DDS_TypeCodeFactory_delete_tc(DDS_TypeCodeFactory * self,
							DDS_TypeCode * tc,
							DDS_ExceptionCode_t * ex);

extern DDSCDllExport const DDS_TypeCode * DDS_TypeCodeFactory_get_primitive_tc(
                                                        DDS_TypeCodeFactory * self,
                                                        DDS_TCKind tc_kind);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_struct_tc(
							DDS_TypeCodeFactory * self,
						        const char * name,
						        const struct DDS_StructMemberSeq * members,
						        DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_struct_tc_ex(
							DDS_TypeCodeFactory * self,
						        const char * name,
						        DDS_ExtensibilityKind extensibility_kind,
						        const struct DDS_StructMemberSeq * members,
						        DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_value_tc(
							DDS_TypeCodeFactory * self,
						        const char * name,
							DDS_ValueModifier type_modifier,
							const DDS_TypeCode * concrete_base,
						        const struct DDS_ValueMemberSeq * members,
						        DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_value_tc_ex(
							DDS_TypeCodeFactory * self,
						        const char * name,
                                                        DDS_ExtensibilityKind extensibility_kind,
						        DDS_ValueModifier type_modifier,
							const DDS_TypeCode * concrete_base,
						        const struct DDS_ValueMemberSeq * members,
						        DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_union_tc(
						   DDS_TypeCodeFactory * self,
						   const char * name,
						   const DDS_TypeCode * discriminator_type,
						   DDS_Long default_index,
						   const struct DDS_UnionMemberSeq * members,
						   DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_union_tc_ex(
                                                   DDS_TypeCodeFactory * self,
                                                   const char * name,
                                                   DDS_ExtensibilityKind extensibility_kind,
                                                   const DDS_TypeCode * discriminator_type,
                                                   DDS_Long default_index,
                                                   const struct DDS_UnionMemberSeq * members,
                                                   DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_enum_tc(
						  DDS_TypeCodeFactory * self,
						  const char * name,
					          const struct DDS_EnumMemberSeq * members,
						  DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_enum_tc_ex(
                                                  DDS_TypeCodeFactory * self,
                                                  const char * name,
                                                  DDS_ExtensibilityKind extensibility_kind,
                                                  const struct DDS_EnumMemberSeq * members,
                                                  DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_alias_tc(
                                                   DDS_TypeCodeFactory * self,
						   const char * name,
						   const DDS_TypeCode * original_type,
						   DDS_Boolean is_pointer,
						   DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_string_tc(
                                                    DDS_TypeCodeFactory * self,
						    DDS_UnsignedLong bound,
						    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_wstring_tc(
                                                    DDS_TypeCodeFactory * self,
						    DDS_UnsignedLong bound,
						    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_sequence_tc(
						    DDS_TypeCodeFactory * self,
						    DDS_UnsignedLong bound,
						    const DDS_TypeCode * element_type,
						    DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_array_tc(
                                                   DDS_TypeCodeFactory * self,
						   const struct DDS_UnsignedLongSeq * dimensions,
						   const DDS_TypeCode * element_type,
						   DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_sparse_tc(
                                                        DDS_TypeCodeFactory * self,
						        const char * name,
							DDS_ValueModifier type_modifier,
							const DDS_TypeCode * concrete_base,
							DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_raw_bytes_tc(
                                                   DDS_TypeCodeFactory * self,
                                                   DDS_UnsignedLong bound,
                                                   DDS_Boolean is_keyed,
                                                   DDS_ExceptionCode_t * ex);

extern DDSCDllExport DDS_TypeCode * DDS_TypeCodeFactory_create_tc_from_xml_file(
                                            DDS_TypeCodeFactory * self,
                                            const char * file_name,
                                            const char * type_name,
                                            struct DDS_StringSeq * include_paths,
                                            DDS_UnsignedLong unbounded_string_max_length,
                                            DDS_UnsignedLong unbounded_sequence_max_length,
                                            DDS_ExceptionCode_t * ex);

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_null;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_short;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_long;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_ushort;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_ulong;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_float;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_double;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_boolean;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_char;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_octet;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_longlong;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_ulonglong;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_longdouble;

extern DDSCDllVariable DDS_TypeCode DDS_g_tc_wchar;


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* dds_c_typecode_h */
