/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)pres_log.h    generated by: makeheader    Fri Feb 16 13:51:43 2018
 *
 *		built from:	log.ifc
 */

#ifndef pres_log_h
#define pres_log_h


  #ifndef log_common_h
    #include "log/log_common.h"
  #endif
  #ifndef osapi_ntptime_h
    #include "osapi/osapi_ntptime.h"
  #endif
  #ifndef reda_worker_h
    #include "reda/reda_worker.h"
  #endif
  #ifndef pres_dll_h
    #include "pres/pres_dll.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


  /* this is not a real submodule; just a way to get a unique number */
  #define SUBMODULE_PRES_COMMON              (0x1000)

  #define SUBMODULE_PRES_TYPE_PLUGIN         (0x2000)
  #define SUBMODULE_PRES_PARTICIPANT         (0x3000)
  #define SUBMODULE_PRES_PS_SERVICE          (0x4000)
  #define SUBMODULE_PRES_READER_QUEUE        (0x5000)
  #define SUBMODULE_PRES_PS_READER_QUEUE     (0x6000)
  #define SUBMODULE_PRES_CST_READER_COLLATOR (0x7000)
  #define SUBMODULE_PRES_CONDITION_WAITSET   (0x8000)
  #define SUBMODULE_PRES_WRITER_HISTORY_DRIVER (0x9000)
  #define SUBMODULE_PRES_LIVELINESS          (0xA000)
  #define SUBMODULE_PRES_LOCATOR_PING        (0xB000)
  #define SUBMODULE_PRES_SECURITY            (0xC000)

  #define PRES_SUBMODULE_MASK_COMMON                (0x0001)
  #define PRES_SUBMODULE_MASK_TYPE_PLUGIN           (0x0002)
  #define PRES_SUBMODULE_MASK_PARTICIPANT           (0x0004)
  #define PRES_SUBMODULE_MASK_PS_SERVICE            (0x0008)
  #define PRES_SUBMODULE_MASK_READER_QUEUE          (0x0010)
  #define PRES_SUBMODULE_MASK_PS_READER_QUEUE       (0x0020)
  #define PRES_SUBMODULE_MASK_CST_READER_COLLATOR   (0x0040)
  #define PRES_SUBMODULE_MASK_CONDITION_WAITSET     (0x0080)
  #define PRES_SUBMODULE_MASK_WRITER_HISTORY_DRIVER (0x0100)
  #define PRES_SUBMODULE_MASK_LIVELINESS            (0x0200)
  #define PRES_SUBMODULE_MASK_LOCATOR_PING          (0x0400)
  #define PRES_SUBMODULE_MASK_SECURITY              (0x0800)
  #define PRES_SUBMODULE_MASK_ALL                   (0xffff)

extern PRESDllExport
void PRESLog_setVerbosity(RTILogBitmap submoduleMask, int verbosity);

extern PRESDllExport
void PRESLog_setBitmaps(RTILogBitmap submoduleMask,
			RTILogBitmap instrumentationMask);

extern PRESDllExport
void PRESLog_getBitmaps(RTILogBitmap *submoduleMask,
			RTILogBitmap *instrumentationMask);

struct PRESWorkerStat {
    /*e \brief timestamped as soon as write() is entered
    */
    struct RTINtpTime timeWriteEntered;

    /*e \brief timestamped right before giving to lower layer
    */
    struct RTINtpTime timeWritten;

    /*e \brief timestamped right before write() returns to the higher layer.

      Since send is synchronous, the higher layer that called
      write would be blocked for the
      (timeWriteExited - timeWriteEntered) duration, ignoring the time spent
      in calling and exiting a function.
    */
    struct RTINtpTime timeWriteExited;

    /*e \brief timestamped right before invoking the listener on the higher
     layer for the first time (that is, subsquent callback is not clocked).
    */
    struct RTINtpTime timeHandedOff;

    /*e \brief timestamped right after coming back from the listener on the
      higher layer for the first time (that is, subsquent callback is not
      clocked).
    */
    struct RTINtpTime timeCallbackReturned;

    /*e \brief timestamped right before exiting listener callback

     @note For an RTPS message with multiple submessages, this timestamp will
     change for each completion of parsing a valid submessage

     The post processing time in PRES layer can be estimated by
     (timeReceiveExited - timeHandedOff) - (time spent in higher layer)
    */
    struct RTINtpTime timeReceiveExited;
};

extern PRESDllExport RTIBool
PRESWorkerStat_init(struct REDAWorkerFactory *workerFactory);

extern PRESDllExport void
PRESWorkerStat_finalize(struct REDAWorkerFactory* manager,
                        struct REDAWorker *worker);

extern PRESDllExport void
PRESWorkerStat_print(const void *stat, const char *desc, int indent);

extern PRESDllExport RTIBool
PRESWorkerStat_getStorageLazy(struct PRESWorkerStat **statPtr, 
			      struct REDAWorker *worker);

extern PRESDllVariable struct REDAObjectPerWorker *PRES_STAT_PER_WORKER;


#define PRESWorkerStat_getStorageLazy(statPtr, worker) \
    ( *(statPtr) = (struct PRESWorkerStat *)           \
        REDAWorker_assertObject(worker, PRES_STAT_PER_WORKER) )


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* pres_log_h */
