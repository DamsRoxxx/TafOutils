/* $Id$

(c) Copyright, Real-Time Innovations, 2014-2016.
All rights reserved.

No duplications, whole or partial, manual or electronic, may be made
without express written permission.  Any such copies, or
revisions thereof, must display this notice unaltered.
This code contains trade secrets of Real-Time Innovations, Inc.
*/

#ifndef RTI_DDS_DOMAIN_PARTICIPANT_CONFIG_PARAMS_HPP_
#define RTI_DDS_DOMAIN_PARTICIPANT_CONFIG_PARAMS_HPP_

// IMPORTANT: macros.hpp must be the first RTI header included in every header
// file so that symbols are exported correctly on Windows
#include <dds/core/macros.hpp>

#include "dds_c/dds_c_infrastructure.h"

#include <dds/core/types.hpp>
#include <dds/core/Value.hpp>
#include <dds/core/Exception.hpp>
#include <rti/core/NativeValueType.hpp>
#include <rti/core/OptionalValue.hpp>
#include <dds/domain/DomainParticipant.hpp>

namespace rti { namespace domain {
    class DomainParticipantConfigParams;
} }

namespace rti { namespace core {

class DomainParticipantConfigParamsAdapter {
public:
    typedef struct DDS_DomainParticipantConfigParams_t native_type;

    static void initialize(native_type& native_value)
    {
        DDS_DomainParticipantConfigParams_t_initialize(&native_value);
    }

    static void finalize(native_type& native_value)
    {
        DDS_DomainParticipantConfigParams_t_finalize(&native_value);
    }

    static void copy(native_type& destination, const native_type& source)
    {
        DDS_DomainParticipantConfigParams_t_copy(&destination, &source);
    }

    static bool equals(const native_type& first, const native_type& second)
    {
        return (DDS_DomainParticipantConfigParams_t_equals(&first, &second) == 
                DDS_BOOLEAN_TRUE);
    }
};

template <>
struct native_type_traits<rti::domain::DomainParticipantConfigParams> {
    typedef DomainParticipantConfigParamsAdapter adapter_type;
    typedef DDS_DomainParticipantConfigParams_t native_type;
};

} } // rti::core namespace

namespace rti { namespace domain {

/** 
 * @ingroup DDSDomainParticipantModule 
 * @headerfile "rti/domain/DomainParticipantConfigParams.hpp" 
 * @RTI_class_definition class DomainParticipantConfigParams 
 *  
 * @brief @extension @st_value_type Input paramaters for creating a participant 
 * from xml configuration. It allows modification of some of the 
 * properties of the entities defined in the configuration. 
 *  
 * @see dds::core::QosProvider::create_participant_from_config 
 */
class OMG_DDS_API DomainParticipantConfigParams : 
    public rti::core::NativeValueType<DomainParticipantConfigParams> {
public:
    RTI_NATIVE_VALUE_TYPE_DEFINE_DEFAULT_MOVE_OPERATIONS(DomainParticipantConfigParams)

    typedef rti::core::NativeValueType<DomainParticipantConfigParams> Base;
public:

    /** 
     * @brief Special value to be used to indicate that a participant should be 
     * created with an autogenerated entity name.
     */
    static OMG_DDS_API_CLASS_VARIABLE const std::string ENTITY_NAME_USE_XML_CONFIG;

    /**
     * @brief Special value to be used to indicate that entities should be 
     * created from the QoS profile specified in the participant configuration.
     */
    static OMG_DDS_API_CLASS_VARIABLE const std::string QOS_ELEMENT_NAME_USE_XML_CONFIG;

    /**
     * @brief Special value to be used to indicate that a 
     * participant should be created using the domain ID specified in the 
     * participant configuration.
     */
    static OMG_DDS_API_CLASS_VARIABLE const int32_t DOMAIN_ID_USE_XML_CONFIG;

public:
    /**
     * @brief Create a DomainParticipantConfigParams object with the specified 
     * values. 
     *  
     * All parameters are optional. If ommitted, the value for that parameter 
     * will be retrieved from the xml configuration. 
     * 
     * @param the_domain_id Domain ID from which the DomainParticipant is created. 
     * @param the_participant_name The name assigned to the DomainParticipant
     * @param the_participant_qos_library_name QoS library name containing the 
     * QoS profile from which the DDS_DomainParticipant is created. 
     * @param the_participant_qos_profile_name QoS profile name from which the 
     * DomainParticipant is created. 
     * @param the_domain_entity_qos_library_name QoS library name containing 
     * the QoS profile from which the all the entities defined under the 
     * participant configuraton are created. 
     * @param the_domain_entity_qos_profile_name QoS profile name from which 
     * the all the entities defined under the participant configuraton are created. 
     */
    DomainParticipantConfigParams(
        int32_t the_domain_id = 
            DOMAIN_ID_USE_XML_CONFIG, 
        const std::string& the_participant_name = 
            ENTITY_NAME_USE_XML_CONFIG, 
        const std::string& the_participant_qos_library_name = 
            QOS_ELEMENT_NAME_USE_XML_CONFIG, 
        const std::string& the_participant_qos_profile_name = 
            QOS_ELEMENT_NAME_USE_XML_CONFIG, 
        const std::string& the_domain_entity_qos_library_name = 
            QOS_ELEMENT_NAME_USE_XML_CONFIG, 
        const std::string& the_domain_entity_qos_profile_name = 
            QOS_ELEMENT_NAME_USE_XML_CONFIG)
    {
        domain_id(the_domain_id);
        participant_name(the_participant_name);        
        participant_qos_library_name(the_participant_qos_library_name);
        participant_qos_profile_name(the_participant_qos_profile_name);
        domain_entity_qos_library_name(the_domain_entity_qos_library_name);
        domain_entity_qos_profile_name(the_domain_entity_qos_profile_name);
    }

    DomainParticipantConfigParams(
        const DDS_DomainParticipantConfigParams_t& native_params) 
      : Base(native_params)
    {
    }

public:

    /**
     * @brief Get the domain id
     *  
     * @see domain_id(int32_t)
     */
    int32_t domain_id() const
    {
        return native().domain_id;
    }

    /**
     * @brief Set the domain id from which the DomainParticipant is created. 
     *  
     * \dref_details_DomainParticipantConfigParams_domain_id 
     */
    DomainParticipantConfigParams& domain_id(int32_t the_domain_id)
    {
        native().domain_id = the_domain_id;
        return *this;
    }

    /**
     * @brief Get the participant name 
     *  
     * @see participant_name(const std::string&)
     */
    std::string participant_name() const
    {
        return native().participant_name;
    }

    /**
     * @brief Set the name assigned to the DomainParticipant
     *  
     * \dref_details_DomainParticipantConfigParams_participant_name 
     */
    DomainParticipantConfigParams& participant_name(
        const std::string& the_participant_name)
    {
        if (!DDS_DomainParticipantConfigParams_t_copyStringMember(
            &native().participant_name, the_participant_name.c_str())){
            throw std::bad_alloc();
        }

        return *this;
    }

   /**
    * @brief Get the participant qos library name
    *  
    * @see participant_qos_library_name(const std::string&)
    */
    std::string participant_qos_library_name() const
    {
        return native().participant_qos_library_name;
    }

    /**
     * @brief Set the QoS library name containing the 
     * QoS profile from which the DDS_DomainParticipant is created. 
     *  
     * \dref_details_DomainParticipantConfigParams_participant_qos_library_name 
     */
    DomainParticipantConfigParams& participant_qos_library_name(
        const std::string& the_participant_qos_library_name)
    {
        if (!DDS_DomainParticipantConfigParams_t_copyStringMember(
            &native().participant_qos_library_name, 
            the_participant_qos_library_name.c_str())){
            throw std::bad_alloc();
        }

        return *this;
    }

    /**
     * @brief Get the participant qos profile name
     *  
     * @see participant_qos_profile_name(const std::string&)
     */
    std::string participant_qos_profile_name() const
    {
        return native().participant_qos_profile_name;
    }

    /**
     * @brief Set the QoS profile name from which the DomainParticipant is created. 
     *  
     * \dref_details_DomainParticipantConfigParams_participant_qos_profile_name 
     */
    DomainParticipantConfigParams& participant_qos_profile_name(
        const std::string& the_participant_qos_profile_name)
    {
        if (!DDS_DomainParticipantConfigParams_t_copyStringMember(
            &native().participant_qos_profile_name, 
            the_participant_qos_profile_name.c_str())){
            throw std::bad_alloc();
        }

        return *this;
    }

    /**
     * @brief Get the domain entity qos library name
     *  
     * @see domain_entity_qos_library_name(const std::string&)
     */
    std::string domain_entity_qos_library_name() const
    {
        return native().domain_entity_qos_library_name;
    }

    /**
     * @brief Set the QoS library name containing the QoS profile from which 
     * the all the entities defined under the participant configuraton are created. 
     *  
     * \dref_details_DomainParticipantConfigParams_domain_entity_qos_library_name 
     */
    DomainParticipantConfigParams& domain_entity_qos_library_name(
        const std::string& the_domain_entity_qos_library_name)
    {
        if (!DDS_DomainParticipantConfigParams_t_copyStringMember(
            &native().domain_entity_qos_library_name, 
            the_domain_entity_qos_library_name.c_str())){
            throw std::bad_alloc();
        }

        return *this;
    }

    /**
     * @brief Get the domain entity qos profile name 
     *  
     * @see DomainParticipantConfigParams& domain_entity_qos_profile_name(const std::string&)
     */
    std::string domain_entity_qos_profile_name() const
    {
        return native().domain_entity_qos_profile_name;
    }

    /**
     * @brief Set the QoS profile name from which the all the entities defined 
     * under the participant configuraton are created.
     *  
     * \dref_details_DomainParticipantConfigParams_domain_entity_qos_profile_name 
     */
    DomainParticipantConfigParams& domain_entity_qos_profile_name(
        const std::string& the_domain_entity_qos_profile_name)
    {
        if (!DDS_DomainParticipantConfigParams_t_copyStringMember(
            &native().domain_entity_qos_profile_name, 
            the_domain_entity_qos_profile_name.c_str())){
            throw std::bad_alloc();
        }

        return *this;
    }

};

} } // rti::domain namespace

#endif // RTI_DDS_DOMAIN_PARTICIPANT_CONFIG_PARAMS_HPP_
