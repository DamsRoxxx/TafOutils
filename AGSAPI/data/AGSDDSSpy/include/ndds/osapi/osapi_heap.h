/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)osapi_heap.h    generated by: makeheader    Fri Feb 16 13:51:09 2018
 *
 *		built from:	heap.ifc
 */

#ifndef osapi_heap_h
#define osapi_heap_h



  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef osapi_dll_h
    #include "osapi/osapi_dll.h"
  #endif
  #ifndef osapi_alignment_h
    #include "osapi/osapi_alignment.h"
  #endif  

#ifdef __cplusplus
    extern "C" {
#endif


#define RTI_OSAPI_HEAP_MAX_ALLOC_SIZE (RTI_INT32_MAX-1024)

struct RTIOsapiHeapStat {
    /*e current heap used in Bytes */
    RTI_INT64 currentUsage;
    /*e maximum heap usage in Bytes */
    RTI_INT64 highWatermark;
    /*e minimum heap usage in Bytes */
    RTI_INT64 lowWatermark;
    /*e number of allocations (Realloc counted as Malloc + Free) */
    RTI_INT64 allocCount;
    /*e number of frees (Realloc counted as Malloc + Free) */
    RTI_INT64 freeCount;
    /*e the ID that will be assigned to the next allocated block
       0 => Statistics are not being gathered
       1 => No block have been allocated
       This value is not affected by a call to RTIOsapiStat_statReset
    */
    RTI_UINT64 nextBlockId;
};


#define RTI_OSAPI_HEAP_STAT_DEFAULT { \
0 /* currentUsage */, \
0 /* highWatermark */, \
0 /* lowWatermark */, \
0 /* allocCount */, \
0 /* freeCount */, \
0 /* nextBlockId */ \
}

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateString(void **stringStoragePointer, int stringSize);

extern RTIOsapiDllExport RTIBool
RTIOsapiHeap_reallocateString(char **stringStoragePointer, int stringSize);

extern RTIOsapiDllExport void
RTIOsapiHeap_freeString(char *stringStorage);

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateBufferAligned(char **buffer, size_t size, 
                                   RTIOsapiAlignment alignment);

extern RTIOsapiDllExport void
RTIOsapiHeap_reallocateBufferAligned(char **buffer, size_t size, 
                                   RTIOsapiAlignment alignment);

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateBufferNotAligned(char **buffer, size_t size);

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateBuffer(char **buffer, size_t size, 
                            RTIOsapiAlignment alignment);

extern RTIOsapiDllExport RTIBool
RTIOsapiHeap_reallocateBuffer(char *buffer, size_t size);

extern RTIOsapiDllExport void RTIOsapiHeap_freeBufferAligned(char *buffer);

extern RTIOsapiDllExport void RTIOsapiHeap_freeBufferNotAligned(char *buffer);

extern RTIOsapiDllExport void RTIOsapiHeap_freeBuffer(char *buffer);

extern RTIOsapiDllExport void RTIOsapiHeap_statGet(struct RTIOsapiHeapStat *stat);

extern RTIOsapiDllExport void RTIOsapiHeap_statReset();

extern RTIOsapiDllExport 
RTIBool RTIOsapiHeap_blockInfoGet(
        const void *address,
        RTI_UINT64 *blockId,
        RTI_UINT64 *blockSize);

extern RTIOsapiDllExport void *RTIOsapiHeap_malloc(size_t size);

extern RTIOsapiDllExport void *RTIOsapiHeap_calloc(size_t numElem, size_t elemSize);

extern RTIOsapiDllExport void *RTIOsapiHeap_realloc(void *ptr, int size);

extern RTIOsapiDllExport void RTIOsapiHeap_free(void *ptr);

extern RTIOsapiDllExport
void RTIOsapiHeap_disableMonitoring();

extern RTIOsapiDllExport
RTIBool RTIOsapiHeap_enableMonitoring();

extern RTIOsapiDllExport
RTIBool RTIOsapiHeap_isMonitoringEnabled();

extern RTIOsapiDllExport
RTIBool RTIOsapiHeap_pauseMonitoring();

extern RTIOsapiDllExport
RTIBool RTIOsapiHeap_resumeMonitoring();

extern RTIOsapiDllExport
RTIBool RTIOsapiHeap_snapshot(const char *fileName, RTIBool printDetails);

extern RTIOsapiDllExport void RTIOsapiHeap_deleteConext();


struct RTIOsapiHeapContext {
    RTIBool poolAlloc;
    int poolBufferCount;
    int poolBufferSize;
    const char * topicName;
    const char * activity;
};


#define RTIOsapiHeapContext_INITIALIZER { \
    RTI_FALSE, \
    0, \
    0, \
    NULL, \
    NULL \
}

extern RTIOsapiDllExport
struct RTIOsapiHeapContext * RTIOsapiHeap_getContext();

extern RTIOsapiDllExport
void RTIOsapiHeap_resetContext(struct RTIOsapiHeapContext *context);

extern RTIOsapiDllExport
void RTIOsapiHeap_initializeContext(struct RTIOsapiHeapContext *context);

extern RTIOsapiDllExport
void RTIOsapiHeap_copyContext(
        struct RTIOsapiHeapContext * dst,
        const struct RTIOsapiHeapContext * src);

extern RTIOsapiDllExport
void RTIOsapiHeap_setHeapContext(
        struct RTIOsapiHeapContext * oldContext,
        const char * topicName,
        const char * activity);

extern RTIOsapiDllExport
void RTIOsapiHeap_restoreHeapContext(
        struct RTIOsapiHeapContext * oldContext);


typedef const char * (*RTIOsapiHeapGetActivityFcn)();

extern RTIOsapiDllExport
void RTIOsapiHeap_registerGetActivityFcn(
        RTIOsapiHeapGetActivityFcn getActivityFcn);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "osapi/osapi_heap_impl.h"

#endif /* osapi_heap_h */
