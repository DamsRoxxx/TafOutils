/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)event_activeGenerator.h    generated by: makeheader    Fri Feb 16 13:51:30 2018
 *
 *		built from:	activeGenerator.ifc
 */

#ifndef event_activeGenerator_h
#define event_activeGenerator_h



  #ifndef event_dll_h
    #include "event/event_dll.h"
  #endif
  #ifndef event_timer_h
    #include "event/event_timer.h"
  #endif
  #ifndef event_generator_h
    #include "event/event_generator.h"
  #endif
  #ifndef event_activeObject_h
    #include "event/event_activeObject.h"
  #endif
  #ifndef osapi_threadFactory_h
    #include "osapi/osapi_threadFactory.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

struct REDAWorkerFactory;

struct RTIEventActiveGenerator;

struct RTIEventTimer;

struct RTIEventActiveGeneratorProperty {
    /*e We put the parent as the first member of the struct to "derive" in C
    */
    struct RTIEventGeneratorProperty parent;
    /*e active generator is an active object */
    struct RTIEventActiveObjectProperty active;
    /*e domainId  Used to give a meaningful name to the thread*/
    int domainId;
    /*e Either the App Id or the participant indexUsed to give a meaningful 
    name to the thread*/
    RTI_UINT32 threadAppId;
    /*e Specifies if the previous field is the App Id or the participant index
    Used to give a meaningful name to the thread*/
    RTIBool participantIndexSpecified;
};


#define RTI_EVENT_ACTIVE_GENERATOR_PROPERTY_DEFAULT { \
    RTI_EVENT_GENERATOR_PROPERTY_DEFAULT,   		\
    RTI_EVENT_ACTIVE_OBJECT_PROPERTY_DEFAULT,		\
    0, /* domainId */					      \
    0, /* threadAppId */				      \
    RTI_FALSE /* participantIndexSpecified */		      }

typedef void (*RTIEventActiveGeneratorListenerOnStartedCallback)(
    struct RTIEventActiveGenerator *generator, void *onStartedParam,
    struct REDAWorker *worker);

struct RTIEventActiveGeneratorListener {
    /*e Parent's state change */
    struct RTIEventActiveObjectListener parent;
    /*e Generator's start-up is asynchronous, so use this method
      to learn when the active generator is fully operational.
    */
    RTIEventActiveGeneratorListenerOnStartedCallback onStarted;
    /*e Associated with the onStarted() method */
    void *onStartedParam;
};

extern RTIEventDllExport void
RTIEventActiveGenerator_delete(struct RTIEventActiveGenerator *me,
                               struct REDAWorker *worker);

extern RTIEventDllExport struct RTIEventActiveGenerator *
RTIEventActiveGenerator_new(
    const char * name,
    struct REDAWorkerFactory *workerFactory,
    struct RTIClock *clock, struct RTIEventTimer *timer,
    const struct RTIEventActiveGeneratorListener *listener,
    const struct RTIEventActiveGeneratorProperty *property,
    struct RTIOsapiThreadFactory *threadFactory,
    struct REDAWorker *worker);

extern RTIEventDllExport RTIBool
RTIEventActiveGenerator_shutdown(struct RTIEventActiveGenerator *me,
				 struct REDAWorker *worker);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* event_activeGenerator_h */
