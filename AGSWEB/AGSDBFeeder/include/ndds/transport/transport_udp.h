/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)transport_udp.h    generated by: makeheader    Fri Feb 16 13:51:33 2018
 *
 *		built from:	udp.ifc
 */

#ifndef transport_udp_h
#define transport_udp_h


  #ifndef transport_dll_h
    #include "transport/transport_dll.h"
  #endif
  #ifndef transport_interface_h
    #include "transport/transport_interface.h"
  #endif
  #include "osapi/osapi_socket.h"
#ifdef __cplusplus
    extern "C" {
#endif

struct RTIClock;

struct NDDS_Transport_UDP; /* forward declare */

struct NDDS_Transport_UDP_SocketFactory;

struct NDDS_Transport_UDP_Interface_t;

struct NDDS_Transport_UDP_Property_t {
    struct NDDS_Transport_Property_t parent;
    RTI_INT32 send_socket_buffer_size;
    RTI_INT32 recv_socket_buffer_size;
    RTI_INT32 unicast_enabled;
    RTI_INT32 multicast_enabled;
    RTI_INT32 multicast_ttl;
    RTI_INT32 multicast_loopback_disabled;
    RTI_INT32 ignore_loopback_interface;
    RTI_INT32 ignore_nonup_interfaces;
    RTI_INT32 ignore_nonrunning_interfaces;
    RTI_INT32 no_zero_copy;
    RTI_INT32 send_blocking;
    RTI_INT32 enable_v4mapped;
    RTI_INT32 use_checksum;
    RTI_UINT32 transport_priority_mask;
    RTI_INT32 transport_priority_mapping_low;
    RTI_INT32 transport_priority_mapping_high;
    RTI_INT32 send_ping;
    RTI_UINT32 interface_poll_period;
    RTI_INT32 reuse_multicast_receive_resource;
    RTI_INT32 protocol_overhead_max;
    RTI_INT32 disable_interface_tracking;
    char * public_address;
};


#define NDDS_TRANSPORT_UDP_PROPERTIES_BITMAP_DEFAULT (0)


#define NDDS_TRANSPORT_UDP_GATHER_SEND_BUFFER_COUNT_MAX_DEFAULT (16)


#define NDDS_TRANSPORT_UDP_SOCKET_BUFFER_SIZE_OS_DEFAULT (-1)


#define NDDS_TRANSPORT_UDP_SEND_SOCKET_BUFFER_SIZE_DEFAULT (131072)


#define NDDS_TRANSPORT_UDP_RECV_SOCKET_BUFFER_SIZE_DEFAULT (131072)


#define NDDS_TRANSPORT_UDP_DATAGRAM_LENGTH_MAX (65535)


#define NDDS_TRANSPORT_UDP_MULTICAST_TTL_DEFAULT (1)


#ifdef RTI_MULTICAST
  #define NDDS_TRANSPORT_UDP_USE_MULTICAST_DEFAULT 1
#else
  #define NDDS_TRANSPORT_UDP_USE_MULTICAST_DEFAULT 0
#endif


/*e \dref_UDPTransport_IGNORE_LOOPBACK_DISABLED
 */
  #define NDDS_TRANSPORT_UDP_IGNORE_LOOPBACK_DISABLED        (0)

/*e \dref_UDPTransport_IGNORE_LOOPBACK_ENABLED
 */
  #define NDDS_TRANSPORT_UDP_IGNORE_LOOPBACK_ENABLED         (1)

/*e \dref_UDPTransport_IGNORE_LOOPBACK_AUTO
 */
  #define NDDS_TRANSPORT_UDP_IGNORE_LOOPBACK_AUTO            (-1)


/*e \dref_UDPTransport_BLOCKING_NEVER
 */
  #define NDDS_TRANSPORT_UDP_BLOCKING_NEVER        (0)

/*e \dref_UDPTransport_BLOCKING_ALWAYS
 */
  #define NDDS_TRANSPORT_UDP_BLOCKING_ALWAYS       (1)
  #define NDDS_TRANSPORT_UDP_BLOCKING_UNICAST_ONLY (2)

/*e \dref_UDPTransport_BLOCKING_DEFAULT
 */
  #define NDDS_TRANSPORT_UDP_BLOCKING_DEFAULT \
            NDDS_TRANSPORT_UDP_BLOCKING_ALWAYS

struct NDDS_Transport_UDP_InterfaceListener;/*forward declare */

typedef 
RTI_INT32 (*NDDS_Transport_UDP_Interface_Filter_Fcn)(
    struct NDDS_Transport_UDP_InterfaceListener* self,
    struct NDDS_Transport_UDP        *plugin,
    RTI_INT32                        *multicast_enabled_out,
    const NDDS_Transport_Interface_t *interface_in,
    const char*                       interface_name_in);

struct NDDS_Transport_UDP_InterfaceListener {
    /* \copydoc NDDS_Transport_UDP_Interface_Filter_Fcn
     */
    NDDS_Transport_UDP_Interface_Filter_Fcn onInterface;
};

struct NDDS_Transport_UDP_SocketFactory;

typedef RTI_INT32
(*NDDS_Transport_UDP_SocketFactory_Send_Socket_Create_Fcn)(
    struct NDDS_Transport_UDP_SocketFactory         *me,
    NDDS_Transport_Port_t                           *port_out,
    const struct NDDS_Transport_UDP                 *transport_in,
    const NDDS_Transport_Address_t                  *interface_address_in,
    const int		    	                    *interface_index_in);

typedef RTI_INT32 (*NDDS_Transport_UDP_SocketFactory_Receive_Socket_Create_Fcn)(
    struct NDDS_Transport_UDP_SocketFactory         *me,
    NDDS_Transport_Port_t                           *port_inout,
    const struct NDDS_Transport_UDP                 *transport_in, 
    const NDDS_Transport_Address_t                  *multicast_address_in);

typedef RTI_INT32 (*NDDS_Transport_UDP_SocketFactory_Socket_Destroy_Fcn)(
    struct NDDS_Transport_UDP_SocketFactory   *me, 
    RTI_INT32                                  s_in);

struct NDDS_Transport_UDP_SocketFactory {

    /*e Children: implement this method. */
    NDDS_Transport_UDP_SocketFactory_Send_Socket_Create_Fcn    create_send_socket;

    /*e Children: implement this method. */
    NDDS_Transport_UDP_SocketFactory_Receive_Socket_Create_Fcn create_receive_socket;

    /*e Children: implement this method to destroy both the send and
     receive sockets. */
    NDDS_Transport_UDP_SocketFactory_Socket_Destroy_Fcn        destroy_socket;
};


#define NDDS_Transport_UDP_SocketFactory_is_valid(m) ( \
       (m)->create_send_socket    && \
       (m)->create_receive_socket && \
       (m)->destroy_socket )

extern NDDS_Transport_DllExport 
const char * NDDS_Transport_UDP_get_class_name_cEA(
    NDDS_Transport_Plugin    *self);

extern NDDS_Transport_DllExport 
RTI_INT32 NDDS_Transport_UDP_string_to_address_cEA(
    NDDS_Transport_Plugin    *self,
    NDDS_Transport_Address_t *address_out,
    const char               *address_in);

extern NDDS_Transport_DllExport 
NDDS_Transport_Plugin *NDDS_Transport_UDP_new(
    const struct NDDS_Transport_UDP_Property_t *property_in);

extern NDDS_Transport_DllExport 
NDDS_Transport_Plugin *NDDS_Transport_UDP_newI(
    const struct NDDS_Transport_UDP_Property_t *property_in,
    struct NDDS_Transport_UDP_SocketFactory    *socket_factory_in,
    struct NDDS_Transport_UDP_InterfaceListener* interface_listener_in,
    struct RTIClock                              *clock_in);

extern NDDS_Transport_DllExport 
RTI_INT32 NDDS_Transport_UDP_get_receive_interfaces_cEA(
    NDDS_Transport_Plugin      *self,
    RTI_INT32                  *found_more_than_provided_for_out,
    RTI_INT32                  *interface_reported_count_out,
    NDDS_Transport_Interface_t  interface_array_inout[],
    RTI_INT32                   interface_array_size_in);

extern NDDS_Transport_DllExport 
RTI_INT32 NDDS_Transport_UDP_get_ignore_loopback_interface_status(
    const NDDS_Transport_Plugin * self);

extern NDDS_Transport_DllExport
RTIBool NDDS_Transport_UDP_is_local_address(
    const NDDS_Transport_Plugin * self,
    const NDDS_Transport_Address_t *address_in);

extern NDDS_Transport_DllExport
RTI_INT32 NDDS_Transport_UDP_map_transport_priority(
    struct NDDS_Transport_UDP_Property_t * property,
    RTI_INT32                       transport_priority_in);


#define NDDS_TRANSPORT_UDP_UNBLOCK_MESSAGE_SIZE \
    (4 + 4 + sizeof(NDDS_Transport_Plugin *))


struct NDDS_Transport_UDP_Statistics {
    RTI_UINT64 user_bytes_sent;
    RTI_UINT64 user_bytes_received;
    RTI_UINT64 user_packets_sent;
    RTI_UINT64 user_packets_received;
    RTI_UINT64 discovery_bytes_sent;
    RTI_UINT64 discovery_bytes_received;
    RTI_UINT64 discovery_packets_sent;
    RTI_UINT64 discovery_packets_received;
};

extern NDDS_Transport_DllExport
void NDDS_Transport_UDP_get_statistics(
    NDDS_Transport_Plugin    *self,
    struct NDDS_Transport_UDP_Statistics * statistics_out);

extern NDDS_Transport_DllExport
void NDDS_Transport_UDP_get_priority_range(
    NDDS_Transport_Plugin *self,
    RTI_INT32 *min_priority, 
    RTI_INT32 *max_priority);

extern NDDS_Transport_DllExport
void NDDS_Transport_UDP_Address_print(
    const NDDS_Transport_Address_t *me, 
    const char *desc,
    RTI_INT32 indent);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "transport/transport_udp_impl.h"

#endif /* transport_udp_h */
