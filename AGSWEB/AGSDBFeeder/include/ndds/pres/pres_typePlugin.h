/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)pres_typePlugin.h    generated by: makeheader    Fri Feb 16 13:51:43 2018
 *
 *		built from:	typePlugin.ifc
 */

#ifndef pres_typePlugin_h
#define pres_typePlugin_h


 #ifndef pres_dll_h
    #include "pres/pres_dll.h"
 #endif
 #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
 #endif
 #ifndef reda_fastBuffer_h
    #include "reda/reda_fastBuffer.h"
 #endif
 #ifndef cdr_stream_h
    #include "cdr/cdr_stream.h"
 #endif
 #ifndef cdr_encapsulation_h
    #include "cdr/cdr_encapsulation.h"
 #endif
 #ifndef commend_writeService_h
    #include "commend/commend_writerService.h"
 #endif
 #ifndef pres_common_h
    #include "pres/pres_common.h"
 #endif
 #ifndef pres_participant_h
    #include "pres/pres_participant.h"
 #endif
 #ifndef cdr_typeCode_h
    #include "cdr/cdr_typeCode.h"
 #endif 

 #ifndef writer_history_interface_h
    #include "writer_history/writer_history_interface.h"
 #endif 

#ifdef __cplusplus
    extern "C" {
#endif

struct PRESTypePlugin;


#define PRES_TYPE_PLUGIN_CONST_PROPERTY_NAMESPACE "dds.type_plugin.const"

typedef struct PRESProperty PRESTypePluginAttribute;

struct PRESTypePluginAttributeList {
       RTI_UINT32 _length;

       PRESTypePluginAttribute *_list;
};

extern PRESDllExport RTI_UINT32
PRESTypePluginAttributeListHelper_getLength(
    const struct PRESTypePluginAttributeList *attributeList);

extern PRESDllExport PRESTypePluginAttribute *
PRESTypePluginAttributeListHelper_getPropertyArray(
    const struct PRESTypePluginAttributeList *attributeList);

extern PRESDllExport const char *
PRESTypePluginAttributeListHelper_getPropertyValue(
    const struct PRESTypePluginAttributeList *attributeList,
    const char *propertyName);

extern PRESDllExport RTI_INT32
PRESTypePluginAttributeListHelper_getPropertyValueAsBool(
    RTIBool * value,
    const struct PRESTypePluginAttributeList *attributeList,
    const char *propertyName);

extern PRESDllExport RTI_INT32
PRESTypePluginAttributeListHelper_getPropertyValueAsInt(
    int * value,
    const struct PRESTypePluginAttributeList *attributeList,
    const char *propertyName);


#define PRES_TYPE_PLUGIN_ATTRIBUTE_LIST_DEFAULT { \
    0, /* length */\
    NULL /* list */\
}

typedef enum {
    /*e Instance doesn't have key concept. User data sent as ISSUE. */
    PRES_TYPEPLUGIN_NO_KEY,
    /*e Instance with GUID as the key. User data sent as VAR */
    PRES_TYPEPLUGIN_GUID_KEY,
    /*e Instance with random key contained in the instance structure.
        User data send as VAR */
    PRES_TYPEPLUGIN_USER_KEY
} PRESTypePluginKeyKind;

typedef enum {
    /*e Java language */
	PRES_TYPEPLUGIN_JAVA_LANG = 0x4A415641,
	/* C DDS type */
	PRES_TYPEPLUGIN_DDS_TYPE = 0x00561234,
	/* C++ DDS type */
	PRES_TYPEPLUGIN_CPP_LANG = 0x00432B2B,
	/* C++03/11 STL DDS type */
	PRES_TYPEPLUGIN_CPPSTL_LANG = 0x00341D1D,
	/* C/C++ non-DDS type */
	PRES_TYPEPLUGIN_NON_DDS_TYPE = 0x00982467,
	/* Unknown */
	PRES_TYPEPLUGIN_UNKNOWN_LANG = 0x554E4B4E
} PRESTypePluginLanguageKind;

 
struct PRESTypePluginSampleAssignabilityProperty {
    RTIBool acceptUnknownEnumValue; /* Whether or not to accept samples with unknown enumeration values */
    RTIBool acceptUnknownUnionDiscriminator; /* Whether or not to accept samples with unknown union discriminators */
};


#define PRES_TYPE_PLUGIN_SAMPLE_ASSIGNABILITY_PROPERTY_DEFAULT { \
RTI_FALSE, \
RTI_FALSE \
}

typedef void* PRESTypePluginEndpointData;

typedef void* PRESTypePluginParticipantData;

struct PRESTypePluginParticipantInfo {
    struct PRESTypePluginAttributeList participantProperties;

    void *pluginData;
    void *reserved;
};


#define PRES_TYPE_PLUGIN_PARTICIPANT_INFO_DEFAULT { \
    PRES_TYPE_PLUGIN_ATTRIBUTE_LIST_DEFAULT, /* participantProperties */\
    NULL, /* pluginData */\
    NULL /* reserved */\
}


typedef enum {
    PRES_TYPEPLUGIN_ENDPOINT_UNKNOWN,
    PRES_TYPEPLUGIN_ENDPOINT_READER,
    PRES_TYPEPLUGIN_ENDPOINT_WRITER
} PRESTypePluginEndpointKind;

extern PRESDllExport
int PRESTypePlugin_getCdrPoolThresholdFromProperty(
    const struct PRESTypePluginAttributeList *attributeList,
    PRESTypePluginEndpointKind endpointKind);

struct PRESTypePluginEndpointInfo {
    PRESTypePluginEndpointKind endpointKind;
    struct PRESInstanceHandle endpointHandle;

    int initialSamples;
    int maxSamples;

    RTIBool isKeyed;
    int initialInstances;
    int maxInstances;

    RTIBool batchEnabled;
    RTIBool batchEnforceMaxDataBytes;
    int maxSamplesPerBatch;
    int maxDataBytesPerBatch;
    int initialBatches;
    int maxBatches;

    /* For DataWriters, when set to RTI_TRUE the keyhash calculated by the
     * to_keyhash TypePlugin function will always be based on applying MD5 to
     * the serialized key.
     */
    RTIBool requireMD5KeyHash;

    struct PRESTypePluginAttributeList endpointProperties;

    void *pluginData;

    /* # of supported encapsulations. 0 == all CDR_NATIVE */
    int encapsulationCount; 
    struct RTIEncapsulationInfo *encapsulations; /* array */
    
    struct PRESTypePlugin *typePlugin;

    void *reserved;
};


#define PRES_TYPE_PLUGIN_ENDPOINT_INFO_DEFAULT { \
    PRES_TYPEPLUGIN_ENDPOINT_UNKNOWN, /* endpointKind */\
    PRES_INSTANCE_HANDLE_NIL,         /* entityHandle */\
    2,                                /* initialSamples */\
    REDA_FAST_BUFFER_POOL_UNLIMITED,  /* maxSamples: unlimited */\
    RTI_TRUE,                         /* isKeyed */\
    2,                                /* initialInstances */\
    REDA_FAST_BUFFER_POOL_UNLIMITED,  /* maxInstances: unlimited */\
    RTI_FALSE,                        /* batchEnabled */\
    RTI_FALSE,                        /* batchEnforceMaxDataBytes */\
    PRES_LENGTH_UNLIMITED,            /* batchMaxSampleCount */\
    PRES_LENGTH_UNLIMITED,            /* batchMaxSize */\
    2,                                /* initialBatches */\
    PRES_LENGTH_UNLIMITED,            /* maxBatches */\
    RTI_FALSE,                        /* requireMD5KeyHash */\
    PRES_TYPE_PLUGIN_ATTRIBUTE_LIST_DEFAULT, /* endpointProperties */\
    NULL,                             /* pluginData */\
    0,                                /* encapsulationCount */ \
    NULL,                             /* encapsulations (array) */ \
    NULL,                             /* typePlugin*/ \
    NULL                              /* reserved */\
}

typedef void* (*PRESTypePluginDefaultEndpointDataCreateSampleFunction) ();

typedef void* (*PRESTypePluginDefaultEndpointDataCreateKeyFunction) ();

typedef void (*PRESTypePluginDefaultEndpointDataDestroySampleFunction) (void *sample);

typedef void (*PRESTypePluginDefaultEndpointDataDestroyKeyFunction) (void *key);

typedef unsigned int (*PRESTypePluginGetSerializedSampleSizeFunction) (
    PRESTypePluginEndpointData endpointData,
    RTIBool includeEncapsulation,
    RTIEncapsulationId encapsulationId,
    unsigned int size,
    const void * sample);

typedef unsigned int (*PRESTypePluginGetSerializedSampleMaxSizeFunction)
    (PRESTypePluginEndpointData endpointData,
     RTIBool includeEncapsulation,
     RTIEncapsulationId encapsulationId,
     unsigned int size);

extern PRESDllExport PRESTypePluginEndpointData
PRESTypePluginDefaultEndpointData_new(
    PRESTypePluginParticipantData participantData,
    const struct PRESTypePluginEndpointInfo *endpointInfo,
    PRESTypePluginDefaultEndpointDataCreateSampleFunction createSampleFnc,
    PRESTypePluginDefaultEndpointDataDestroySampleFunction deleteSampleFnc,
    PRESTypePluginDefaultEndpointDataCreateKeyFunction createKeyFnc,
    PRESTypePluginDefaultEndpointDataDestroyKeyFunction deleteKeyFnc);

extern PRESDllExport PRESTypePluginEndpointData
PRESTypePluginDefaultEndpointData_newWithNotification(
    PRESTypePluginParticipantData participantData,
    const struct PRESTypePluginEndpointInfo *endpointInfo,
    REDAFastBufferPoolBufferInitializeFunction createSampleFnc,
    void* createSampleParam,
    REDAFastBufferPoolBufferFinalizeFunction deleteSampleFnc,
    void* deleteSampleParam,
    REDAFastBufferPoolBufferInitializeFunction createKeyFnc,
    void* createKeyParam,
    REDAFastBufferPoolBufferFinalizeFunction deleteKeyFnc,
    void* deleteKeyParam);

extern PRESDllExport void
PRESTypePluginDefaultEndpointData_delete(
    PRESTypePluginEndpointData endpointData);

extern PRESDllExport PRESTypePluginParticipantData
PRESTypePluginDefaultParticipantData_new(
    const struct PRESTypePluginParticipantInfo *participantInfo);

extern PRESDllExport void
PRESTypePluginDefaultParticipantData_delete(
    PRESTypePluginParticipantData participantData);

extern PRESDllExport void *
PRESTypePluginDefaultEndpointData_getSample(
    PRESTypePluginEndpointData endpointData,
    void **handle /* out */);

extern PRESDllExport void
PRESTypePluginDefaultEndpointData_returnSample(
    PRESTypePluginEndpointData endpointData,
    void *sample, void *handle);

extern PRESDllExport void *
PRESTypePluginDefaultEndpointData_createSample(
    PRESTypePluginEndpointData endpointData);

extern PRESDllExport void
PRESTypePluginDefaultEndpointData_deleteSample(
    PRESTypePluginEndpointData endpointData,
    void *sample);

extern PRESDllExport void *
PRESTypePluginDefaultEndpointData_getKey(
    PRESTypePluginEndpointData endpointData,
    void **handle /* out */);

extern PRESDllExport void
PRESTypePluginDefaultEndpointData_returnKey(
    PRESTypePluginEndpointData endpointData,
    void *key, void *handle);

extern PRESDllExport void *
PRESTypePluginDefaultEndpointData_createKey(
    PRESTypePluginEndpointData endpointData);

extern PRESDllExport void
PRESTypePluginDefaultEndpointData_deleteKey(
    PRESTypePluginEndpointData endpointData,
    void *key);

extern PRESDllExport int
PRESTypePluginDefaultEndpointData_getEncapsulationPoolThreshold(
    PRESTypePluginEndpointData endpointData,
    RTIEncapsulationId encapsulationId);

extern PRESDllExport RTIBool
PRESTypePluginDefaultEndpointData_getBuffer(
    PRESTypePluginEndpointData endpoint_plugin_data,
    struct REDABuffer *buffer,               /* Buffer to return ptr + length */
    RTIEncapsulationId encapsulationId,
    const void * user_data);                 /* Can be NULL for batch */

extern PRESDllExport RTIBool
PRESTypePluginDefaultEndpointData_getPoolBuffer(
    PRESTypePluginEndpointData endpoint_plugin_data,
    struct REDABuffer *buffer,
    RTIEncapsulationId encapsulationId);

extern PRESDllExport void 
PRESTypePluginDefaultEndpointData_returnBuffer(
    PRESTypePluginEndpointData endpoint_plugin_data,
    struct REDABuffer *buffer, /* Buffer to release */
    RTIEncapsulationId encapsulationId);

extern PRESDllExport void
PRESTypePluginDefaultEndpointData_returnPoolBuffer(
    PRESTypePluginEndpointData endpointData,
    struct REDABuffer *buffer,
    RTIEncapsulationId encapsulationId);

extern PRESDllExport RTIBool
PRESTypePluginDefaultEndpointData_createMD5Stream(
    PRESTypePluginEndpointData endpointData,
    int serializedKeyMaxSize);

extern PRESDllExport RTIBool
PRESTypePluginDefaultEndpointData_createMD5StreamWithInfo(
    PRESTypePluginEndpointData endpointData,
    const struct PRESTypePluginEndpointInfo *endpointInfo,
    int serializedKeyMaxSize);

extern PRESDllExport struct RTICdrStream *
PRESTypePluginDefaultEndpointData_getMD5Stream(
    PRESTypePluginEndpointData endpointData);

extern PRESDllExport unsigned int
PRESTypePluginDefaultEndpointData_getMaxSizeSerializedKey(
    PRESTypePluginEndpointData endpointData);

extern PRESDllExport unsigned int
PRESTypePluginDefaultEndpointData_getTempSample(
    PRESTypePluginEndpointData endpointData);

extern PRESDllExport void
PRESTypePluginDefaultEndpointData_setBaseAlignment(
    PRESTypePluginEndpointData endpointData,
    unsigned int alignment);

extern PRESDllExport unsigned int
PRESTypePluginDefaultEndpointData_getAlignment(
    PRESTypePluginEndpointData endpointData,
    int currentSize);

extern PRESDllExport RTIBool 
PRESTypePluginDefaultEndpointData_createWriterPool(
    PRESTypePluginEndpointData endpointPluginData,
    const struct PRESTypePluginEndpointInfo *endpointInfo,
    PRESTypePluginGetSerializedSampleMaxSizeFunction getSerializedSampleMaxSizeFnc,
    PRESTypePluginEndpointData getSerializedSampleMaxSizeFncArg,
    PRESTypePluginGetSerializedSampleSizeFunction getSerializedSampleSizeFnc,
    PRESTypePluginEndpointData getSerializedSampleSizeFncArg
);



/* This represent the old concept of threshold to determine whether to get
 * the buffer from a fast buffer or from the heap. 
 * Possible values:
 * -1: use only fast buffer pool (default), and use serializedSampleMaxSize() for pool size
 * 0 : use only heap
 * any positive number: use this value as threshold to decide
 */
#define NDDS_DWHISTORY_MEMORYMANAGER_FASTPOOL_POOLBUFFERMAXSIZE     "dds.data_writer.history.memory_manager.fast_pool.pool_buffer_max_size"

/* This represent the old concept of threshold to determine whether to get
 * the buffer from a fast buffer or from the heap. 
 * In the case of a DataReader this buffer is used to allocate the keys
 * serialization buffers
 */
#define NDDS_DRHISTORY_MEMORYMANAGER_FASTPOOL_POOLBUFFERMAXSIZE     "dds.data_reader.history.memory_manager.fast_pool.pool_buffer_max_size"

/* Max number of fast buffer pools. 
 * Accepted values: 
 * -1: no limit
 * >initial_sample: number of fast buffers
 */
#define NDDS_DWHISTORY_MEMORYMANAGER_FASTPOOL_POOLMAXBUFFERS        "dds.data_writer.history.memory_manager.fast_pool.pool_max_buffers"

/* Initial number of fast buffer allocated
 * Possible values:
 * <unset> or -1:  use resource_limits.initial_samples / or initial_batches
 * >0: use this value (cannot be < than initial_samples or initial batches)
 */
#define NDDS_DWHISTORY_MEMORYMANAGER_FASTPOOL_POOLINITIALBUFFERS    "dds.data_writer.history.memory_manager.fast_pool.pool_initial_buffers"

/* Max number of bytes taken from the HEAP
 * Possible values:
 * <unset> or -1: no limit
 * >0: use this value (cannot be < than serialized_sample_max_size) as limit
 */
#define NDDS_DWHISTORY_MEMORYMANAGER_FASTPOOL_DYNAMICMEMORYMAXBYTES "dds.data_writer.history.memory_manager.fast_pool.dynamic_memory_max_bytes"

/* Determines when to GET a serialization buffer.
 * get_mode values:
 *      IMMEDIATE - serialization buffer is obtained when the sample is inserted into the queue
        LAZY - buffer is obtained only when sample must be sent to destination 
 * 
 * Possible values:
 * (encapsulation id_1, buffer_get_mode_1), ... (encapsulation_id_N, buffer_get_mode_N)
 * <unset>: IMMEDIATE for all unset encapsulations
 */
#define NDDS_DWHISTORY_MEMORYMANAGER_FASTPOOL_BUFFERGETMODE "dds.data_writer.history.memory_manager.fast_pool.buffer_get_mode"

/* Determines when to RETURN a serialization buffer.
 * return_mode values:
 *      IMMEDIATE - buffer is returned immediately after sample is sent over the wire
        LAZY - buffer is returned when sample is removed from the writer queue
 * 
 * Possible values:
 * (encapsulation id_1, buffer_return_mode_1), ... (encapsulation_id_N, buffer_return_mode_N)
 * <unset>: LAZY for all unset encapsulations
 */
#define NDDS_DWHISTORY_MEMORYMANAGER_FASTPOOL_BUFFERRETURNMODE "dds.data_writer.history.memory_manager.fast_pool.buffer_return_mode"

/* Indicates whether serialization buffer must be obtained
 */
#define NDDS_DWHISTORY_MEMORYMANAGER_FASTPOOL_ZEROCOPY "dds.data_writer.history.memory_manager.fast_pool.zero_copy"

/* Indicates if the max_data_bytes limit must be enforced in batching
   When enforce_data_bytes is set to 1 the physical space allocated for a buffer matches
   the logical space given by the policy value max_data_bytes. Otherwise the physical space
   will be max(maxDataBytesPerBatch, serializedSampleMaxSize)
 */
#define NDDS_DWHISTORY_MEMORYMANAGER_ENFORCE_MAX_DATA_BYTES "dds.data_writer.history.memory_manager.batch.enforce_max_data_bytes"


typedef PRESTypePluginParticipantData (*PRESTypePluginOnParticipantAttachedCallback)
    (void *registrationData, const struct PRESTypePluginParticipantInfo *participantInfo,
     RTIBool topLevelRegistration, void *containerPluginContext,
     RTICdrTypeCode *typeCode);

typedef void (*PRESTypePluginOnParticipantDetachedCallback)
    (PRESTypePluginParticipantData participantData);

typedef PRESTypePluginEndpointData (*PRESTypePluginOnEndpointAttachedCallback)
    (PRESTypePluginParticipantData participantData,
     const struct PRESTypePluginEndpointInfo *endpointInfo,
     RTIBool topLevelRegistration, void *containerPluginContext);

typedef void (*PRESTypePluginOnEndpointDetachedCallback)
    (PRESTypePluginEndpointData endpointData);

typedef RTIBool (*PRESTypePluginCopySampleFunction)
    (PRESTypePluginEndpointData endpointData, void *dst, const void *src);

typedef void* (*PRESTypePluginCreateSampleFunction)
    (PRESTypePluginEndpointData endpointData);

typedef void (*PRESTypePluginDestroySampleFunction)
    (PRESTypePluginEndpointData endpointData,
     void *sample);

typedef void  (*PRESTypePluginFinalizeOptionalMembersFunction) (
    void *sample,
    RTIBool deletePointers);

typedef RTIBool (*PRESTypePluginInstanceToKeyHashFunction)
    (PRESTypePluginEndpointData endpointData,
     struct MIGRtpsKeyHash *keyHash, 
     const void *sample);

typedef RTIBool (*PRESTypePluginSerializedSampleToKeyHashFunction)
    (PRESTypePluginEndpointData endpointData,
     struct RTICdrStream *stream, 
     struct MIGRtpsKeyHash *keyHash,
     RTIBool deserializeEncapsulation, 
     void *endpointPluginQos);

typedef RTIBool (*PRESTypePluginSerializedKeyToKeyHashFunction)
    (PRESTypePluginEndpointData endpointData,
     struct RTICdrStream *stream, 
     struct MIGRtpsKeyHash *keyHash,
     RTIBool deserializeEncapsulation, 
     void *endpointPluginQos);

typedef RTIBool (*PRESTypePluginSerializeFunction)
    (PRESTypePluginEndpointData endpoint_plugin_data,
     const void *sample, struct RTICdrStream *stream, 
     RTIBool serializeEncapsulation,
     RTIEncapsulationId encapsulationId,
     RTIBool serializeSample, 
     void *endpointPluginQos);

typedef RTIBool (*PRESTypePluginDeserializeFunction)
    (PRESTypePluginEndpointData endpointData,
     void ** sample, RTIBool * dropSample,
     struct RTICdrStream *stream,
     RTIBool deserializeEncapsulation, 
     RTIBool deserializeSample, 
     void *endpointPluginQos);

typedef RTIBool (*PRESTypePluginSerializeKeyFunction)
    (PRESTypePluginEndpointData endpointData,
     const void *key, struct RTICdrStream *stream, 
     RTIBool serializeEncapsulation, 
     RTIEncapsulationId encapsulationId,
     RTIBool serializeKey, 
     void *endpointPluginQos);

typedef RTIBool (*PRESTypePluginDeserializeKeySampleFunction)
    (PRESTypePluginEndpointData endpointData,
     void * key,
     struct RTICdrStream *stream, 
     RTIBool deserializeEncapsulation, 
     RTIBool deserializeKey, 
     void *endpointPluginQos);

typedef RTIBool (*PRESTypePluginDeserializeKeyFunction)
    (PRESTypePluginEndpointData endpointData,
     void ** key, RTIBool * dropKey,
     struct RTICdrStream *stream, 
     RTIBool deserializeEncapsulation, 
     RTIBool deserializeKey, 
     void *endpointPluginQos);

typedef void* (*PRESTypePluginGetKeyFunction) 
    (PRESTypePluginEndpointData endpointData, void** handle);

typedef void (*PRESTypePluginReturnKeyFunction)
    (PRESTypePluginEndpointData endpointData, void *key, void* handle);

typedef void* (*PRESTypePluginGetSampleFunction)
    (PRESTypePluginEndpointData endpointData, void** handle);

typedef void (*PRESTypePluginReturnSampleFunction)
    (PRESTypePluginEndpointData endpointData, void *sample, void* handle);

typedef unsigned int (*PRESTypePluginGetSerializedSampleMinSizeFunction)
    (PRESTypePluginEndpointData endpointData,
     RTIBool includeEncapsulation,
     RTIEncapsulationId encapsulationId,
     unsigned int size);

typedef unsigned int (*PRESTypePluginGetSerializedKeyMaxSizeFunction)
    (PRESTypePluginEndpointData endpointData,
     RTIBool includeEncapsulation,
     RTIEncapsulationId encapsulation_id,
     unsigned int size);

typedef RTIBool (*PRESTypePluginInstanceToKeyFunction)
    (PRESTypePluginEndpointData endpointData,
     void *key, const void *instance);

typedef RTIBool (*PRESTypePluginKeyToInstanceFunction)
    (PRESTypePluginEndpointData endpoint_plugin_data,
     void *instance, const void *key);

typedef PRESTypePluginKeyKind (*PRESTypePluginGetKeyKindFunction) ();

typedef RTIBool (*PRESTypePluginGetBufferFunction)(
    PRESTypePluginEndpointData endpoint_plugin_data,
    struct REDABuffer *buffer,              /* Buffer to return ptr + length */
    RTIEncapsulationId encapsulationId,
    const void * user_data);                /* Can be NULL for batch */

typedef void (*PRESTypePluginReturnBufferFunction)(
    PRESTypePluginEndpointData endpoint_plugin_data,
    struct REDABuffer *buffer,             /* Buffer to release */
    RTIEncapsulationId encapsulationId);

struct PRESTypePluginBufferPoolMgmtCfg {
    int poolBufferMaxSize;
    int dynamicMemoryMaxSize;
};

struct PRESTypePluginPool {

    int encapsulationCount;
    RTIEncapsulationId *encapsulations; /* array */

    struct REDAFastBufferPool *samplePool;
    struct REDAFastBufferPool *keyPool;
    struct PRESTypePluginEndpointInfo endpointInfo;

    /* arrays of size encapsulationCount */
    struct REDAFastBufferPool **bufferPool;
    int *bufferPoolThreshold;
    int *writerBufferDynamicMaxSize; /* -2=unset, -1=unlimited, >0 */
    int *writerBufferDynamicCurrSize;/* Current size */
    unsigned int *writerBufferBatchSize;      /* 0=batch. disabled, >0=batch. enabled*/
    
    PRESTypePluginDefaultEndpointDataCreateSampleFunction 
        createSampleFnc;
    PRESTypePluginDefaultEndpointDataDestroySampleFunction 
        deleteSampleFnc;

    PRESTypePluginDefaultEndpointDataCreateKeyFunction 
        createKeyFnc;
    PRESTypePluginDefaultEndpointDataDestroyKeyFunction 
        deleteKeyFnc;
    PRESTypePluginGetSerializedSampleSizeFunction
        getSerializedSampleSizeFnc;
    /* Argument to pass to getSerializedSampleSizeFnc as endpointData */
    PRESTypePluginParticipantData getSerializedSampleSizeFncArg;

    /* initialize and destroy sample with parameter */
    REDAFastBufferPoolBufferInitializeFunction createSampleWithParamFnc;
    void* createSampleParam;
    REDAFastBufferPoolBufferFinalizeFunction deleteSampleWithParamFnc;
    void* deleteSampleParam;

    REDAFastBufferPoolBufferInitializeFunction createKeyWithParamFnc;
    void* createKeyParam;
    REDAFastBufferPoolBufferFinalizeFunction deleteKeyWithParamFnc;
    void* deleteKeyParam;
};


struct PRESTypePluginVersion {
    char majorRev;
    char minorRev;
    char majorOptions;
    char minorOptions;
};

/* plugin version copied from nddsgen module version */

/* CURRENT VERSION: 2.0 */
#define PRES_TYPE_PLUGIN_VERSION_1_0  {1, 0, 0, 0}
#define PRES_TYPE_PLUGIN_VERSION_1_1  {1, 1, 0, 0}
#define PRES_TYPE_PLUGIN_VERSION_2_0  {2, 0, 0, 0}
#define PRES_TYPE_PLUGIN_VERSION_CURRENT  PRES_TYPE_PLUGIN_VERSION_2_0


struct PRESTypePlugin {
    /* Callbacks */
    PRESTypePluginOnParticipantAttachedCallback
        onParticipantAttached;
    PRESTypePluginOnParticipantDetachedCallback
        onParticipantDetached;
    PRESTypePluginOnEndpointAttachedCallback
        onEndpointAttached;
    PRESTypePluginOnEndpointDetachedCallback
        onEndpointDetached;

    /* Sample manipulation */
    PRESTypePluginCopySampleFunction
        copySampleFnc;
    PRESTypePluginCreateSampleFunction
        createSampleFnc;
    PRESTypePluginDestroySampleFunction
        destroySampleFnc;
    PRESTypePluginFinalizeOptionalMembersFunction
        finalizeOptionalMembersFnc;

    /* Compute key hash */
    PRESTypePluginInstanceToKeyHashFunction
        instanceToKeyHashFnc;
    PRESTypePluginSerializedSampleToKeyHashFunction
        serializedSampleToKeyHashFnc;

    /* Serialize */
    PRESTypePluginSerializeFunction
        serializeFnc;
    
    /* Deserialize */
    PRESTypePluginDeserializeFunction
        deserializeFnc;

    /* Sample */
    PRESTypePluginGetSampleFunction
        getSampleFnc;
    PRESTypePluginReturnSampleFunction
        returnSampleFnc;

    /* Sizing */
    PRESTypePluginGetSerializedSampleMaxSizeFunction
        getSerializedSampleMaxSizeFnc;
    PRESTypePluginGetSerializedSampleMinSizeFunction
        getSerializedSampleMinSizeFnc;

    PRESTypePluginGetSerializedSampleSizeFunction
        getSerializedSampleSizeFnc;

    /* Key kind */
    PRESTypePluginGetKeyKindFunction
        getKeyKindFnc;

    /**********************************************
    **** Functions only needed for keyed types ****
    **********************************************/

    /* Keys */
    PRESTypePluginGetKeyFunction
        getKeyFnc;
    PRESTypePluginReturnKeyFunction
        returnKeyFnc;

    /* Sizing */
    PRESTypePluginGetSerializedKeyMaxSizeFunction
        getSerializedKeyMaxSizeFnc;

    /* Instance <=> Key */
    PRESTypePluginInstanceToKeyFunction
        instanceToKeyFnc;
    PRESTypePluginKeyToInstanceFunction
        keyToInstanceFnc;

    /* Key (de)serialize */
    PRESTypePluginSerializeKeyFunction
        serializeKeyFnc;
    PRESTypePluginDeserializeKeyFunction
        deserializeKeyFnc;
    PRESTypePluginDeserializeKeySampleFunction
        deserializeKeySampleFnc;

    PRESTypePluginSerializedKeyToKeyHashFunction
        serializedKeyToKeyHashFnc;
    
    /*e Type Code associated to the type*/
    struct RTICdrTypeCode *typeCode;
    /*i Opaque buffer for storing user data */
    PRESWord* _userBuffer;
    /*e Plugin kind */
    PRESTypePluginLanguageKind languageKind;
    /*i Version */
    struct PRESTypePluginVersion version;
    
    /*e Buffer allocator for serialization */
    
    /*e Allocator for the serialized buffer */
    PRESTypePluginGetBufferFunction getBuffer;
    
    /*e Return buffer allocated by getBuffer */
    PRESTypePluginReturnBufferFunction returnBuffer;

    /*i Unique type name */
    const char *endpointTypeName;

    /*i type code name */
    const char *typeCodeName;
    
    /* This pointer is reserved for the middleware */
    void * reserved;
};


#define PRES_TYPEPLUGIN_DEFAULT {								\
NULL, /* onParticipantAttached */								\
NULL, /* onParticipantDetached */								\
NULL, /* onEndpointAttached */									\
NULL, /* onEndpointDetached */									\
NULL, /* copySample */											\
NULL, /* createSample */										\
NULL, /* destroySample */										\
NULL, /* finalizeOptionalMembersFnc */ \
NULL, /* instanceToKeyHash */									\
NULL, /* serializedSampleToKeyHash */							\
NULL, /* serialize */											\
NULL, /* deserialize */											\
NULL, /* getSample */											\
NULL, /* returnSample */										\
NULL, /* getSerializedSampleMaxSize */							\
NULL, /* getSerializedSampleMinSize */							\
NULL, /* getSerializedSampleSize */	     						\
NULL, /* getKeyKind */											\
NULL, /* getKey */												\
NULL, /* returnKey */											\
NULL, /* getSerializedKeyMaxSize */								\
NULL, /* instanceToKey */										\
NULL, /* keyToInstance */										\
NULL, /* serializeKey */										\
NULL, /* deserializeKey */										\
NULL, /* deserializeKeySample */										\
NULL, /* serializedKeyToKeyHash */								\
NULL, /* typeCode */											\
NULL, /* userBuffer */											\
PRES_TYPEPLUGIN_UNKNOWN_LANG, /* languageKind */				\
PRES_TYPE_PLUGIN_VERSION_CURRENT, /* version */					\
NULL, /* getBuffer */                                           \
NULL, /* returnBuffer */                                        \
NULL, /* endpointTypeName */										\
NULL, /* typeCodeName */                                                                         \
NULL  /* reserved */ \
}

/*i \ingroup PRESTypePluginModule
  Parameter alignment.
*/
#define PRES_TYPEPLUGIN_PARAMETER_ALIGNMENT (4)

extern PRESDllExport 
PRESWord *PRESTypePlugin_getUserData(const struct PRESTypePlugin *self);

extern PRESDllExport 
void PRESTypePlugin_setUserData(
        struct PRESTypePlugin *self, 
        PRESWord *userData);

extern PRESDllExport const char *
PRESTypePlugin_getEndpointTypeName(const struct PRESTypePlugin *self);

extern PRESDllExport 
void PRESTypePlugin_copy(
	struct PRESTypePlugin *dst, 
	const struct PRESTypePlugin *src);

extern PRESDllExport
RTIBool PRESTypePlugin_serializePrimitiveParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrPrimitiveType type,
    RTICdrUnsignedShort parameterId);

extern PRESDllExport
RTIBool PRESTypePlugin_serializeNonPrimitiveParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrStreamSerializeFunction serializeFunction,
    RTICdrUnsignedShort parameterId,
    RTIBool serializeEncapsulation, RTIEncapsulationId encapsulationId,
    RTIBool serializeSample,
    PRESTypePluginEndpointData endpointData, void* endpointPluginQos);

extern PRESDllExport
RTIBool PRESTypePlugin_serializeNonPrimitiveParameterExtended(
    struct RTICdrStream *stream, const void *in,
    RTICdrStreamSerializeFunction serializeFunction,
    RTICdrUnsignedLong parameterId,
    RTIBool serializeEncapsulation, RTIEncapsulationId encapsulationId,
    RTIBool serializeSample,
    PRESTypePluginEndpointData endpointData, void* endpointPluginQos);

extern PRESDllExport
RTIBool PRESTypePlugin_serializePrimitiveArrayParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrUnsignedLong length,
    RTICdrPrimitiveType type, RTICdrUnsignedShort parameterId);

/*i \ingroup PRESTypePluginModule
  Helper method for serializing array of non-primitive type parameter in
  parameter sequence.

  @param stream \b InOut. Stream used for serialization.
  @param in \b In. non-primitive type that is used as in the array of parameter.
  @param length \b In. Length of array.
  @param serializefunction \b In. Function used for serialization.
  @param parameterId \b In. ID used for parameter.
  @param serializeOption \b In. serialize option obtained from writer property.

  @return RTI_TRUE if successful. RTI_FALSE otherwise.
*/
extern PRESDllExport
RTIBool PRESTypePlugin_serializeNonPrimitiveArrayParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrUnsignedLong length, unsigned int elementSize,
    RTICdrStreamSerializeFunction serializeFunction,
    RTICdrUnsignedShort parameterId,
    RTIBool serializeEncapsulation, RTIEncapsulationId encapsulationId,
    RTIBool serializeSample,
    PRESTypePluginEndpointData endpointData, void* endpointPluginQos);

extern PRESDllExport
RTIBool PRESTypePlugin_serializePrimitiveSequenceParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrUnsignedLong length, RTICdrUnsignedLong maximumLength,
    RTICdrPrimitiveType type, RTICdrUnsignedShort parameterId);

extern PRESDllExport
RTIBool PRESTypePlugin_serializeNonPrimitiveSequenceParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrUnsignedLong length, RTICdrUnsignedLong maximumLength,
    unsigned int elementSize,
    RTICdrStreamSerializeFunction serializeFunction,
    RTICdrUnsignedShort parameterId,
    RTIBool serializeEncapsulation, RTIEncapsulationId encapsulationId,
    RTIBool serializeSample,
    PRESTypePluginEndpointData endpointData, void* endpointPluginQos);

extern PRESDllExport
RTIBool PRESTypePlugin_serializeStringSequenceParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrUnsignedLong length, RTICdrUnsignedLong maximumLength,
    RTICdrUnsignedLong maximumStringLength,
    RTICdrUnsignedShort parameterId,
    void *serializeOption);

/*i \ingroup PRESTypePluginModule
  Helper method for serializing string parameter in parameter sequence.

  @param stream \b InOut. Stream used for serialization.
  @param in \b In. String used as parameter.
  @param maximumLength \b In. Maximum length of string.
  @param parameterId \b In. ID used for parameter.

  @return RTI_TRUE if successful. RTI_FALSE otherwise.
*/
extern PRESDllExport
RTIBool PRESTypePlugin_serializeStringParameter(
    struct RTICdrStream *stream, const char *in,
    RTICdrUnsignedLong maximumLength,
    RTICdrUnsignedShort parameterId);

extern PRESDllExport
RTIBool PRESTypePlugin_serializeWstringParameter(
    struct RTICdrStream *stream, const RTICdrWchar *in,
    RTICdrUnsignedLong length, RTICdrUnsignedLong maximumLength,
    RTICdrUnsignedShort parameterId);

extern PRESDllExport
RTIBool PRESTypePlugin_serializeParameterSequenceEnd(
    struct RTICdrStream *stream);

typedef RTIBool (*PRESTypePluginDeserializeParameterValueFunction)
    (PRESTypePluginEndpointData endpointData, 
     RTIBool *ok, void *parameters, struct RTICdrStream *stream,
     unsigned long parameterId, unsigned long parameterLength,
     RTIBool deserializeEncapsulation, RTIBool deserializeSample,
     void* endpointPluginQos);

typedef void (*PRESTypePluginSetDefaultParameterValuesFunction)
    (void *parameter);

extern PRESDllExport RTIBool PRESTypePlugin_serializeParameterSequence(
    struct RTICdrStream *stream, const void *parameters,
    RTICdrStreamSerializeFunction serializeParametersFunction,
    RTIBool serializeEncapsulation, 
    RTIEncapsulationId encapsulationId,
    RTIBool serializeSample,
    PRESTypePluginEndpointData endpointData, void* endpointPluginQos);

extern PRESDllExport RTIBool PRESTypePlugin_deserializeParameterSequence(
    void *parameter, struct RTICdrStream *stream,
    PRESTypePluginSetDefaultParameterValuesFunction
    setDefaultParameterValuesFnc,
    PRESTypePluginDeserializeParameterValueFunction
    deserializeParameterValueFnc,
    RTIBool deserializeEncapsulation, RTIBool deserializeSample,
    PRESTypePluginEndpointData endpointData, void* endpointPluginQos);

extern PRESDllExport
unsigned int PRESTypePlugin_getParameterHeaderMaxSizeSerialized(
    unsigned int size);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#include "pres/pres_typePlugin_impl.h"


#endif /* pres_typePlugin_h */
