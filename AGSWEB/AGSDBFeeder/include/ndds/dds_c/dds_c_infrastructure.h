/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)dds_c_infrastructure.h    generated by: makeheader    Fri Feb 16 13:51:58 2018
 *
 *		built from:	infrastructure.ifc
 */

#ifndef dds_c_infrastructure_h
#define dds_c_infrastructure_h



  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef osapi_thread_h
    #include "osapi/osapi_thread.h"
  #endif
  #ifndef osapi_cpu_h
    #include "osapi/osapi_cpu.h"
  #endif
  #ifndef dds_c_dll_h
    #include "dds_c/dds_c_dll.h"
  #endif
  #ifndef dds_c_common_h
    #include "dds_c/dds_c_common.h"
  #endif
  #ifndef dds_c_string_h
    #include "dds_c/dds_c_string.h"
  #endif
  #ifndef dds_c_sequence_h
    #include "dds_c/dds_c_sequence.h"
  #endif
  #ifndef pres_liveliness_h
    #include "pres/pres_liveliness.h"
  #endif
  #ifndef pres_locatorPing_h
    #include "pres/pres_locatorPing.h"
  #endif
  #ifndef rtixml_infrastructure_h
    #include "rtixml/rtixml_infrastructure.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


DDS_SEQUENCE(DDS_CharSeq, DDS_Char);


DDS_SEQUENCE(DDS_WcharSeq, DDS_Wchar);


DDS_SEQUENCE(DDS_OctetSeq, DDS_Octet);


DDS_SEQUENCE(DDS_ShortSeq, DDS_Short);


DDS_SEQUENCE(DDS_UnsignedShortSeq, DDS_UnsignedShort);


DDS_SEQUENCE(DDS_LongSeq, DDS_Long);


DDS_SEQUENCE(DDS_UnsignedLongSeq, DDS_UnsignedLong);


DDS_SEQUENCE(DDS_LongLongSeq, DDS_LongLong);


DDS_SEQUENCE(DDS_UnsignedLongLongSeq, DDS_UnsignedLongLong);


DDS_SEQUENCE(DDS_FloatSeq, DDS_Float);


DDS_SEQUENCE(DDS_DoubleSeq, DDS_Double);


DDS_SEQUENCE(DDS_LongDoubleSeq, DDS_LongDouble);


DDS_SEQUENCE(DDS_BooleanSeq, DDS_Boolean);


DDS_SEQUENCE(DDS_StringSeq, char*);


DDS_SEQUENCE(DDS_WstringSeq, DDS_Wchar*);


#ifndef RTI_CPP
#define DDSCPPDllExport
#endif


#ifdef __cplusplus
    } /* extern "C" */
#endif


struct DDSCPPDllExport DDS_Time_t {
    /*e
     * \dref_TimeStamp_sec
     */
    DDS_Long sec; 
    
    /*e
     * \dref_TimeStamp_nanosec
     */
    DDS_UnsignedLong nanosec; 
#ifdef RTI_CPP

    /**
     * \dref_Time_t_from_micros
     */
    static DDS_Time_t from_micros(DDS_UnsignedLongLong microseconds);

    /**
     * \dref_Time_t_from_millis
     */
    static DDS_Time_t from_millis(DDS_UnsignedLongLong milliseconds);

    /**
     * \dref_Time_t_from_nanos
     */
    static DDS_Time_t from_nanos(DDS_UnsignedLongLong nanoseconds);

    /**
     * \dref_Time_t_from_seconds
     */
    static DDS_Time_t from_seconds(DDS_UnsignedLong seconds);

    inline bool operator==(const DDS_Time_t& r) const {
    return (sec == r.sec && nanosec == r.nanosec);
    };
    inline bool operator!=(const DDS_Time_t& r) const {
    return (sec != r.sec || nanosec != r.nanosec);
    };
    inline bool operator<(const DDS_Time_t& r) const {
        if (sec == r.sec) {
            return (nanosec < r.nanosec);
        }
    return (sec < r.sec);
    };
    inline bool operator>(const DDS_Time_t& r) const {
        if (sec == r.sec) {
            return (nanosec > r.nanosec);
        }
    return (sec > r.sec);
    };
    inline bool operator<=(const DDS_Time_t& r) const {
        if (sec == r.sec) {
            return (nanosec <= r.nanosec);
        }
    return (sec < r.sec);
    };
    inline bool operator>=(const DDS_Time_t& r) const {
        if (sec == r.sec) {
            return (nanosec >= r.nanosec);
        }
    return (sec > r.sec);
    };
    DDS_Time_t operator+(const DDS_Time_t& r) const;
#endif /* RTI_CPP */
};

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef RTI_CPP
#define DDS_Time_t_equals(l, r) \
    ((l).sec == (r).sec && (l).nanosec == (r).nanosec)
#define DDS_Time_t_greater_than(l, r) \
    (((l).sec > (r).sec) || \
     (((l).sec == (r).sec) && \
      ((l).nanosec > (r).nanosec)))
#define DDS_Time_t_less_than(l, r) \
    (((l).sec < (r).sec) || \
     (((l).sec == (r).sec) && \
      ((l).nanosec < (r).nanosec)))
#endif /* !RTI_CPP */



#define DDS_TIME_ZERO    { 0L, 0UL }


 extern DDSCDllVariable const struct DDS_Time_t
DDS_TIME_MAX;



#define DDS_Time_is_zero(timePtr) \
        ((timePtr)->sec == 0L && (timePtr)->nanosec == 0UL)

 extern DDSCDllVariable const DDS_Long DDS_TIME_INVALID_SEC;


#define DDS_TIMESTAMP_INVALID_SEC DDS_TIME_INVALID_SEC

 extern DDSCDllVariable const DDS_UnsignedLong DDS_TIME_INVALID_NSEC;


#define DDS_TIMESTAMP_INVALID_NSEC DDS_TIME_INVALID_NSEC

 extern DDSCDllVariable const struct DDS_Time_t DDS_TIME_INVALID;


#define DDS_Time_is_invalid(timePtr) \
        ((timePtr)->sec < 0)


#ifdef __cplusplus
    } /* extern "C" */
#endif



struct DDSCPPDllExport DDS_Duration_t { 
    /*e \dref_TimeStamp_sec
     */
    DDS_Long sec; 
    
    /*e \dref_TimeStamp_nanosec
     */
    DDS_UnsignedLong nanosec; 

#ifdef RTI_CPP

    /**
     * \dref_Duration_t_from_micros
     */
    static DDS_Duration_t from_micros(DDS_UnsignedLongLong microseconds);

    /**
     * \dref_Duration_t_from_millis
     */
    static DDS_Duration_t from_millis(DDS_UnsignedLongLong milliseconds);
    
    /**
     * \dref_Duration_t_from_nanos
     */
    static DDS_Duration_t from_nanos(DDS_UnsignedLongLong nanoseconds);
    
    /**
     * \dref_Duration_t_from_seconds
     */
    static DDS_Duration_t from_seconds(DDS_UnsignedLong seconds);

    bool is_infinite() const;

    bool operator==(const DDS_Duration_t& r) const;

    inline bool operator!=(const DDS_Duration_t& r) const {
        return !(*this == r);
    };

    bool operator<(const DDS_Duration_t& r) const;

    inline bool operator>(const DDS_Duration_t& r) const {
        return (r < *this);
    };

    inline bool operator<=(const DDS_Duration_t& r) const {
        return !(*this > r);
    };

    inline bool operator>=(const DDS_Duration_t& r) const {
        return !(*this < r);
    };

    DDS_Duration_t operator+(const DDS_Duration_t& r) const;

    DDS_Duration_t operator-(const DDS_Duration_t& r) const;

#endif /* RTI_CPP */

};


#ifdef __cplusplus
    extern "C" {
#endif

 extern DDSCDllVariable const DDS_Long DDS_DURATION_INFINITE_SEC;


/*i deprecated */
#define DDS_DURATION_INFINITY_SEC DDS_DURATION_INFINITE_SEC

 extern DDSCDllVariable const DDS_UnsignedLong DDS_DURATION_INFINITE_NSEC;


/*i deprecated */
#define DDS_DURATION_INFINITY_NSEC DDS_DURATION_INFINITE_NSEC

 extern DDSCDllVariable const struct DDS_Duration_t
DDS_DURATION_INFINITE;


#define DDS_Duration_is_infinite(durationPtr) \
        ((durationPtr)->sec == DDS_DURATION_INFINITE_SEC || \
         (durationPtr)->nanosec == DDS_DURATION_INFINITE_NSEC)

 extern DDSCDllVariable const DDS_Long DDS_DURATION_AUTO_SEC;

 extern DDSCDllVariable const DDS_UnsignedLong DDS_DURATION_AUTO_NSEC;

 extern DDSCDllVariable const struct DDS_Duration_t
DDS_DURATION_AUTO;


#define DDS_Duration_is_auto(durationPtr) \
        ((durationPtr)->sec == DDS_DURATION_AUTO_SEC && \
         (durationPtr)->nanosec == DDS_DURATION_AUTO_NSEC)


#define DDS_Duration_copy(out, in) \
    (out.sec = in.sec); \
    (out.nanosec = in.nanosec)

#define DDS_Duration_equal(me, other) \
    ((me)->sec == (other)->sec && \
    (me)->nanosec == (other)->nanosec)

 extern DDSCDllVariable const DDS_Long DDS_DURATION_ZERO_SEC;

 extern DDSCDllVariable const DDS_UnsignedLong DDS_DURATION_ZERO_NSEC;

 extern DDSCDllVariable const struct DDS_Duration_t
DDS_DURATION_ZERO;


#define DDS_Duration_is_zero(durationPtr) \
        ((durationPtr)->sec == DDS_DURATION_ZERO_SEC && \
         (durationPtr)->nanosec == DDS_DURATION_ZERO_NSEC)

extern DDSCDllExport
void DDS_Duration_to_ntp_time(const struct DDS_Duration_t* self,
                              struct RTINtpTime* dst);

extern DDSCDllExport
void DDS_Duration_from_ntp_time(struct DDS_Duration_t* self,
                                const struct RTINtpTime* src);

extern DDSCDllExport
int DDS_Duration_compare(const struct DDS_Duration_t* left,
                         const struct DDS_Duration_t* right);

extern DDSCDllExport
void DDS_Duration_save(const char * tag_name,
                       const struct DDS_Duration_t * value,
                       struct RTIXMLSaveContext * dst);

typedef DDS_HANDLE_TYPE_NATIVE DDS_InstanceHandle_t;


DDS_SEQUENCE(DDS_InstanceHandleSeq, DDS_InstanceHandle_t);

 extern DDSCDllVariable const DDS_InstanceHandle_t
DDS_HANDLE_NIL;

extern DDSCDllExport DDS_Boolean
DDS_InstanceHandle_equals(
        const DDS_InstanceHandle_t* self,
        const DDS_InstanceHandle_t* other);

extern DDSCDllExport
int DDS_InstanceHandle_compare(
        const DDS_InstanceHandle_t *self,
        const DDS_InstanceHandle_t *other);


#define DDS_InstanceHandle_is_nil(handlePtr) \
        PRESInstanceHandle_isNil(handlePtr)

typedef struct DDS_GUID_t {
    /*e \dref_GUID_t_value 
    */
    DDS_Octet value[16];
} DDS_GUID_t;


#define DDS_GUID_DEFAULT { \
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} \
}
#define DDS_GUID_LENGTH 16

 extern DDSCDllVariable const struct DDS_GUID_t DDS_GUID_AUTO;

 extern DDSCDllVariable const struct DDS_GUID_t DDS_GUID_UNKNOWN;

extern DDSCDllExport DDS_Boolean
DDS_GUID_equals(const struct DDS_GUID_t* self,
                const struct DDS_GUID_t* other);

extern DDSCDllExport int
DDS_GUID_compare(const struct DDS_GUID_t* self,
                 const struct DDS_GUID_t* other);

extern DDSCDllExport
void DDS_GUID_copy(struct DDS_GUID_t* self,
                   const struct DDS_GUID_t* other);

extern DDSCDllExport void 
DDS_GUID_print(
    const struct DDS_GUID_t* self, 
    const char *desc, unsigned int indent);

extern DDSCDllExport
void DDS_GUID_zero(struct DDS_GUID_t* self);

extern DDSCDllExport
void DDS_GUID_save(const char* tag_name,
                   const struct DDS_GUID_t* self,
                   struct RTIXMLSaveContext *dst);


#define DDS_SequenceNumber_subtract(answer, sn1, sn2) \
{ \
  (answer)->high  = (sn1)->high - (sn2)->high; \
  (answer)->low = (sn1)->low - (sn2)->low; \
  if ((answer)->low > (sn1)->low) { \
     --(answer)->high; \
  } \
}


#define DDS_SequenceNumber_add(answer, sn1, sn2) \
{ \
  (answer)->high = (sn1)->high + (sn2)->high; \
  (answer)->low = (sn1)->low + (sn2)->low; \
  if (((answer)->low < (sn1)->low) || ((answer)->low < (sn2)->low)) { \
      ++(answer)->high; \
  } \
}


#define DDS_SequenceNumber_plusplus(sn) \
    ((++(sn)->low) == 0) ? ++(sn)->high : 0


#define DDS_SequenceNumber_minusminus(sn) \
  { \
    register RTI_UINT32 originalLow = (sn)->low; \
    --(sn)->low; \
    if (((sn)->low > originalLow)) { --(sn)->high; } \
  }


#define DDS_SequenceNumber_compare(sn1,sn2) \
    ((((sn1)->high) > ((sn2)->high)) ? 1 : \
     ((((sn1)->high) < ((sn2)->high)) ? -1 : \
      ((((sn1)->low) > ((sn2)->low)) ? 1 : \
       ((((sn1)->low) < ((sn2)->low)) ? -1 : 0))))

typedef struct DDS_SequenceNumber_t { 
    /*e \dref_SequenceNumber_t_high
     */
    DDS_Long high; 
    
    /*e \dref_SequenceNumber_t_low
     */
    DDS_UnsignedLong low; 
     
#ifdef RTI_CPP
    inline DDS_SequenceNumber_t operator+(const DDS_SequenceNumber_t& r) const {
        DDS_SequenceNumber_t result;
        DDS_SequenceNumber_add(&result, this, &r);
        return result;
    };

    inline DDS_SequenceNumber_t operator-(const DDS_SequenceNumber_t& r) const {
        DDS_SequenceNumber_t result;
        DDS_SequenceNumber_subtract(&result, this, &r);
        return result;
    };

    inline DDS_SequenceNumber_t& operator+=(const DDS_SequenceNumber_t& r) {
        DDS_SequenceNumber_t result;
        DDS_SequenceNumber_add(&result, this, &r);
        *this = result;
        return *this;
    }

    inline DDS_SequenceNumber_t& operator-=(const DDS_SequenceNumber_t& r) {
        DDS_SequenceNumber_t result;
        DDS_SequenceNumber_subtract(&result, this, &r);
        *this = result;
        return *this;
    }

    inline DDS_SequenceNumber_t& operator++() {
        DDS_SequenceNumber_plusplus(this);
        return *this;
    }

    inline DDS_SequenceNumber_t operator++(int /*unused*/) {
        DDS_SequenceNumber_t result = *this;
        DDS_SequenceNumber_plusplus(this);
        return result;
    }

    inline DDS_SequenceNumber_t& operator--() {
        DDS_SequenceNumber_minusminus(this);
        return *this;
    }

    inline DDS_SequenceNumber_t operator--(int /*unused*/) {
        DDS_SequenceNumber_t result = *this;
        DDS_SequenceNumber_minusminus(this);
        return result;
    }

    inline bool operator==(const DDS_SequenceNumber_t& r) const  {
        int result;
        result = DDS_SequenceNumber_compare(this,&r);

        if (result == 0) {
            return true;
        }

        return false;
    };

    inline bool operator!=(const DDS_SequenceNumber_t& r) const {
        int result;
        result = DDS_SequenceNumber_compare(this,&r);

        if (result != 0) {
            return true;
        }

        return false;
    };

    inline bool operator<(const DDS_SequenceNumber_t& r) const {
        int result;
        result = DDS_SequenceNumber_compare(this,&r);

        if (result < 0) {
            return true;
        }

        return false;
    };

    inline bool operator>(const DDS_SequenceNumber_t& r) const {
        int result;
        result = DDS_SequenceNumber_compare(this,&r);

        if (result > 0) {
            return true;
        }

        return false;
    };

    inline bool operator<=(const DDS_SequenceNumber_t& r) const {
        int result;
        result = DDS_SequenceNumber_compare(this,&r);

        if (result <= 0) {
            return true;
        }

        return false;
    };

    inline bool operator>=(const DDS_SequenceNumber_t& r) const {
        int result;
        result = DDS_SequenceNumber_compare(this,&r);

        if (result >= 0) {
            return true;
        }

        return false;
    };
#endif
} DDS_SequenceNumber_t;

 
#define DDS_SEQUENCENUMBER_DEFAULT { \
    (DDS_Long)0xffffffff, \
    (DDS_UnsignedLong)0xffffffff, \
}

 extern DDSCDllVariable const struct DDS_SequenceNumber_t
DDS_SEQUENCE_NUMBER_UNKNOWN;

 extern DDSCDllVariable const struct DDS_SequenceNumber_t
DDS_SEQUENCE_NUMBER_ZERO;

 extern DDSCDllVariable const struct DDS_SequenceNumber_t
DDS_SEQUENCE_NUMBER_MAX;

 extern DDSCDllVariable const struct DDS_SequenceNumber_t
DDS_AUTO_SEQUENCE_NUMBER;

struct DDS_OriginalWriterInfo_t { 
    /*i \dref_OriginalWriterInfo_t_writer_guid */
    struct DDS_GUID_t writer_guid;
    /*i \dref_OriginalWriterInfo_t_sequence_number */
    struct DDS_SequenceNumber_t sequence_number;
    /*TODO: Add inline parameters */
};

typedef enum {
    /*e \dref_ExceptionCode_t_NO_EXCEPTION_CODE
     */
    DDS_NO_EXCEPTION_CODE              = 0,
    /*e \dref_ExceptionCode_t_USER_EXCEPTION_CODE
     */    
    DDS_USER_EXCEPTION_CODE            = 1,
    /*e \dref_ExceptionCode_t_SYSTEM_EXCEPTION_CODE
     */    
    DDS_SYSTEM_EXCEPTION_CODE          = 2,
    /*e \dref_ExceptionCode_t_BAD_PARAM_SYSTEM_EXCEPTION_CODE
     */
    DDS_BAD_PARAM_SYSTEM_EXCEPTION_CODE = 3,
    /*e \dref_ExceptionCode_t_NO_MEMORY_SYSTEM_EXCEPTION_CODE
     */
    DDS_NO_MEMORY_SYSTEM_EXCEPTION_CODE = 4,
    /*e \dref_ExceptionCode_t_BAD_TYPECODE_SYSTEM_EXCEPTION_CODE
     */
    DDS_BAD_TYPECODE_SYSTEM_EXCEPTION_CODE = 5,
    /*e \dref_ExceptionCode_t_BADKIND_USER_EXCEPTION_CODE
     */
    DDS_BADKIND_USER_EXCEPTION_CODE    = 6,
    /*e \dref_ExceptionCode_t_BOUNDS_USER_EXCEPTION_CODE
     */
    DDS_BOUNDS_USER_EXCEPTION_CODE     = 7,
    /*e \dref_ExceptionCode_t_IMMUTABLE_TYPECODE_SYSTEM_EXCEPTION_CODE
     */
    DDS_IMMUTABLE_TYPECODE_SYSTEM_EXCEPTION_CODE = 8,
    /*e \dref_ExceptionCode_t_BAD_MEMBER_NAME_USER_EXCEPTION_CODE
     */
    DDS_BAD_MEMBER_NAME_USER_EXCEPTION_CODE  = 9,
    /*e \dref_ExceptionCode_t_BAD_MEMBER_ID_USER_EXCEPTION_CODE
     */
    DDS_BAD_MEMBER_ID_USER_EXCEPTION_CODE  = 10

} DDS_ExceptionCode_t;

typedef enum {
    /*e \dref_ReturnCode_t_RETCODE_OK
     */
    DDS_RETCODE_OK                   = 0,

    /*e \dref_ReturnCode_t_RETCODE_ERROR
     */
    DDS_RETCODE_ERROR                = 1,

    /*e \dref_ReturnCode_t_RETCODE_UNSUPPORTED
     */
    DDS_RETCODE_UNSUPPORTED         = 2,

    /*e \dref_ReturnCode_t_RETCODE_BAD_PARAMETER
     */
    DDS_RETCODE_BAD_PARAMETER        = 3,

    /*e \dref_ReturnCode_t_RETCODE_PRECONDITION_NOT_MET
     */
    DDS_RETCODE_PRECONDITION_NOT_MET = 4,

    /*e \dref_ReturnCode_t_RETCODE_OUT_OF_RESOURCES
     */
    DDS_RETCODE_OUT_OF_RESOURCES     = 5,

    /*e \dref_ReturnCode_t_RETCODE_NOT_ENABLED
     */
    DDS_RETCODE_NOT_ENABLED          = 6,

    /*e \dref_ReturnCode_t_RETCODE_IMMUTABLE_POLICY
     */
    DDS_RETCODE_IMMUTABLE_POLICY     = 7,

    /*e \dref_ReturnCode_t_RETCODE_INCONSISTENT_POLICY
     */
    DDS_RETCODE_INCONSISTENT_POLICY  = 8,

    /*e \dref_ReturnCode_t_RETCODE_ALREADY_DELETED
     */
    DDS_RETCODE_ALREADY_DELETED  = 9,

    /*e \dref_ReturnCode_t_RETCODE_TIMEOUT
     */
    DDS_RETCODE_TIMEOUT  = 10,

    /*e \dref_ReturnCode_t_RETCODE_NO_DATA
     */
    DDS_RETCODE_NO_DATA  = 11,

    /*e \dref_ReturnCode_t_RETCODE_ILLEGAL_OPERATION
     */
    DDS_RETCODE_ILLEGAL_OPERATION  = 12,

    /*e \dref_ReturnCode_t_RETCODE_NOT_ALLOWED_BY_SEC
     */
    DDS_RETCODE_NOT_ALLOWED_BY_SEC = 13
} DDS_ReturnCode_t;

typedef DDS_UnsignedLong DDS_StatusMask;


#define DDS_STATUS_MASK_NONE   ((DDS_StatusMask) 0)


/* (Edward): don't include onDestUnreachable until fully implemented as status */
#define DDS_STATUS_MASK_ALL    (~(DDS_StatusMask)DDS_DATA_WRITER_DESTINATION_UNREACHABLE_STATUS)

typedef enum {
    /*e \dref_StatusKind_INCONSISTENT_TOPIC_STATUS
     */
    DDS_INCONSISTENT_TOPIC_STATUS = 0x0001 << 0,

    /*e \dref_StatusKind_OFFERED_DEADLINE_MISSED_STATUS
     */
    DDS_OFFERED_DEADLINE_MISSED_STATUS = 0x0001 << 1,

    /*e \dref_StatusKind_REQUESTED_DEADLINE_MISSED_STATUS
     */
    DDS_REQUESTED_DEADLINE_MISSED_STATUS = 0x0001 << 2,

    /*e \dref_StatusKind_OFFERED_INCOMPATIBLE_QOS_STATUS
     */
    DDS_OFFERED_INCOMPATIBLE_QOS_STATUS = 0x0001 << 5,

    /*e \dref_StatusKind_REQUESTED_INCOMPATIBLE_QOS_STATUS
     */
    DDS_REQUESTED_INCOMPATIBLE_QOS_STATUS = 0x0001 << 6,

    /*e \dref_StatusKind_SAMPLE_LOST_STATUS
     */
    DDS_SAMPLE_LOST_STATUS = 0x0001 << 7,

    /*e \dref_StatusKind_SAMPLE_REJECTED_STATUS
     */
    DDS_SAMPLE_REJECTED_STATUS = 0x0001 << 8,

    /*e \dref_StatusKind_DATA_ON_READERS_STATUS
     */
    DDS_DATA_ON_READERS_STATUS = 0x0001 << 9,

    /*e \dref_StatusKind_DATA_AVAILABLE_STATUS
     */
    DDS_DATA_AVAILABLE_STATUS = 0x0001 << 10,

    /*e \dref_StatusKind_LIVELINESS_LOST_STATUS
     */
    DDS_LIVELINESS_LOST_STATUS = 0x0001 << 11,

    /*e \dref_StatusKind_LIVELINESS_CHANGED_STATUS
     */
    DDS_LIVELINESS_CHANGED_STATUS = 0x0001 << 12,

    /*e \dref_StatusKind_PUBLICATION_MATCHED_STATUS
     */
    DDS_PUBLICATION_MATCHED_STATUS = 0x0001 << 13,

    /*e \dref_StatusKind_SUBSCRIPTION_MATCHED_STATUS
     */
    DDS_SUBSCRIPTION_MATCHED_STATUS = 0x0001 << 14,
    
    /* --- Begin extended statuses --- */
    /* Previously, the "right"-most 24 bits of the StatusMask were reserved
     * for standard statuses, with the remaining 8 bits for extended statuses.
     Now, as of 4.5b, with more than 8 extended statuses, and with no "official" 
     documented requirement of having only 8 bits, additional bits are being 
     designated for extended statuses.  
     */

    /*e \dref_StatusKind_SERVICE_REQUEST_ACCEPTED_STATUS
     */
    DDS_SERVICE_REQUEST_ACCEPTED_STATUS = 0x00000001 << 21,

    /*e \dref_StatusKind_DATA_WRITER_APPLICATION_ACKNOWLEDGMENT_STATUS
    */
    DDS_DATA_WRITER_APPLICATION_ACKNOWLEDGMENT_STATUS = 0x0001 << 22,

    /*e \dref_StatusKind_DATA_WRITER_INSTANCE_REPLACED_STATUS
     */
    DDS_DATA_WRITER_INSTANCE_REPLACED_STATUS = 0x0001 << 23,
    
    /*e \dref_StatusKind_RELIABLE_WRITER_CACHE_CHANGED_STATUS
     */
    DDS_RELIABLE_WRITER_CACHE_CHANGED_STATUS    = 0x00000001 << 24,
    
    /*e \dref_StatusKind_RELIABLE_READER_ACTIVITY_CHANGED_STATUS
     */
    DDS_RELIABLE_READER_ACTIVITY_CHANGED_STATUS = 0x00000001 << 25,

    /*e \dref_StatusKind_DATA_WRITER_CACHE_STATUS
     */
    DDS_DATA_WRITER_CACHE_STATUS = 0x00000001 << 26,

    /*e \dref_StatusKind_DATA_WRITER_PROTOCOL_STATUS
     */
    DDS_DATA_WRITER_PROTOCOL_STATUS = 0x00000001 << 27,

    /*e \dref_StatusKind_DATA_READER_CACHE_STATUS
     */
    DDS_DATA_READER_CACHE_STATUS = 0x00000001 << 28,

    /*e \dref_StatusKind_DATA_READER_PROTOCOL_STATUS
     */
    DDS_DATA_READER_PROTOCOL_STATUS = 0x00000001 << 29,

    /*i \dref_StatusKind_DATA_WRITER_DESTINATION_UNREACHABLE_STATUS
     */
    DDS_DATA_WRITER_DESTINATION_UNREACHABLE_STATUS = 0x00000001 << 30,

    /*i \dref_StatusKind_DATA_WRITER_SAMPLE_REMOVED_STATUS
     */
    /* DDS_DATA_WRITER_SAMPLE_REMOVED_STATUS = 0x00000001 << 31 */
    DDS_DATA_WRITER_SAMPLE_REMOVED_STATUS = 0x80000000

    /*e \dref_StatusKind_DATA_WRITER_DATA_REQUEST_STATUS
     */
    /* DDS_DATA_WRITER_DATA_REQUEST_STATUS = 0x00000001 << 32, */

    /*e \dref_StatusKind_DATA_WRITER_DATA_RETURN_STATUS
     */
    /* DDS_DATA_WRITER_DATA_RETURN_STATUS = 0x00000001 << 33 */

} DDS_StatusKind;

typedef DDS_UnsignedLong DDS_ThreadSettingsKindMask;


#define DDS_THREAD_SETTINGS_KIND_MASK_DEFAULT \
    ((DDS_ThreadSettingsKindMask)RTI_OSAPI_THREAD_OPTION_DEFAULT)

typedef enum {
    
    /*e \dref_ThreadSettingsKind_THREAD_SETTINGS_FLOATING_POINT
     */
    DDS_THREAD_SETTINGS_FLOATING_POINT =
    RTI_OSAPI_THREAD_OPTION_FLOATING_POINT,
    
    /*e \dref_ThreadSettingsKind_THREAD_SETTINGS_STDIO
     */
    DDS_THREAD_SETTINGS_STDIO = RTI_OSAPI_THREAD_OPTION_STDIO,

    /*e \dref_ThreadSettingsKind_THREAD_SETTINGS_REALTIME_PRIORITY
     */
    DDS_THREAD_SETTINGS_REALTIME_PRIORITY =
    RTI_OSAPI_THREAD_OPTION_REALTIME_PRIORITY,

    /*e \dref_ThreadSettingsKind_THREAD_SETTINGS_PRIORITY_ENFORCE
     */
    DDS_THREAD_SETTINGS_PRIORITY_ENFORCE =
    RTI_OSAPI_THREAD_OPTION_PRIORITY_ENFORCE,

    /*e \dref_ThreadSettingsKind_THREAD_SETTINGS_CANCEL_ASYNCHRONOUS
     */
    DDS_THREAD_SETTINGS_CANCEL_ASYNCHRONOUS =
    RTI_OSAPI_THREAD_OPTION_CANCEL_ASYNCHRONOUS

} DDS_ThreadSettingsKind;

typedef enum {
    /*e \dref_ThreadSettingsCpuRotationKind_THREAD_SETTINGS_CPU_NO_ROTATION
     */
    DDS_THREAD_SETTINGS_CPU_NO_ROTATION,
    /*e \dref_ThreadSettingsCpuRotationKind_THREAD_SETTINGS_CPU_RR_ROTATION
     */
    DDS_THREAD_SETTINGS_CPU_RR_ROTATION
} DDS_ThreadSettingsCpuRotationKind;


#define DDS_THREAD_SETTINGS_CPU_ROTATION_DEFAULT \
    ((DDS_ThreadSettingsCpuRotationKind)DDS_THREAD_SETTINGS_CPU_NO_ROTATION)


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_ThreadSettings_t);

struct DDS_ThreadSettings_t {
    /*e \dref_ThreadSettings_t_mask
     */
    DDS_ThreadSettingsKindMask mask;
    /*e \dref_ThreadSettings_t_priority
     */
    DDS_Long priority;
    /*e \dref_ThreadSettings_t_stack_size
     */
    DDS_Long stack_size;
    /*e \dref_ThreadSettings_t_cpu_list
     */
    struct DDS_LongSeq cpu_list;
    /*e \dref_ThreadSettings_t_cpu_rotation;
     */
    DDS_ThreadSettingsCpuRotationKind cpu_rotation;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_ThreadSettings_t)
};


#define DDS_THREAD_SETTINGS_DEFAULT \
{ DDS_THREAD_SETTINGS_KIND_MASK_DEFAULT, \
  RTI_OSAPI_THREAD_PRIORITY_DEFAULT, \
  RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT, \
  DDS_SEQUENCE_INITIALIZER, \
  DDS_THREAD_SETTINGS_CPU_ROTATION_DEFAULT }

extern DDSCDllExport
void DDS_ThreadSettings_get_default(struct DDS_ThreadSettings_t* self);

extern DDSCDllExport
RTIBool DDS_ThreadSettings_is_equal(const struct DDS_ThreadSettings_t* self,
                                    const struct DDS_ThreadSettings_t* other);

extern DDSCDllExport
void DDS_ThreadSettings_save(const char * tag_name,
                             const struct DDS_ThreadSettings_t * value,
                             struct RTIXMLSaveContext * dst);


#define DDS_QOS_POLICY_COUNT 60 /* The count is not including DDS_INVALID_QOS_POLICY_ID */

typedef enum {
    /*e \dref_QosPolicyId_t_INVALID_QOS_POLICY_ID
     */
    DDS_INVALID_QOS_POLICY_ID           = 0,
    
    /*e \dref_QosPolicyId_t_USERDATA_QOS_POLICY_ID
     */
    DDS_USERDATA_QOS_POLICY_ID          = 1,
    
    /*e \dref_QosPolicyId_t_DURABILITY_QOS_POLICY_ID
     */
    DDS_DURABILITY_QOS_POLICY_ID        = 2,
    
    /*e \dref_QosPolicyId_t_PRESENTATION_QOS_POLICY_ID
     */
    DDS_PRESENTATION_QOS_POLICY_ID      = 3,
    
    /*e \dref_QosPolicyId_t_DEADLINE_QOS_POLICY_ID
     */
    DDS_DEADLINE_QOS_POLICY_ID          = 4,
    
    /*e \dref_QosPolicyId_t_LATENCYBUDGET_QOS_POLICY_ID
     */
    DDS_LATENCYBUDGET_QOS_POLICY_ID     = 5,
    
    /*e \dref_QosPolicyId_t_OWNERSHIP_QOS_POLICY_ID
     */
    DDS_OWNERSHIP_QOS_POLICY_ID         = 6,
    
    /*e \dref_QosPolicyId_t_OWNERSHIPSTRENGTH_QOS_POLICY_ID
     */
    DDS_OWNERSHIPSTRENGTH_QOS_POLICY_ID = 7,
    
    /*e \dref_QosPolicyId_t_LIVELINESS_QOS_POLICY_ID
     */
    DDS_LIVELINESS_QOS_POLICY_ID        = 8,
    
    /*e \dref_QosPolicyId_t_TIMEBASEDFILTER_QOS_POLICY_ID
     */
    DDS_TIMEBASEDFILTER_QOS_POLICY_ID   = 9,
    
    /*e \dref_QosPolicyId_t_PARTITION_QOS_POLICY_ID
     */
    DDS_PARTITION_QOS_POLICY_ID         = 10,
    
    /*e \dref_QosPolicyId_t_RELIABILITY_QOS_POLICY_ID
     */
    DDS_RELIABILITY_QOS_POLICY_ID       = 11,
    
    /*e \dref_QosPolicyId_t_DESTINATIONORDER_QOS_POLICY_ID
     */
    DDS_DESTINATIONORDER_QOS_POLICY_ID  = 12,
    
    /*e \dref_QosPolicyId_t_HISTORY_QOS_POLICY_ID
     */
    DDS_HISTORY_QOS_POLICY_ID           = 13,
    
    /*e \dref_QosPolicyId_t_RESOURCELIMITS_QOS_POLICY_ID
     */
    DDS_RESOURCELIMITS_QOS_POLICY_ID    = 14,

    /*e \dref_QosPolicyId_t_ENTITYFACTORY_QOS_POLICY_ID
     */
    DDS_ENTITYFACTORY_QOS_POLICY_ID     = 15,

    /*e \dref_QosPolicyId_t_WRITERDATALIFECYCLE_QOS_POLICY_ID
     */
    DDS_WRITERDATALIFECYCLE_QOS_POLICY_ID = 16,

    /*e \dref_QosPolicyId_t_READERDATALIFECYCLE_QOS_POLICY_ID
     */
    DDS_READERDATALIFECYCLE_QOS_POLICY_ID = 17,

    /*e \dref_QosPolicyId_t_TOPICDATA_QOS_POLICY_ID
     */
    DDS_TOPICDATA_QOS_POLICY_ID         = 18,

    /*e \dref_QosPolicyId_t_GROUPDATA_QOS_POLICY_ID
     */
    DDS_GROUPDATA_QOS_POLICY_ID         = 19,

    /*e \dref_QosPolicyId_t_TRANSPORTPRIORITY_QOS_POLICY_ID
     */
    DDS_TRANSPORTPRIORITY_QOS_POLICY_ID = 20,

    /*e \dref_QosPolicyId_t_LIFESPAN_QOS_POLICY_ID
     */
    DDS_LIFESPAN_QOS_POLICY_ID          = 21,
    
    /*e \dref_QosPolicyId_t_DURABILITYSERVICE_QOS_POLICY_ID
     */
    DDS_DURABILITYSERVICE_QOS_POLICY_ID = 22,

    /*e \dref_QosPolicyId_t_TYPE_CONSISTENCY_ENFORCEMENT_QOS_POLICY_ID
     */
    DDS_TYPE_CONSISTENCY_ENFORCEMENT_QOS_POLICY_ID = 24,

    /* --- Extension QoS policies: --- */
    /*i
     * We start at 1000 to allow room for future policies added to 
     * the \dds specification.
     */
    /*e \dref_QosPolicyId_t_WIREPROTOCOL_QOS_POLICY_ID
     */
    DDS_WIREPROTOCOL_QOS_POLICY_ID      = 1000,

    /*e \dref_QosPolicyId_t_DISCOVERY_QOS_POLICY_ID
     */
    DDS_DISCOVERY_QOS_POLICY_ID      = 1001,

    /*e \dref_QosPolicyId_t_DATAREADERRESOURCELIMITS_QOS_POLICY_ID
     */
    DDS_DATAREADERRESOURCELIMITS_QOS_POLICY_ID = 1003,

    /*e \dref_QosPolicyId_t_DATAWRITERRESOURCELIMITS_QOS_POLICY_ID
     */
    DDS_DATAWRITERRESOURCELIMITS_QOS_POLICY_ID = 1004,

    /*e \dref_QosPolicyId_t_DATAREADERPROTOCOL_QOS_POLICY_ID
     */
    DDS_DATAREADERPROTOCOL_QOS_POLICY_ID = 1005,

    /*e \dref_QosPolicyId_t_DATAWRITERPROTOCOL_QOS_POLICY_ID
     */
    DDS_DATAWRITERPROTOCOL_QOS_POLICY_ID = 1006,

    /*e \dref_QosPolicyId_t_DOMAINPARTICIPANTRESOURCELIMITS_QOS_POLICY_ID
     */
    DDS_DOMAINPARTICIPANTRESOURCELIMITS_QOS_POLICY_ID = 1007,

    /*e \dref_QosPolicyId_t_EVENT_QOS_POLICY_ID
     */
    DDS_EVENT_QOS_POLICY_ID = 1008,

    /*e \dref_QosPolicyId_t_DATABASE_QOS_POLICY_ID
     */
    DDS_DATABASE_QOS_POLICY_ID = 1009,

    /*e \dref_QosPolicyId_t_RECEIVERPOOL_QOS_POLICY_ID
     */
    DDS_RECEIVERPOOL_QOS_POLICY_ID = 1010,

    /*e \dref_QosPolicyId_t_DISCOVERYCONFIG_QOS_POLICY_ID
     */
    DDS_DISCOVERYCONFIG_QOS_POLICY_ID = 1011,

    /*e \dref_QosPolicyId_t_EXCLUSIVEAREA_QOS_POLICY_ID
     */
    DDS_EXCLUSIVEAREA_QOS_POLICY_ID = 1012,

    /*i \dref_QosPolicyId_t_USEROBJECT_QOS_POLICY_ID
     */
    DDS_USEROBJECT_QOS_POLICY_ID = 1013,

    /*e \dref_QosPolicyId_t_SYSTEMRESOURCELIMITS_QOS_POLICY_ID
     */
    DDS_SYSTEMRESOURCELIMITS_QOS_POLICY_ID = 1014,

    /*e \dref_QosPolicyId_t_TRANSPORTSELECTION_QOS_POLICY_ID
     */
    DDS_TRANSPORTSELECTION_QOS_POLICY_ID = 1015,
    
    /*e \dref_QosPolicyId_t_TRANSPORTUNICAST_QOS_POLICY_ID
     */
    DDS_TRANSPORTUNICAST_QOS_POLICY_ID = 1016,    

    /*e \dref_QosPolicyId_t_TRANSPORTMULTICAST_QOS_POLICY_ID
     */
    DDS_TRANSPORTMULTICAST_QOS_POLICY_ID = 1017,
    
    /*e \dref_QosPolicyId_t_TRANSPORTBUILTIN_QOS_POLICY_ID
     */
    DDS_TRANSPORTBUILTIN_QOS_POLICY_ID = 1018,

    /*e \dref_QosPolicyId_t_TYPESUPPORT_QOS_POLICY_ID
     */
    DDS_TYPESUPPORT_QOS_POLICY_ID = 1019,

    /*e \dref_QosPolicyId_t_PROPERTY_QOS_POLICY_ID
     */
    DDS_PROPERTY_QOS_POLICY_ID = 1020,

    /*e \dref_QosPolicyId_t_PUBLISHMODE_QOS_POLICY_ID
     */
    DDS_PUBLISHMODE_QOS_POLICY_ID = 1021,

    /*e \dref_QosPolicyId_t_ASYNCHRONOUSPUBLISHER_QOS_POLICY_ID
     */
    DDS_ASYNCHRONOUSPUBLISHER_QOS_POLICY_ID = 1022,

    /*e \dref_QosPolicyId_t_ENTITYNAME_QOS_POLICY_ID
     */
    DDS_ENTITYNAME_QOS_POLICY_ID = 1023,

    /*i \dref_QosPolicyId_t_SERVICE_QOS_POLICY_ID
     */
    DDS_SERVICE_QOS_POLICY_ID = 1025,

    /*e \dref_QosPolicyId_t_BATCH_QOS_POLICY_ID
     */
    DDS_BATCH_QOS_POLICY_ID = 1026,

    /*e \dref_QosPolicyId_t_PROFILE_QOS_POLICY_ID
     */
    DDS_PROFILE_QOS_POLICY_ID = 1027,

    /*e \dref_QosPolicyId_t_LOCATORFILTER_QOS_POLICY_ID
     */
    DDS_LOCATORFILTER_QOS_POLICY_ID = 1028,

    /*e \dref_QosPolicyId_t_MULTICHANNEL_QOS_POLICY_ID
     */
    DDS_MULTICHANNEL_QOS_POLICY_ID = 1029,

    /*i \dref_QosPolicyId_t_TRANSPORTENCAPSULATION_QOS_POLICY_ID
     */
    DDS_TRANSPORTENCAPSULATION_QOS_POLICY_ID = 1030,

    /*i \dref_QosPolicyId_t_PUBLISHERPROTOCOL_QOS_POLICY_ID
     */
    DDS_PUBLISHERPROTOCOL_QOS_POLICY_ID = 1031,

    /*i \dref_QosPolicyId_t_SUBSCRIBERPROTOCOL_QOS_POLICY_ID
     */
    DDS_SUBSCRIBERPROTOCOL_QOS_POLICY_ID = 1032,

    /*i \dref_QosPolicyId_t_TOPICPROTOCOL_QOS_POLICY_ID
     */
    DDS_TOPICPROTOCOL_QOS_POLICY_ID = 1033,

    /*i \dref_QosPolicyId_t_DOMAINPARTICIPANTPROTOCOL_QOS_POLICY_ID
     */
    DDS_DOMAINPARTICIPANTPROTOCOL_QOS_POLICY_ID = 1034,
    
    /*e \dref_QosPolicyId_t_AVAILABILITY_QOS_POLICY_ID
     */
    DDS_AVAILABILITY_QOS_POLICY_ID = 1035,

    /*e \dref_QosPolicyId_t_TRANSPORTMULTICASTMAPPING_QOS_POLICY_ID
     */
    DDS_TRANSPORTMULTICASTMAPPING_QOS_POLICY_ID = 1036,

    /*e \dref_QosPolicyId_t_LOGGING_QOS_POLICY_ID
     */
    DDS_LOGGING_QOS_POLICY_ID = 1037,

    /*e \dref_QosPolicyId_t_TOPICQUERYDISPATCH_QOS_POLICY_ID
     */
    DDS_TOPICQUERYDISPATCH_QOS_POLICY_ID = 1038
} DDS_QosPolicyId_t;

struct DDS_QosPolicyCount {
    /*e \dref_QosPolicyCount_policy_id
     */
    DDS_QosPolicyId_t policy_id;
    
    /*e \dref_QosPolicyCount_count
     */
    DDS_Long count;
};


DDS_SEQUENCE(DDS_QosPolicyCountSeq, struct DDS_QosPolicyCount);

extern DDSCDllExport
const char * DDS_QosPolicyId_to_string(DDS_QosPolicyId_t id);

typedef enum {
    /*e \dref_EntityKind_t_UNKNOWN_ENTITY_KIND
     */
    DDS_UNKNOWN_ENTITY_KIND                 = 0,
    /*e \dref_EntityKind_t_PARTICIPANT_ENTITY_KIND
     */
    DDS_PARTICIPANT_ENTITY_KIND             = 1,
    /*e \dref_EntityKind_t_PUBLISHER_ENTITY_KIND
     */
    DDS_PUBLISHER_ENTITY_KIND               = 2,
    /*e \dref_EntityKind_t_SUBSCRIBER_ENTITY_KIND
     */
    DDS_SUBSCRIBER_ENTITY_KIND              = 3,
    /*e \dref_EntityKind_t_TOPIC_ENTITY_KIND
     */
    DDS_TOPIC_ENTITY_KIND                   = 4,
    /*e \dref_EntityKind_t_DATAREADER_ENTITY_KIND
     */
    DDS_DATAREADER_ENTITY_KIND              = 5,
    /*e \dref_EntityKind_t_DATAWRITER_ENTITY_KIND
     */
    DDS_DATAWRITER_ENTITY_KIND              = 6

} DDS_EntityKind_t;

 extern DDSCDllVariable const char *const
DDS_USERDATA_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_UserDataQosPolicy);

struct DDS_UserDataQosPolicy {
    /*e \dref_UserDataQosPolicy_value
     */
    struct DDS_OctetSeq value;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_UserDataQosPolicy)
};


#define DDS_USER_DATA_QOS_POLICY_DEFAULT \
{ DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport
void DDS_UserDataQosPolicy_save(const struct DDS_UserDataQosPolicy* self,
                                const struct DDS_UserDataQosPolicy* base,
                                struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_TOPICDATA_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TopicDataQosPolicy);

struct DDS_TopicDataQosPolicy {
    /*e \dref_TopicDataQosPolicy_value
     */
    struct DDS_OctetSeq value;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TopicDataQosPolicy)
};


#define DDS_TOPIC_DATA_QOS_POLICY_DEFAULT { DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport
void DDS_TopicDataQosPolicy_save(const struct DDS_TopicDataQosPolicy* self,
                                 const struct DDS_TopicDataQosPolicy* base,
                                 struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_GROUPDATA_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_GroupDataQosPolicy);

struct DDS_GroupDataQosPolicy {
    /*e \dref_GroupDataQosPolicy_value
     */
    struct DDS_OctetSeq value;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_GroupDataQosPolicy)
};


#define DDS_GROUP_DATA_QOS_POLICY_DEFAULT { DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport
void DDS_GroupDataQosPolicy_save(const struct DDS_GroupDataQosPolicy* self,
                                 const struct DDS_GroupDataQosPolicy* base,
                                 struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_TOPICPROTOCOL_QOS_POLICY_NAME;

struct DDS_TopicProtocolQosPolicy {
    /*i \dref_TopicProtocolQosPolicy_vendor_specific_entity
    */
    DDS_Boolean vendor_specific_entity;
};


#define DDS_TOPIC_PROTOCOL_QOS_POLICY_DEFAULT 	\
{ 							\
  DDS_BOOLEAN_FALSE /* vendor_specific_entity */ 	\
}

 extern DDSCDllVariable const char *const
DDS_DOMAINPARTICIPANTPROTOCOL_QOS_POLICY_NAME;

struct DDS_DomainParticipantProtocolQosPolicy {
    /*i \dref_DomainParticipantQosPolicy_vendor_specific_entity
    */
    DDS_Boolean vendor_specific_entity;
};


#define DDS_DOMAIN_PARTICIPANT_PROTOCOL_QOS_POLICY_DEFAULT 	\
{ 								\
  DDS_BOOLEAN_FALSE /* vendor_specific_entity */ 		\
}

 extern DDSCDllVariable const char *const
DDS_DURABILITY_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_DurabilityQosPolicyKind_VOLATILE_DURABILITY_QOS
     */
    DDS_VOLATILE_DURABILITY_QOS,
    
    /*e \dref_DurabilityQosPolicyKind_TRANSIENT_LOCAL_DURABILITY_QOS
     */
    DDS_TRANSIENT_LOCAL_DURABILITY_QOS,

    /*e \dref_DurabilityQosPolicyKind_TRANSIENT_DURABILITY_QOS
     */
    DDS_TRANSIENT_DURABILITY_QOS,
    
    /*e \dref_DurabilityQosPolicyKind_PERSISTENT_DURABILITY_QOS
     */
    DDS_PERSISTENT_DURABILITY_QOS
} DDS_DurabilityQosPolicyKind;

struct DDS_DurabilityQosPolicy {
    /*e \dref_DurabilityQosPolicy_kind
     */
    DDS_DurabilityQosPolicyKind kind;
    /*e \dref_DurabilityQosPolicy_direct_communication 
    */
    DDS_Boolean direct_communication;
};


#define DDS_DURABILITY_QOS_POLICY_DEFAULT \
{ DDS_VOLATILE_DURABILITY_QOS, \
  RTI_TRUE }

extern DDSCDllExport
void DDS_DurabilityQosPolicy_save(const struct DDS_DurabilityQosPolicy* self,
                                  const struct DDS_DurabilityQosPolicy* base,
                                  struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_PRESENTATION_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_PresentationQosPolicyAccessScopeKind_INSTANCE_PRESENTATION_QOS
     */
    DDS_INSTANCE_PRESENTATION_QOS,
    
    /*e \dref_PresentationQosPolicyAccessScopeKind_TOPIC_PRESENTATION_QOS
     */
    DDS_TOPIC_PRESENTATION_QOS,
    
    /*e \dref_PresentationQosPolicyAccessScopeKind_GROUP_PRESENTATION_QOS
     */
    DDS_GROUP_PRESENTATION_QOS,

    /*e \dref_PresentationQosPolicyAccessScopeKind_HIGHEST_OFFERED_PRESENTATION_QOS
     */
    DDS_HIGHEST_OFFERED_PRESENTATION_QOS
} DDS_PresentationQosPolicyAccessScopeKind;

struct DDS_PresentationQosPolicy {
    /*e \dref_PresentationQosPolicy_access_scope
     */
    DDS_PresentationQosPolicyAccessScopeKind access_scope;
    
    /*e \dref_PresentationQosPolicy_coherent_access
     */
    DDS_Boolean coherent_access;
    
    /*e \dref_PresentationQosPolicy_ordered_access
     */
    DDS_Boolean ordered_access;
};


#define DDS_PRESENTATION_QOS_POLICY_DEFAULT \
{ DDS_INSTANCE_PRESENTATION_QOS, DDS_BOOLEAN_FALSE, DDS_BOOLEAN_FALSE }

extern DDSCDllExport
void DDS_PresentationQosPolicy_save(const struct DDS_PresentationQosPolicy* self,
                                    const struct DDS_PresentationQosPolicy* base,
                                    struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_DEADLINE_QOS_POLICY_NAME;

struct DDS_DeadlineQosPolicy {
    /*e \dref_DeadlineQosPolicy_period
     */
    struct DDS_Duration_t period;
};


#define DDS_DEADLINE_QOS_POLICY_DEFAULT  \
{{ 0x7fffffffL, 0x7fffffffUL }}

extern DDSCDllExport
void DDS_DeadlineQosPolicy_save(const struct DDS_DeadlineQosPolicy* self,
                                const struct DDS_DeadlineQosPolicy* base,
                                struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_LATENCYBUDGET_QOS_POLICY_NAME;

struct DDS_LatencyBudgetQosPolicy {
    /*e \dref_LatencyBudgetQosPolicy_duration
     */
    struct DDS_Duration_t duration;
};


#define DDS_LATENCY_BUDGET_QOS_POLICY_DEFAULT { {0L, 0UL} }

extern DDSCDllExport
void DDS_LatencyBudgetQosPolicy_save(const struct DDS_LatencyBudgetQosPolicy* self,
                                     const struct DDS_LatencyBudgetQosPolicy* base,
                                     struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_OWNERSHIP_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_OwnershipQosPolicyKind_SHARED_OWNERSHIP_QOS
     */
    DDS_SHARED_OWNERSHIP_QOS,
    
    /*e \dref_OwnershipQosPolicyKind_EXCLUSIVE_OWNERSHIP_QOS
     */
    DDS_EXCLUSIVE_OWNERSHIP_QOS
} DDS_OwnershipQosPolicyKind;

struct DDS_OwnershipQosPolicy {
    /*e \dref_OwnershipQosPolicy_kind
     */
    DDS_OwnershipQosPolicyKind kind;
};


#define DDS_OWNERSHIP_QOS_POLICY_DEFAULT \
{ DDS_SHARED_OWNERSHIP_QOS }

extern DDSCDllExport
void DDS_OwnershipQosPolicy_save(const struct DDS_OwnershipQosPolicy* self,
                                 const struct DDS_OwnershipQosPolicy* base,
                                 struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_OWNERSHIPSTRENGTH_QOS_POLICY_NAME;

struct DDS_OwnershipStrengthQosPolicy {
    /*e \dref_OwnershipStrengthQosPolicy_value
     */
    DDS_Long value;
};


#define DDS_OWNERSHIP_STRENGTH_QOS_POLICY_DEFAULT { 0L }

extern DDSCDllExport
void DDS_OwnershipStrengthQosPolicy_save(const struct DDS_OwnershipStrengthQosPolicy* self,
                                         const struct DDS_OwnershipStrengthQosPolicy* base,
                                         struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_LIVELINESS_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_LivelinessQosPolicyKind_AUTOMATIC_LIVELINESS_QOS
     */
    DDS_AUTOMATIC_LIVELINESS_QOS,
    
    /*e \dref_LivelinessQosPolicyKind_MANUAL_BY_PARTICIPANT_LIVELINESS_QOS
     */
    DDS_MANUAL_BY_PARTICIPANT_LIVELINESS_QOS,
    
    /*e \dref_LivelinessQosPolicyKind_MANUAL_BY_TOPIC_LIVELINESS_QOS
     */
    DDS_MANUAL_BY_TOPIC_LIVELINESS_QOS
} DDS_LivelinessQosPolicyKind;

struct DDS_LivelinessQosPolicy {
    /*e \dref_LivelinessQosPolicy_kind
     */
    DDS_LivelinessQosPolicyKind kind;
    
    /*e \dref_LivelinessQosPolicy_lease_duration
     */
    struct DDS_Duration_t lease_duration;

    /*e \dref_LivelinessQosPolicy_assertions_per_lease_duration
     */
    DDS_Long assertions_per_lease_duration;
};


#define DDS_LIVELINESS_QOS_POLICY_DEFAULT \
{ DDS_AUTOMATIC_LIVELINESS_QOS, {0x7fffffff, 0x7fffffffUL}, 3}

extern DDSCDllExport
void DDS_LivelinessQosPolicy_save(const struct DDS_LivelinessQosPolicy* self,
                                  const struct DDS_LivelinessQosPolicy* base,
                                  struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_TIMEBASEDFILTER_QOS_POLICY_NAME;

struct DDS_TimeBasedFilterQosPolicy {
    /*e \dref_TimeBasedFilterQosPolicy_minimum_separation
    */
    struct DDS_Duration_t minimum_separation;
};


#define DDS_TIME_BASED_FILTER_QOS_POLICY_DEFAULT { {0L, 0UL} }

extern DDSCDllExport
void DDS_TimeBasedFilterQosPolicy_save(const struct DDS_TimeBasedFilterQosPolicy* self,
                                       const struct DDS_TimeBasedFilterQosPolicy* base,
                                       struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_PARTITION_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_PartitionQosPolicy); 

/*e \dref_PartitionQosPolicy
 */
struct DDS_PartitionQosPolicy {
    /*e \dref_PartitionQosPolicy_name
     */
    struct DDS_StringSeq name;
 
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_PartitionQosPolicy)
};


#define DDS_PARTITION_QOS_POLICY_DEFAULT { DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport
void DDS_PartitionQosPolicy_save(const struct DDS_PartitionQosPolicy* self,
                                 const struct DDS_PartitionQosPolicy* base,
                                 struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_RELIABILITY_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_ReliabilityQosPolicyKind_BEST_EFFORT_RELIABILITY_QOS
     */
    DDS_BEST_EFFORT_RELIABILITY_QOS,
    
    /*e \dref_ReliabilityQosPolicyKind_RELIABLE_RELIABILITY_QOS
     */
    DDS_RELIABLE_RELIABILITY_QOS
} DDS_ReliabilityQosPolicyKind;

typedef enum {
    /*e \dref_ReliabilityQosPolicyAcknowledgmentModeKind_PROTOCOL_ACKNOWLEDGMENT_MODE
     */
    DDS_PROTOCOL_ACKNOWLEDGMENT_MODE, /* default */
    /*e \dref_ReliabilityQosPolicyAcknowledgmentModeKind_APPLICATION_AUTO_ACKNOWLEDGMENT_MODE
     */
    DDS_APPLICATION_AUTO_ACKNOWLEDGMENT_MODE,
    /*i \dref_ReliabilityQosPolicyAcknowledgmentModeKind_APPLICATION_ORDERED_ACKNOWLEDGMENT_MODE
     */
    DDS_APPLICATION_ORDERED_ACKNOWLEDGMENT_MODE,
    /*e \dref_ReliabilityQosPolicyAcknowledgmentModeKind_APPLICATION_EXPLICIT_ACKNOWLEDGMENT_MODE
     */
    DDS_APPLICATION_EXPLICIT_ACKNOWLEDGMENT_MODE
} DDS_ReliabilityQosPolicyAcknowledgmentModeKind;

struct DDS_ReliabilityQosPolicy {
    /*e \dref_ReliabilityQosPolicy_kind
     */
    DDS_ReliabilityQosPolicyKind kind;
    /*e \dref_ReliabilityQosPolicy_max_blocking_time
     */
    struct DDS_Duration_t max_blocking_time;
    /*e \dref_ReliabilityQosPolicy_acknowledgment_kind
    */
    DDS_ReliabilityQosPolicyAcknowledgmentModeKind acknowledgment_kind;
};


#define DDS_RELIABILITY_QOS_POLICY_MAX_BLOCKING_TIME_DEFAULT \
          {0L, 100000000UL}


#define DDS_RELIABILITY_QOS_POLICY_DEFAULT \
          { DDS_BEST_EFFORT_RELIABILITY_QOS, \
          DDS_RELIABILITY_QOS_POLICY_MAX_BLOCKING_TIME_DEFAULT, \
          DDS_PROTOCOL_ACKNOWLEDGMENT_MODE }

extern DDSCDllExport
void DDS_ReliabilityQosPolicy_save(const struct DDS_ReliabilityQosPolicy* self,
                                   const struct DDS_ReliabilityQosPolicy* base,
                                   struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_DESTINATIONORDER_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_DestinationOrderQosPolicyKind_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS
     */
    DDS_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,

    /*e \dref_DestinationOrderQosPolicyKind_BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS
     */
    DDS_BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS

} DDS_DestinationOrderQosPolicyKind;

typedef enum {
    /*e \dref_DestinationOrderQosPolicyScopeKind_INSTANCE_SCOPE_DESTINATIONORDER_QOS
     */
    DDS_INSTANCE_SCOPE_DESTINATIONORDER_QOS,

    /*e \dref_DestinationOrderQosPolicyScopeKind_TOPIC_SCOPE_DESTINATIONORDER_QOS
     */
    DDS_TOPIC_SCOPE_DESTINATIONORDER_QOS
} DDS_DestinationOrderQosPolicyScopeKind;

struct DDS_DestinationOrderQosPolicy {
    /*e \dref_DestinationOrderQosPolicy_kind
     */
    DDS_DestinationOrderQosPolicyKind kind;
    /*e \dref_DestinationOrderQosPolicy_scope
     */
    DDS_DestinationOrderQosPolicyScopeKind scope;
    /*e \dref_DestinationOrderQosPolicy_source_timestamp_tolerance
     */
    struct DDS_Duration_t source_timestamp_tolerance;
};


#define DDS_DESTINATION_ORDER_QOS_POLICY_DEFAULT \
{ DDS_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS, \
  DDS_INSTANCE_SCOPE_DESTINATIONORDER_QOS, \
  {30, 0} /* source_timestamp_tolerance */ }

extern DDSCDllExport
void DDS_DestinationOrderQosPolicy_save(const struct DDS_DestinationOrderQosPolicy* self,
                                        const struct DDS_DestinationOrderQosPolicy* base,
                                        struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_HISTORY_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_HistoryQosPolicyKind_KEEP_LAST_HISTORY_QOS
     */
    DDS_KEEP_LAST_HISTORY_QOS,
    
    /*e \dref_HistoryQosPolicyKind_KEEP_ALL_HISTORY_QOS
     */
    DDS_KEEP_ALL_HISTORY_QOS

} DDS_HistoryQosPolicyKind;

typedef enum {
    /*e \dref_RefilterQosPolicyKind_NONE_REFILTER_QOS
     */
    DDS_NONE_REFILTER_QOS,
    
    /*e \dref_RefilterQosPolicyKind_ALL_REFILTER_QOS
     */
    DDS_ALL_REFILTER_QOS,

    /*e \dref_RefilterQosPolicyKind_ON_DEMAND_REFILTER_QOS
     */
    DDS_ON_DEMAND_REFILTER_QOS

} DDS_RefilterQosPolicyKind;

struct DDS_HistoryQosPolicy {
    /*e \dref_HistoryQosPolicy_kind
     */
    DDS_HistoryQosPolicyKind kind;
    
    /*e \dref_HistoryQosPolicy_depth
     */
    DDS_Long depth;

   /*e \dref_HistoryQosPolicy_refilter
    */
    DDS_RefilterQosPolicyKind refilter;
};


#define DDS_HISTORY_QOS_POLICY_DEFAULT { DDS_KEEP_LAST_HISTORY_QOS, \
                                         1L, /* depth */\
                                         DDS_NONE_REFILTER_QOS }


extern DDSCDllExport
void DDS_HistoryQosPolicy_save(const struct DDS_HistoryQosPolicy* self,
                               const struct DDS_HistoryQosPolicy* base,
                               struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_DURABILITYSERVICE_QOS_POLICY_NAME;

struct DDS_DurabilityServiceQosPolicy {
    /*e \dref_DurabilityServiceQosPolicy_service_cleanup_delay */
    struct DDS_Duration_t service_cleanup_delay;

    /*e \dref_DurabilityServiceQosPolicy_history_kind */
    DDS_HistoryQosPolicyKind history_kind;

    /*e \dref_DurabilityServiceQosPolicy_history_depth */
    DDS_Long history_depth;

    /*e \dref_DurabilityServiceQosPolicy_max_samples */
    DDS_Long max_samples;

    /*e \dref_DurabilityServiceQosPolicy_max_instances */
    DDS_Long max_instances;

    /*e \dref_DurabilityServiceQosPolicy_max_samples_per_instance */
    DDS_Long max_samples_per_instance;
};


#define DDS_DURABILITY_SERVICE_QOS_POLICY_DEFAULT { \
  {0L, 0UL}, /* service_cleanup_delay */        \
  DDS_KEEP_LAST_HISTORY_QOS, 1L, /* history_kind and depth */ \
  -1L, -1L, -1L /* resource_limits */ \
}

extern DDSCDllExport
void DDS_DurabilityServiceQosPolicy_save(const struct DDS_DurabilityServiceQosPolicy* self,
                                         const struct DDS_DurabilityServiceQosPolicy* base,
                                         struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_RESOURCELIMITS_QOS_POLICY_NAME;

 extern DDSCDllVariable const DDS_Long DDS_LENGTH_UNLIMITED;

struct DDS_ResourceLimitsQosPolicy {
    /*e \dref_ResourceLimitsQosPolicy_max_samples
     */
    DDS_Long max_samples;
    
    /*e \dref_ResourceLimitsQosPolicy_max_instances
     */
    DDS_Long max_instances;
    
    /*e \dref_ResourceLimitsQosPolicy_max_samples_per_instance
     */
    DDS_Long max_samples_per_instance;

    /*e \dref_ResourceLimitsQosPolicy_initial_samples
     */
    DDS_Long initial_samples;
    
    /*e \dref_ResourceLimitsQosPolicy_initial_instances
     */
    DDS_Long initial_instances;

    /*e \dref_ResourceLimitsQosPolicy_instance_hash_buckets
    */
    DDS_Long instance_hash_buckets;
};


#define DDS_RESOURCE_LIMITS_QOS_POLICY_DEFAULT { \
    -1L, /* max_samples */ \
    -1L, /* max_instances */ \
    -1L, /* max_samples_per_instance */ \
    32L, /* initial_samples */ \
    32L, /* initial_instances */ \
    1    /* instance_hash_buckets */ \
}

extern DDSCDllExport
void DDS_ResourceLimitsQosPolicy_save(const struct DDS_ResourceLimitsQosPolicy* self,
                                      const struct DDS_ResourceLimitsQosPolicy* base,
                                      struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_TRANSPORTPRIORITY_QOS_POLICY_NAME;

struct DDS_TransportPriorityQosPolicy {
    /*e \dref_TransportPriorityQosPolicy_value
     */
    DDS_Long value;
};


#define DDS_TRANSPORT_PRIORITY_QOS_POLICY_DEFAULT   {0L}

extern DDSCDllExport
void DDS_TransportPriorityQosPolicy_save(const struct DDS_TransportPriorityQosPolicy* self,
                                         const struct DDS_TransportPriorityQosPolicy* base,
                                         struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_LIFESPAN_QOS_POLICY_NAME;

struct DDS_LifespanQosPolicy {
    /*e \dref_LifespanQosPolicy_duration
    */
    struct DDS_Duration_t duration;
};


#define DDS_LIFESPAN_QOS_POLICY_DEFAULT {{0x7fffffff, 0x7fffffffUL}}

extern DDSCDllExport
void DDS_LifespanQosPolicy_save(const struct DDS_LifespanQosPolicy* self,
                                const struct DDS_LifespanQosPolicy* base,
                                struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_WRITERDATALIFECYCLE_QOS_POLICY_NAME;

struct DDS_WriterDataLifecycleQosPolicy {
    /*e \dref_WriterDataLifecycleQosPolicy_autodispose_unregistered_instances
     */
    DDS_Boolean autodispose_unregistered_instances;
    /*e \dref_WriterDataLifecycleQosPolicy_autopurge_unregistered_instances_delay
     */
    struct DDS_Duration_t autopurge_unregistered_instances_delay;
    /*e \dref_WriterDataLifecycleQosPolicy_autopurge_disposed_instances_delay
     */
    struct DDS_Duration_t autopurge_disposed_instances_delay;
};


#define DDS_WRITER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT \
{ DDS_BOOLEAN_TRUE, {0x7fffffffL, 0x7fffffffUL}, {0x7fffffffL, 0x7fffffffUL}}


#define DDS_BUITLIN_WRITER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT \
{ DDS_BOOLEAN_TRUE, {0L, 0UL}, {0x7fffffffL, 0x7fffffffUL}}

extern DDSCDllExport
void DDS_WriterDataLifecycleQosPolicy_save(const char* tag_name,
                                           const struct DDS_WriterDataLifecycleQosPolicy* self,
                                           const struct DDS_WriterDataLifecycleQosPolicy* base,
                                           struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_READERDATALIFECYCLE_QOS_POLICY_NAME;

struct DDS_ReaderDataLifecycleQosPolicy {
    /*e \dref_ReaderDataLifecycleQosPolicy_autopurge_nowriter_samples_delay
     */
    struct DDS_Duration_t autopurge_nowriter_samples_delay;
    /*e \dref_ReaderDataLifecycleQosPolicy_autopurge_disposed_samples_delay
     */
    struct DDS_Duration_t autopurge_disposed_samples_delay;
    /*e \dref_ReaderDataLifecycleQosPolicy_autopurge_disposed_instances_delay
     */
    struct DDS_Duration_t autopurge_disposed_instances_delay;
};


#define DDS_READER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT \
{ {0x7fffffffL, 0x7fffffffUL}, \
  {0x7fffffffL, 0x7fffffffUL}, \
  {0x7fffffffL, 0x7fffffffUL}}

extern DDSCDllExport
void DDS_ReaderDataLifecycleQosPolicy_save(const struct DDS_ReaderDataLifecycleQosPolicy* self,
                                           const struct DDS_ReaderDataLifecycleQosPolicy* base,
                                           struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const 
DDS_ENTITYFACTORY_QOS_POLICY_NAME;

struct DDS_EntityFactoryQosPolicy {
    /*e \dref_EntityFactoryQosPolicy_autoenable_created_entities
     */
    DDS_Boolean autoenable_created_entities;
};


#define DDS_ENTITY_FACTORY_QOS_POLICY_DEFAULT   { DDS_BOOLEAN_TRUE }

extern DDSCDllExport
void DDS_EntityFactoryQosPolicy_save(const struct DDS_EntityFactoryQosPolicy* self,
                                     const struct DDS_EntityFactoryQosPolicy* base,
                                     struct RTIXMLSaveContext* dst);

struct DDS_AllocationSettings_t {
    /*e \dref_AllocationSettings_t_initial_count
     */
    DDS_Long initial_count;

    /*e \dref_AllocationSettings_t_max_count
     */
    DDS_Long max_count;

    /*e \dref_AllocationSettings_t_incremental_count
     */
    DDS_Long incremental_count;
};

extern DDSCDllExport void
DDS_AllocationSettings_add(
        struct DDS_AllocationSettings_t* answer,
        struct DDS_AllocationSettings_t* left,
        struct DDS_AllocationSettings_t* right);

extern DDSCDllExport
void DDS_AllocationSettings_save(const char * tag_name,
                                 const struct DDS_AllocationSettings_t * self,
                                 struct RTIXMLSaveContext* dst);

struct DDS_RtpsReliableReaderProtocol_t {
    /*e \dref_RtpsReliableReaderProtocol_t_min_heartbeat_response_delay
     */
    struct DDS_Duration_t min_heartbeat_response_delay;

    /*e \dref_RtpsReliableReaderProtocol_t_max_heartbeat_response_delay
     */
    struct DDS_Duration_t max_heartbeat_response_delay;

    /*e \dref_RtpsReliableReaderProtocol_t_heartbeat_suppression_duration
     */
    struct DDS_Duration_t heartbeat_suppression_duration;

    /*e \dref_RtpsReliableReaderProtocol_t_nack_period
     */
    struct DDS_Duration_t nack_period;

    /*e \dref_RtpsReliableReaderProtocol_t_receive_window_size
     */
    DDS_Long receive_window_size;

    /*e \dref_RtpsReliableReaderProtocol_t_round_trip_time
     */
    struct DDS_Duration_t round_trip_time;

    /*e \dref_RtpsReliableReaderProtocol_t_app_ack_period
    */
    struct DDS_Duration_t app_ack_period;

    /*e \dref_RtpsReliableReaderProtocol_t_min_app_ack_response_keep_duration
    */
    struct DDS_Duration_t min_app_ack_response_keep_duration;

    /*e \dref_RtpsReliableReaderProtocol_t_samples_per_app_ack
    */
    DDS_Long samples_per_app_ack; 
};


#define DDS_RTPS_RELIABLE_READER_PROTOCOL_DEFAULT \
{{0L, 0UL}, {0L, 500000000UL}, \
 {0, 62500 * 1000} /* heartbeat_suppression_duration */, \
 {5, 0UL} /* nack_period */, \
 256 /* receive_window_size */, \
 {0, 0} /* round_trip_time */,  \
 {5, 0UL} /* app_ack_period */, \
 {0, 0UL} /* min_app_ack_response_keep_duration */, \
 1 /* samples_per_app_ack */ }


#define DDS_RTPS_RELIABLE_READER_PROTOCOL_DISCOVERY_CONFIG_DEFAULT \
{{0L, 0UL}, {0L, 0UL}, \
 {0, 62500 * 1000} /* heartbeat_suppression_duration */, \
 {5, 0UL}, /* nack_period */  \
 256, /* receive_window_size */ \
 {0, 0} /* round_trip_time, */,  \
 {5, 0UL} /* app_ack_period */, \
 {0, 0UL} /* min_app_ack_response_keep_duration */, \
 1 /* samples_per_app_ack */ }


#define DDS_RTPS_PARTICIPANT_MESSAGE_READER_DISCOVERY_CONFIG_DEFAULT \
{{0L, 0UL}, {0L, 0UL}, \
 {0, 62500 * 1000} /* heartbeat_suppression_duration */, \
 {5, 0UL}, /* nack_period */  \
 256, /* receive_window_size */ \
 {0, 0}, /* round_trip_time */  \
 {5, 0UL} /* app_ack_period */, \
 {0, 0UL} /* min_app_ack_response_keep_duration */, \
 1 /* samples_per_app_ack */ }

extern DDSCDllExport
void DDS_RtpsReliableReaderProtocol_save(const char * tag_name,
                                         const struct DDS_RtpsReliableReaderProtocol_t* self,
                                         const struct DDS_RtpsReliableReaderProtocol_t* base,
                                         struct RTIXMLSaveContext* dst);

struct DDS_RtpsReliableWriterProtocol_t {
    /*e \dref_RtpsReliableWriterProtocol_t_low_watermark
     */
    DDS_Long low_watermark;
    
    /*e \dref_RtpsReliableWriterProtocol_t_high_watermark
     */
    DDS_Long high_watermark;
    
    /*e \dref_RtpsReliableWriterProtocol_t_heartbeat_period
     */
    struct DDS_Duration_t heartbeat_period;
    
    /*e \dref_RtpsReliableWriterProtocol_t_fast_heartbeat_period
     */
    struct DDS_Duration_t fast_heartbeat_period;

    /*e \dref_RtpsReliableWriterProtocol_t_late_joiner_heartbeat_period
     */
    struct DDS_Duration_t late_joiner_heartbeat_period;

    /*e \dref_RtpsReliableWriterProtocol_t_virtual_heartbeat_period
     */
    struct DDS_Duration_t virtual_heartbeat_period;

    /*e \dref_RtpsReliableWriterProtocol_t_samples_per_virtual_heartbeat
     */
    DDS_Long samples_per_virtual_heartbeat;

    /*e \dref_RtpsReliableWriterProtocol_t_max_heartbeat_retries
     */
    DDS_Long max_heartbeat_retries;

    /*e \dref_RtpsReliableWriterProtocol_t_inactivate_nonprogressing_readers
     */
    DDS_Boolean inactivate_nonprogressing_readers;

    /*e \dref_RtpsReliableWriterProtocol_t_heartbeats_per_max_samples
     */
    DDS_Long heartbeats_per_max_samples;
    
    /*e \dref_RtpsReliableWriterProtocol_t_min_nack_response_delay
     */
    struct DDS_Duration_t min_nack_response_delay;

    /*e \dref_RtpsReliableWriterProtocol_t_max_nack_response_delay
     */
    struct DDS_Duration_t max_nack_response_delay;

    /*e \dref_RtpsReliableWriterProtocol_t_nack_suppression_duration
     */
    struct DDS_Duration_t nack_suppression_duration;

    /*e \dref_RtpsReliableWriterProtocol_t_max_bytes_per_nack_response
     */
    DDS_Long max_bytes_per_nack_response;

    /*e \dref_RtpsReliableWriterProtocol_t_disable_positive_acks_min_sample_keep_duration
     */
    struct DDS_Duration_t disable_positive_acks_min_sample_keep_duration;

    /*e \dref_RtpsReliableWriterProtocol_t_disable_positive_acks_max_sample_keep_duration
     */
    struct DDS_Duration_t disable_positive_acks_max_sample_keep_duration;

    /*i \dref_RtpsReliableWriterProtocol_t_disable_positive_acks_adaptive_sample_keep_duration_min_separation
     */
    struct DDS_Duration_t disable_positive_acks_sample_min_separation;

    /*e \dref_RtpsReliableWriterProtocol_t_disable_positive_acks_enable_adaptive_sample_keep_duration
     */
    DDS_Boolean disable_positive_acks_enable_adaptive_sample_keep_duration;

    /*i \dref_RtpsReliableWriterProtocol_t_disable_positive_acks_enable_spin_wait
     */
    DDS_Boolean disable_positive_acks_enable_spin_wait;

    /*e \dref_RtpsReliableWriterProtocol_t_disable_positive_acks_decrease_sample_keep_duration_factor
     */
    DDS_Long disable_positive_acks_decrease_sample_keep_duration_factor;

    /*e \dref_RtpsReliableWriterProtocol_t_disable_positive_acks_increase_sample_keep_duration_factor
     */
    DDS_Long disable_positive_acks_increase_sample_keep_duration_factor;

    /*e \dref_RtpsReliableWriterProtocol_t_min_send_window_size
     */
    DDS_Long min_send_window_size;

    /*e \dref_RtpsReliableWriterProtocol_t_max_send_window_size
     */
    DDS_Long max_send_window_size;

    /*e \dref_RtpsReliableWriterProtocol_t_send_window_update_period
     */
    struct DDS_Duration_t send_window_update_period;

    /*e \dref_RtpsReliableWriterProtocol_t_send_window_increase_factor
     */
    DDS_Long send_window_increase_factor;

    /*e \dref_RtpsReliableWriterProtocol_t_send_window_decrease_factor
     */
    DDS_Long send_window_decrease_factor;

    /*e \dref_RtpsReliableWriterProtocol_t_enable_multicast_periodic_heartbeat
     */
    DDS_Boolean enable_multicast_periodic_heartbeat;

    /*e \dref_RtpsReliableWriterProtocol_t_multicast_resend_threshold
     */
    DDS_Long multicast_resend_threshold;
};


#define DDS_RTPS_RELIABLE_WRITER_PROTOCOL_DEFAULT { \
    /*watermarks*/ 0, 1,                 \
    /*hb periods*/ {3, 0}, {3, 0}, {3, 0},  \
    /*virtual hb period*/ {(DDS_Long)0xffffffffL, 0UL}, \
    /*samples / virtual hb*/ -1, \
    /*hb retries*/ 10,                   \
    /* inactivate nonprogressing readers */ DDS_BOOLEAN_FALSE, \
    /*hb/queue*/   8,                    \
    /*delays*/     {0L, 0UL}, {0L, 200000000UL}, \
    /* nackSuppressionDuration */ {0, 0}, \
    /*B/response*/ 131072,                \
    /*min keep duration (1ms)*/ {0L, 1000000UL},   \
    /*max keep duration (1s)*/ {1L, 0UL},   \
    /* min separation (100us) */ {0L, 100000UL},    \
    /* enable adaptive keep duration */ DDS_BOOLEAN_TRUE, \
    /* enable spinning */ DDS_BOOLEAN_FALSE, \
    /* decrease factor */ 95, \
    /* increase factor */ 150,  \
    /* min send window size */ -1, \
    /* max send window size */ -1, \
    /* send window update period (3s, same as HB) */ {3L, 0UL}, \
    /* send window increase factor */ 105, \
    /* send window decrease factor */ 70, \
    /* enable_multicast_periodic_hb */ DDS_BOOLEAN_FALSE, \
    /* multicast_resend_threshold */ 2 \
}


#define DDS_RTPS_RELIABLE_WRITER_PROTOCOL_DISCOVERY_CONFIG_DEFAULT { \
    /*watermarks*/ 0, 1,                 \
    /*hb periods*/ {3, 0}, {3, 0}, {3, 0},  \
    /*virtual hb period*/ {0x7fffffffL, 0x7fffffffUL}, \
    /*samples / virtual hb*/ -1, \
    /*hb retries*/ 10,                   \
    /* inactivate nonprogressing readers */ DDS_BOOLEAN_FALSE, \
    /*hb queue*/   8,                    \
    /*delays*/     {0L, 0UL}, {0L, 0UL}, \
    /*nackSuppressionDuration */ {0, 0}, \
    /*response*/ 131072,               \
    /*min keep duration (1ms)*/ {0L, 1000000UL},   \
    /*max keep duration (1s)*/ {1L, 0UL},   \
    /* min separation (100us) */ {0L, 100000UL},    \
    /* enable adaptive keep duration */ DDS_BOOLEAN_TRUE, \
    /* enable spinning */ DDS_BOOLEAN_FALSE, \
    /* decrease scaler */ 95, \
    /* increase scaler */ 150,  \
    /* min send window size */ -1, \
    /* max send window size */ -1, \
    /* send window update period (3s, same as HB) */ {3L, 0UL}, \
    /* send window increase factor */ 105, \
    /* send window decrease factor */ 50, \
    /* enable_multicast_periodic_hb */ DDS_BOOLEAN_FALSE, \
    /* multicast_resend_threshold */ 2 \
}


#define DDS_RTPS_PARTICIPANT_MESSAGE_WRITER_DISCOVERY_CONFIG_DEFAULT { \
    /*watermarks*/ 0, 1,                 \
    /*hb periods*/ {1, 0}, {1, 0}, {1, 0},  \
    /*virtual hb period*/ {0x7fffffffL, 0x7fffffffUL}, \
    /*samples / virtual hb*/ -1, \
    /*hb retries*/ 10,                   \
    /* inactivate nonprogressing readers */ DDS_BOOLEAN_FALSE, \
    /*hb queue*/   1,                    \
    /*delays*/     {0L, 0UL}, {0L, 0UL}, \
    /*nackSuppressionDuration */ {0, 0}, \
    /*response*/ 9216,               \
    /*min keep duration (1ms)*/ {0L, 1000000UL},   \
    /*max keep duration (1s)*/ {1L, 0UL},   \
    /* min separation (100us) */ {0L, 100000UL},    \
    /* enable adaptive keep duration */ DDS_BOOLEAN_TRUE, \
    /* enable spinning */ DDS_BOOLEAN_FALSE, \
    /* decrease scaler */ 95, \
    /* increase scaler */ 150,  \
    /* min send window size */ -1, \
    /* max send window size (bitmap size)*/ -1, \
    /* send window update period (1s, same as HB) */ {1L, 0UL}, \
    /* send window increase factor */ 105, \
    /* send window decrease factor */ 50, \
    /* enable_multicast_periodic_hb */ DDS_BOOLEAN_FALSE, \
    /* multicast_resend_threshold */ 2 \
}

extern DDSCDllExport
void DDS_RtpsReliableWriterProtocol_save(const char * tag_name,
                                         const struct DDS_RtpsReliableWriterProtocol_t* self,
                                         const struct DDS_RtpsReliableWriterProtocol_t* base,
                                         struct RTIXMLSaveContext* dst);

struct DDS_UserObjectSettings_t {
    /*i \dref_UserObjectSettings_t_size
     */
    DDS_Long size;
    /*i \dref_UserObjectSettings_t_alignment
     */
    DDS_Long alignment;
};


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportUnicastSettings_t);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_TransportUnicastSettings_t {

    /*e \dref_TransportUnicastSettings_t_transports
     */
    struct DDS_StringSeq transports;    

    /*e \dref_TransportUnicastSettings_t_receive_port
     */
    DDS_Long receive_port;
    
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportUnicastSettings_t)
};

extern DDSCDllExport
DDS_Boolean DDS_TransportUnicastSettings_t_equals(
    const struct DDS_TransportUnicastSettings_t* left,
    const struct DDS_TransportUnicastSettings_t* right);


DDS_SEQUENCE(DDS_TransportUnicastSettingsSeq, struct DDS_TransportUnicastSettings_t);
#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportMulticastSettings_t); 


#define DDS_TRANSPORT_MULTICAST_SETTINGS_DEFAULT \
{ DDS_SEQUENCE_INITIALIZER /* transports */, \
  NULL, /* receive_address_string */ \
  0 /* receive_port */ }


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_TransportMulticastSettings_t {
    /*e \dref_TransportMulticastSettings_t_transports
    */
    struct DDS_StringSeq transports;

    /*e \dref_TransportMulticastSettings_t_receive_address
    */
    char* receive_address;
    
    /*e \dref_TransportMulticastSettings_t_receive_port 
    */
    DDS_Long receive_port;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportMulticastSettings_t)
};


DDS_SEQUENCE(DDS_TransportMulticastSettingsSeq, struct DDS_TransportMulticastSettings_t);
#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

extern DDSCDllExport
void DDS_TransportMulticastSettingsSeq_save(const char * tag_name,
                                            const struct DDS_TransportMulticastSettingsSeq *self,
                                            struct RTIXMLSaveContext* dst);


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportMulticastMappingFunction_t); 


#define DDS_TRANSPORT_MULTICAST_MAPPING_FUNCTION_DEFAULT \
{ NULL /* dll */, \
  NULL /* function_name */ }


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportMulticastMapping_t); 


#define DDS_TRANSPORT_MULTICAST_MAPPING_DEFAULT \
{ NULL /* addresses */, \
  NULL /* topic_expression */, \
  DDS_TRANSPORT_MULTICAST_MAPPING_FUNCTION_DEFAULT }


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_TransportMulticastMappingFunction_t {
    /*e \dref_TransportMulticastMappingFunction_t_dll
    */
    char* dll;

    /*e \dref_TransportMulticastMappingFunction_t_function_name
    */
    char* function_name;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportMulticastMappingFunction_t)
};

struct DDS_TransportMulticastMapping_t {
    /*e \dref_TransportMulticastMapping_t_addresses
    */
    char* addresses;

    /*e \dref_TransportMulticastMapping_t_topic_expression
    */
    char* topic_expression;

    /*e \dref_TransportMulticastMapping_t_mapping_function
    */
    struct DDS_TransportMulticastMappingFunction_t mapping_function; 

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportMulticastMapping_t)
};


DDS_SEQUENCE(DDS_TransportMulticastMappingSeq, struct DDS_TransportMulticastMapping_t);
#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

typedef DDS_UnsignedShort DDS_EncapsulationId_t;


DDS_SEQUENCE(DDS_EncapsulationIdSeq, DDS_EncapsulationId_t);

 extern DDSCDllVariable const DDS_EncapsulationId_t DDS_ENCAPSULATION_ID_CDR_BE;

 extern DDSCDllVariable const DDS_EncapsulationId_t DDS_ENCAPSULATION_ID_CDR_LE;

 extern DDSCDllVariable const DDS_EncapsulationId_t DDS_ENCAPSULATION_ID_CDR_NATIVE;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportEncapsulationSettings_t); 


#define DDS_TRANSPORT_ENCAPSULATION_SETTINGS_DEFAULT \
{ DDS_SEQUENCE_INITIALIZER /* transports */, \
  DDS_SEQUENCE_INITIALIZER /* encapsulations */ }


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_TransportEncapsulationSettings_t {
    /*i \dref_TransportEncapsulationSettings_t_transports
    */
    struct DDS_StringSeq transports;

    /*i \dref_TransportEncapsulationSettings_t_encapsulations
    */
    struct DDS_EncapsulationIdSeq encapsulations;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportEncapsulationSettings_t)
};


DDS_SEQUENCE(DDS_TransportEncapsulationSettingsSeq, struct DDS_TransportEncapsulationSettings_t);
#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

 extern DDSCDllVariable const char *const
DDS_TRANSPORTSELECTION_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportSelectionQosPolicy); 

/*e \dref_TransportSelectionQosPolicy 
 */
struct DDS_TransportSelectionQosPolicy {
    /*e \dref_TransportSelectionQosPolicy_enabled_transports 
     */
    struct DDS_StringSeq enabled_transports;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportSelectionQosPolicy)
};


#define DDS_TRANSPORT_SELECTION_QOS_POLICY_DEFAULT \
{ DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport
void DDS_TransportSelectionQosPolicy_save(const struct DDS_TransportSelectionQosPolicy* self,
                                          const struct DDS_TransportSelectionQosPolicy* base,
                                          struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_TRANSPORTUNICAST_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportUnicastQosPolicy);

struct DDS_TransportUnicastQosPolicy {
    /*e \dref_TransportUnicastQosPolicy_value
     */
    struct DDS_TransportUnicastSettingsSeq value;
    
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportUnicastQosPolicy)
};


#define DDS_TRANSPORT_UNICAST_QOS_POLICY_DEFAULT \
{ DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport
DDS_Boolean DDS_TransportUnicastQosPolicy_equals(
    const struct DDS_TransportUnicastQosPolicy* left,
    const struct DDS_TransportUnicastQosPolicy* right);

extern DDSCDllExport
void DDS_TransportUnicastQosPolicy_save(const char * tag_name,
                                        const struct DDS_TransportUnicastQosPolicy* self,
                                        const struct DDS_TransportUnicastQosPolicy* base,
                                        struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_TRANSPORTMULTICAST_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportMulticastQosPolicy);

typedef enum {
    /*e \dref_TransportMulticastQosPolicyKind_AUTOMATIC_TRANSPORT_MULTICAST_QOS
     */
    DDS_AUTOMATIC_TRANSPORT_MULTICAST_QOS,

    /*e \dref_TransportMulticastQosPolicyKind_UNICAST_ONLY_TRANSPORT_MULTICAST_QOS
     */
    DDS_UNICAST_ONLY_TRANSPORT_MULTICAST_QOS
} DDS_TransportMulticastQosPolicyKind;

struct DDS_TransportMulticastQosPolicy {

    
    /*e \dref_TransportMulticastQosPolicy_value
     */
    struct DDS_TransportMulticastSettingsSeq value;

    /*e \dref_TransportMulticastQosPolicy_kind
     */
     DDS_TransportMulticastQosPolicyKind kind;
    
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportMulticastQosPolicy)
};


#define DDS_TRANSPORT_MULTICAST_QOS_POLICY_DEFAULT \
        { DDS_SEQUENCE_INITIALIZER, \
        DDS_AUTOMATIC_TRANSPORT_MULTICAST_QOS }

 extern DDSCDllVariable const char *const
DDS_TRANSPORTMULTICASTMAPPING_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportMulticastMappingQosPolicy);

struct DDS_TransportMulticastMappingQosPolicy {
    /*e \dref_TransportMulticastMappingQosPolicy_value
     */
    struct DDS_TransportMulticastMappingSeq value;
    
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportMulticastMappingQosPolicy)
};


#define DDS_TRANSPORT_MULTICAST_MAPPING_QOS_POLICY_DEFAULT \
        { DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport
void DDS_TransportMulticastQosPolicy_save(const char * tag_name,
                                          const struct DDS_TransportMulticastQosPolicy* self,
                                          const struct DDS_TransportMulticastQosPolicy* base,
                                          struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_TRANSPORTENCAPSULATION_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportEncapsulationQosPolicy);

struct DDS_TransportEncapsulationQosPolicy {
    /*i \dref_TransportEncapsulationQosPolicy_value
     */
    struct DDS_TransportEncapsulationSettingsSeq value;
    
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportEncapsulationQosPolicy)
};


#define DDS_TRANSPORT_ENCAPSULATION_QOS_POLICY_DEFAULT \
        { DDS_SEQUENCE_INITIALIZER }

 extern DDSCDllVariable const char *const
DDS_DISCOVERY_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_DiscoveryQosPolicy); 

struct DDS_DiscoveryQosPolicy {
    /*e \dref_DiscoveryQosPolicy_enabled_transports
     */
    struct DDS_StringSeq enabled_transports;

    /*e \dref_DiscoveryQosPolicy_initial_peers
     */
    struct DDS_StringSeq initial_peers;

    /*e \dref_DiscoveryQosPolicy_multicast_receive_addresses
     */
    struct DDS_StringSeq multicast_receive_addresses;

    /*e \dref_DiscoveryQosPolicy_metatraffic_transport_priority
     */
    DDS_Long metatraffic_transport_priority;

    /*e \dref_DiscoveryQosPolicy_accept_unknown_peers
     */
    DDS_Boolean accept_unknown_peers;

    /*e \dref_DiscoveryQosPolicy_enable_endpoint_discovery
     */
    DDS_Boolean enable_endpoint_discovery;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_DiscoveryQosPolicy)
};


#define DDS_DISCOVERY_QOS_POLICY_DEFAULT { \
DDS_SEQUENCE_INITIALIZER, /* enabled_transports */\
DDS_SEQUENCE_INITIALIZER, /* initial_peers */\
DDS_SEQUENCE_INITIALIZER, /* multicast_receive_addresses */\
0L, /* metatraffic_transport_priority */\
DDS_BOOLEAN_TRUE, /* accept_unknown_peers */\
DDS_BOOLEAN_TRUE /* enable_endpoint_discovery */\
}

extern DDSCDllExport
RTIBool DDS_DiscoveryQosPolicy_equals(
    const struct DDS_DiscoveryQosPolicy* left,
    const struct DDS_DiscoveryQosPolicy* right);

extern DDSCDllExport
void DDS_DiscoveryQosPolicy_save(const struct DDS_DiscoveryQosPolicy* self,
                                 const struct DDS_DiscoveryQosPolicy* base,
                                 struct RTIXMLSaveContext* dst);


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_Discovery_ParticipantInformation);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_Discovery_ParticipantInformation {
    /*i \dref_Discovery_ParticipantInformation_participant_discovery_id
     */
    DDS_Long participant_discovery_id;

    /*i \dref_Discovery_ParticipantInformation_participant_discovery_version
 */
    DDS_Long participant_discovery_version;

    /*i \dref_Discovery_ParticipantInformation_participant_discovery_vendor_id
 */
    DDS_Long participant_discovery_vendor_id;

    /*i \dref_Discovery_ParticipantInformation_participant_discovery_parameters
 */
    struct DDS_OctetSeq participant_discovery_parameters;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_Discovery_ParticipantInformation)
};


DDS_SEQUENCE(DDS_Discovery_ParticipantInformationSeq, struct DDS_Discovery_ParticipantInformation);
#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_Discovery_EndpointInformation);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_Discovery_EndpointInformation {
    /*i \dref_Discovery_EndpointInformation_endpoint_discovery_id
     */
    DDS_Long endpoint_discovery_id;

    /*i \dref_Discovery_EndpointInformation_endpoint_discovery_version
     */    
    DDS_Long endpoint_discovery_version;
        
    /*i \dref_Discovery_EndpointInformation_endpoint_discovery_vendor_id
     */
    DDS_Long endpoint_discovery_vendor_id;
    
    /*i \dref_Discovery_EndpointInformation_endpoint_discovery_parameters
     */
    struct DDS_OctetSeq endpoint_discovery_parameters;
    
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_Discovery_EndpointInformation)
};


DDS_SEQUENCE(DDS_Discovery_EndpointInformationSeq, struct DDS_Discovery_EndpointInformation);
#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

 extern DDSCDllVariable const char *const
DDS_TRANSPORTBUILTIN_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_TransportBuiltinKind_TRANSPORTBUILTIN_UDPv4
     */
    DDS_TRANSPORTBUILTIN_UDPv4 = 0x0001 << 0,
    
    /*e \dref_TransportBuiltinKind_TRANSPORTBUILTIN_SHMEM
     */
    DDS_TRANSPORTBUILTIN_SHMEM = 0x0001 << 1, 
    
    /*i \dref_TransportBuiltinKind_INTRA
     */
    DDS_TRANSPORTBUILTIN_INTRA = 0x0001 << 2,
    
    /*e \dref_TransportBuiltinKind_TRANSPORTBUILTIN_UDPv6
     */
    DDS_TRANSPORTBUILTIN_UDPv6 = 0x0001 << 3
    
} DDS_TransportBuiltinKind;

 extern DDSCDllVariable const char *const
DDS_TRANSPORTBUILTIN_INTRA_ALIAS;

 extern DDSCDllVariable const char *const
DDS_TRANSPORTBUILTIN_SHMEM_ALIAS;

 extern DDSCDllVariable const char *const
DDS_TRANSPORTBUILTIN_UDPv4_ALIAS;

 extern DDSCDllVariable const char *const
DDS_TRANSPORTBUILTIN_UDPv6_ALIAS;

typedef DDS_Long DDS_TransportBuiltinKindMask;


#define DDS_TRANSPORTBUILTIN_MASK_NONE  ((DDS_TransportBuiltinKindMask) 0)


#define DDS_TRANSPORTBUILTIN_MASK_DEFAULT (DDS_TRANSPORTBUILTIN_UDPv4 | DDS_TRANSPORTBUILTIN_SHMEM)


#define DDS_TRANSPORTBUILTIN_MASK_ALL   (~DDS_TRANSPORTBUILTIN_MASK_NONE)

struct DDS_TransportBuiltinQosPolicy {
    /*e \dref_TransportBuiltinQosPolicy_mask   
     */
    DDS_TransportBuiltinKindMask mask;
};


#define DDS_TRANSPORT_BUILTIN_QOS_POLICY_DEFAULT \
        { DDS_TRANSPORTBUILTIN_MASK_DEFAULT }

extern DDSCDllExport
void DDS_TransportBuiltinQosPolicy_save(const struct DDS_TransportBuiltinQosPolicy* self,
                                        const struct DDS_TransportBuiltinQosPolicy* base,
                                        struct RTIXMLSaveContext* dst);

struct DDS_RtpsWellKnownPorts_t {
    /*e \dref_RtpsWellKnownPorts_t_port_base
     */
    DDS_Long port_base;
    /*e \dref_RtpsWellKnownPorts_t_domain_id_gain
     */
    DDS_Long domain_id_gain;

    /*e \dref_RtpsWellKnownPorts_t_participant_id_gain
     */
    DDS_Long participant_id_gain;

    /*e \dref_RtpsWellKnownPorts_t_builtin_multicast_port_offset
     */
    DDS_Long builtin_multicast_port_offset;

    /*e \dref_RtpsWellKnownPorts_t_builtin_unicast_port_offset
     */
    DDS_Long builtin_unicast_port_offset;

    /*e \dref_RtpsWellKnownPorts_t_user_multicast_port_offset
     */
    DDS_Long user_multicast_port_offset;

    /*e \dref_RtpsWellKnownPorts_t_user_unicast_port_offset
     */
    DDS_Long user_unicast_port_offset;
};

 extern DDSCDllVariable 
const struct DDS_RtpsWellKnownPorts_t DDS_RTI_BACKWARDS_COMPATIBLE_RTPS_WELL_KNOWN_PORTS;

 extern DDSCDllVariable 
const struct DDS_RtpsWellKnownPorts_t DDS_INTEROPERABLE_RTPS_WELL_KNOWN_PORTS;


#define DDS_RTPS_WELL_KNOWN_PORTS_DEFAULT { \
    7400, /* port_base */ \
    250, /* domain_id_gain */ \
    2, /* participant_id_gain */ \
    0, /* builtin_multicast_port_offset */ \
    10, /* builtin_unicast_port_offset */ \
    1, /* user_multicast_port_offset */ \
    11 /* user_unicast_port_offset */ \
}

typedef enum {
    /*e \dref_RtpsReservedPortKind_BUILTIN_UNICAST
     */
    DDS_RTPS_RESERVED_PORT_BUILTIN_UNICAST = 0x0001 << 0,

    /*e \dref_RtpsReservedPortKind_BUILTIN_MULTICAST
     */
    DDS_RTPS_RESERVED_PORT_BUILTIN_MULTICAST = 0x0001 << 1,

    /*e \dref_RtpsReservedPortKind_USER_UNICAST
     */
    DDS_RTPS_RESERVED_PORT_USER_UNICAST = 0x0001 << 2,

    /*e \dref_RtpsReservedPortKind_USER_MULTICAST
     */
    DDS_RTPS_RESERVED_PORT_USER_MULTICAST = 0x0001 << 3

} DDS_RtpsReservedPortKind;

typedef DDS_Long DDS_RtpsReservedPortKindMask;


#define DDS_RTPS_RESERVED_PORT_MASK_DEFAULT \
   ((DDS_RtpsReservedPortKindMask) DDS_RTPS_RESERVED_PORT_BUILTIN_UNICAST \
    | DDS_RTPS_RESERVED_PORT_BUILTIN_MULTICAST | DDS_RTPS_RESERVED_PORT_USER_UNICAST)


#define DDS_RTPS_RESERVED_PORT_MASK_NONE   ((DDS_RtpsReservedPortKindMask) 0)


#define DDS_RTPS_RESERVED_PORT_MASK_ALL    (~DDS_RTPS_RESERVED_PORT_MASK_NONE)

 extern DDSCDllVariable const char *const 
DDS_WIREPROTOCOL_QOS_POLICY_NAME;


/*e \dref_WireProtocolQosPolicyAutoKind
*/
typedef enum {
    /*e \dref_WireProtocolQosPolicyAutoKind_RTPS_AUTO_ID_FROM_IP
     */
    DDS_RTPS_AUTO_ID_FROM_IP,
    
    /*e \dref_WireProtocolQosPolicyAutoKind_RTPS_AUTO_ID_FROM_MAC
     */
    DDS_RTPS_AUTO_ID_FROM_MAC,
    
    /*e \dref_WireProtocolQosPolicyAutoKind_RTPS_AUTO_ID_FROM_UUID
     */
    DDS_RTPS_AUTO_ID_FROM_UUID
    
} DDS_WireProtocolQosPolicyAutoKind;


struct DDS_WireProtocolQosPolicy {
    /*e \dref_WireProtocolQosPolicy_participant_id
     */
    DDS_Long participant_id;

    /*e \dref_WireProtocolQosPolicy_rtps_host_id
     */
    DDS_UnsignedLong rtps_host_id;

    /*e \dref_WireProtocolQosPolicy_rtps_app_id
     */
    DDS_UnsignedLong rtps_app_id;

    /*e \dref_WireProtocolQosPolicy_rtps_instance_id
    */
    DDS_UnsignedLong rtps_instance_id;

    /*e \dref_WireProtocolQosPolicy_rtps_well_known_ports
     */
    struct DDS_RtpsWellKnownPorts_t rtps_well_known_ports;

    /*e \dref_WireProtocolQosPolicy_rtps_reserved_port_mask
     */
    DDS_RtpsReservedPortKindMask rtps_reserved_port_mask;

    /*e \dref_WireProtocolQosPolicy_rtps_auto_id_kind
     */
    DDS_WireProtocolQosPolicyAutoKind rtps_auto_id_kind;

    /*e \dref_WireProtocolQosPolicy_compute_crc
     */
    DDS_Boolean compute_crc;

    /*e \dref_WireProtocolQosPolicy_check_crc
     */
    DDS_Boolean check_crc;

};


 enum {
    /*e \dref_WireProtocolQosPolicy_RTPS_AUTO_ID
    */
    DDS_RTPS_AUTO_ID = 0
};


#define DDS_WIRE_PROTOCOL_QOS_POLICY_DEFAULT {      \
-1 /* auto participant_id */,                       \
DDS_RTPS_AUTO_ID /* rtps_host_id */,                \
DDS_RTPS_AUTO_ID /* rtps_app_id */,                 \
DDS_RTPS_AUTO_ID /* rtps_instance_id */,            \
DDS_RTPS_WELL_KNOWN_PORTS_DEFAULT /* rtps_well_known_ports */,\
DDS_RTPS_RESERVED_PORT_MASK_DEFAULT /* rtps_reserved_port_mask */, \
DDS_RTPS_AUTO_ID_FROM_IP, /* rtps_auto_id_kind */ \
DDS_BOOLEAN_FALSE, /* compute_crc */                \
DDS_BOOLEAN_FALSE /* check_crc */                   \
}

extern DDSCDllExport
void DDS_WireProtocolQosPolicy_save(const struct DDS_WireProtocolQosPolicy* self,
                                    const struct DDS_WireProtocolQosPolicy* base,
                                    struct RTIXMLSaveContext* dst);


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_Locator_t);


#define DDS_LOCATOR_ADDRESS_LENGTH_MAX 16


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

typedef struct DDS_Locator_t {
    /*e \dref_Locator_t_kind
     */
    DDS_Long kind;
    /*e \dref_Locator_t_port
     */
    DDS_UnsignedLong port;
    /*e \dref_Locator_t_address
     */
    DDS_Octet address[DDS_LOCATOR_ADDRESS_LENGTH_MAX];  
    /*i \dref_Locator_t_encapsulations
     */
    struct DDS_EncapsulationIdSeq encapsulations;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_Locator_t)
} DDS_Locator_t;


DDS_SEQUENCE(DDS_LocatorSeq, struct DDS_Locator_t);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

 extern DDSCDllVariable const struct DDS_Locator_t DDS_LOCATOR_INVALID;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_INVALID;

 extern DDSCDllVariable const DDS_UnsignedLong DDS_LOCATOR_PORT_INVALID;

 extern DDSCDllVariable const DDS_Octet DDS_LOCATOR_ADDRESS_INVALID[DDS_LOCATOR_ADDRESS_LENGTH_MAX];

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_ANY;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_UDPv4;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_SHMEM;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_SHMEM_510;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_INTRA;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_UDPv6;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_UDPv6_510;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_DTLS;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_WAN;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_TCPV4_LAN;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_TCPV4_WAN;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_TLSV4_LAN;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_TLSV4_WAN;

 extern DDSCDllVariable const DDS_Long DDS_LOCATOR_KIND_RESERVED;

typedef struct DDS_ProtocolVersion_t {
    /*e \dref_ProtocolVersion_t_major
     */
    DDS_Octet major;

    /*e \dref_ProtocolVersion_t_minor
     */
    DDS_Octet minor;
} DDS_ProtocolVersion_t;


#define DDS_PROTOCOL_VERSION_DEFAULT { 0, 0 }


  /*e \dref_ProtocolVersion_t_PROTOCOLVERSION_1_0
   */
  #define DDS_PROTOCOLVERSION_1_0 { 1, 0 }
  /*e \dref_ProtocolVersion_t_PROTOCOLVERSION_1_1
   */
  #define DDS_PROTOCOLVERSION_1_1 { 1, 1 }
  /*e \dref_ProtocolVersion_t_PROTOCOLVERSION_1_2
   */
  #define DDS_PROTOCOLVERSION_1_2 { 1, 2 }
  /*e \dref_ProtocolVersion_t_PROTOCOLVERSION_2_0
   */
  #define DDS_PROTOCOLVERSION_2_0 { 2, 0 }
  /*e \dref_ProtocolVersion_t_PROTOCOLVERSION_2_1
   */
  #define DDS_PROTOCOLVERSION_2_1 { 2, 1 }
  /*e \dref_ProtocolVersion_t_PROTOCOLVERSION
   */
  #define DDS_PROTOCOLVERSION { 2, 1 }


#define DDS_VENDOR_ID_LENGTH_MAX 2

struct DDS_VendorId_t {
    /*e \dref_VendorId_t_vendorId
     */
    DDS_Octet vendorId[DDS_VENDOR_ID_LENGTH_MAX];
};


  #define DDS_VENDOR_ID_DEFAULT { {0, 0} }


  /*i \dref_VendorId_t_VENDORID_UNKNOWN
   */
  #define DDS_VENDORID_UNKNOWN { {0, 0} }  

struct DDS_ProductVersion_t {
    /*e \dref_ProductVersion_t_major
     */
    DDS_Char major;
    /*e \dref_ProductVersion_t_minor
     */
    DDS_Char minor;
    /*e \dref_ProductVersion_t_release
     */
    DDS_Char release;
    /*e \dref_ProductVersion_t_revision
     */
    DDS_Char revision;
};


  /*e \dref_ProductVersion_t_UNKNOWN
   */
  #define DDS_PRODUCTVERSION_UNKNOWN { 0, 0, 0, 0 }  


#define DDS_PRODUCTVERSION_MAX_STRING_SIZE 16

extern DDSCDllExport DDS_Boolean
DDS_ProductVersion_to_string(
    struct DDS_ProductVersion_t * version, 
    char * dst);

 extern DDSCDllVariable const char *const
DDS_DATAREADERRESOURCELIMITS_QOS_POLICY_NAME;

 extern DDSCDllVariable const DDS_Long DDS_AUTO_MAX_TOTAL_INSTANCES;

struct DDS_DataReaderResourceLimitsQosPolicy {
    /*e \dref_DataReaderResourceLimitsQosPolicy_max_remote_writers
     */
    DDS_Long    max_remote_writers;
    
    /*e \dref_DataReaderResourceLimitsQosPolicy_max_remote_writers_per_instance
     */
    DDS_Long    max_remote_writers_per_instance;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_samples_per_remote_writer
     */
    DDS_Long    max_samples_per_remote_writer;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_infos
     */
    DDS_Long    max_infos;

    /*e \dref_DataReaderResourceLimitsQosPolicy_initial_remote_writers
     */
    DDS_Long    initial_remote_writers;

    /*e \dref_DataReaderResourceLimitsQosPolicy_initial_remote_writers_per_instance
     */
    DDS_Long    initial_remote_writers_per_instance;

    /*e \dref_DataReaderResourceLimitsQosPolicy_initial_infos
     */
    DDS_Long    initial_infos;

    /*e \dref_DataReaderResourceLimitsQosPolicy_initial_outstanding_reads
     */
    DDS_Long    initial_outstanding_reads;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_outstanding_reads
     */
    DDS_Long    max_outstanding_reads;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_samples_per_read
     */
    DDS_Long max_samples_per_read;

    /*e \dref_DataReaderResourceLimitsQosPolicy_disable_fragmentation_support
     */
    DDS_Boolean disable_fragmentation_support;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_fragmented_samples
     */
    DDS_Long max_fragmented_samples;

    /*e \dref_DataReaderResourceLimitsQosPolicy_initial_fragmented_samples
     */
    DDS_Long initial_fragmented_samples;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_fragmented_samples_per_remote_writer
     */
    DDS_Long max_fragmented_samples_per_remote_writer;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_fragments_per_sample
     */
    DDS_Long max_fragments_per_sample;

    /*e \dref_DataReaderResourceLimitsQosPolicy_dynamically_allocate_fragmented_samples
     */
    DDS_Boolean dynamically_allocate_fragmented_samples;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_total_instances 
    */
    DDS_Long max_total_instances;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_remote_virtual_writers
     */
    DDS_Long max_remote_virtual_writers;

    /*e \dref_DataReaderResourceLimitsQosPolicy_initial_remote_virtual_writers
     */
    DDS_Long initial_remote_virtual_writers;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_remote_virtual_writers_per_instance
     */
    DDS_Long max_remote_virtual_writers_per_instance;

    /*e \dref_DataReaderResourceLimitsQosPolicy_initial_remote_virtual_writers_per_instance
     */
    DDS_Long initial_remote_virtual_writers_per_instance;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_remote_writers_per_sample
     */
    DDS_Long max_remote_writers_per_sample;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_query_condition_filters
     */
    DDS_Long max_query_condition_filters;

    /*e \dref_DataReaderResourceLimitsQosPolicy_max_app_ack_response_length
     */
    DDS_Long max_app_ack_response_length;

    /*e \dref_DataReaderResourceLimitsQosPolicy_keep_minimum_state_for_instances
     */
    DDS_Boolean keep_minimum_state_for_instances;

    /*e \dref_DataReaderResourceLimitsQosPolicy_initial_topic_queries
     */
    DDS_Long initial_topic_queries;
    /*e \dref_DataReaderResourceLimitsQosPolicy_max_topic_queries
     */
    DDS_Long max_topic_queries;
};


#define DDS_DATA_READER_RESOURCE_LIMITS_QOS_POLICY_DEFAULT { \
    -1L,/* max_remote_writers: was 1024 before introduction of unlimited */ \
    -1L,/* max_remote_writers_per_instance: was 1024 before introduction of unlimited */ \
    -1L,/* max_samples_per_remote_writer: was 256 before introduction of unlimited */ \
    -1L,/* max_infos: was 100000 before introduction of unlimited */ \
    2L,/* initial_remote_writers */ \
    2L,/* initial_remote_writers_per_instance */ \
    32L,/* initial_infos */ \
    2L,/* initial_outstanding_reads */ \
    -1L,/* max_outstanding_reads: was 1024 before introduction of unlimited */ \
    1024L,/* max_samples_per_read: must never be unlimited */ \
    DDS_BOOLEAN_FALSE,/*disable_fragmentation_support: */ \
    1024L,/* max_fragmented_samples: */ \
    4L,/* initial_fragmented_samples: */ \
    256L,/* max_fragmented_samples_per_remote_writer: */ \
    -1L,/* max_fragments_per_sample: */ \
    DDS_BOOLEAN_TRUE,/* dynamically_allocate_fragmented_samples */ \
    PRES_AUTO_MAX_TOTAL_INSTANCES, /* max_total_instances */ \
    -1L, /* max_remote_virtual_writers */ \
    2L, /* initial_remote_virtual_writers */ \
    -1L, /* max_remote_virtual_writers_per_instance */ \
    2L,/* initial_remote_virtual_writers_per_instance */ \
    3L, /* max_remote_writers_per_sample */ \
    4L,/* max_query_condition_filters */ \
    0L, /* max_app_ack_response_length */ \
    DDS_BOOLEAN_TRUE, /* keep_minimum_state_for_instances */ \
    1L, /* initial_topic_queries */ \
    -1L /* max_topic_queries */ \
}

extern DDSCDllExport
void DDS_DataReaderResourceLimitsQosPolicy_save(const struct DDS_DataReaderResourceLimitsQosPolicy* self,
                                                const struct DDS_DataReaderResourceLimitsQosPolicy* base,
                                                struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_DATAWRITERRESOURCELIMITS_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_DataWriterResourceLimitsInstanceReplacementKind_UNREGISTERED_INSTANCE_REPLACEMENT
    */
    DDS_UNREGISTERED_INSTANCE_REPLACEMENT, 
    
    /*e \dref_DataWriterResourceLimitsInstanceReplacementKind_ALIVE_INSTANCE_REPLACEMENT
    */
    DDS_ALIVE_INSTANCE_REPLACEMENT,

    /*e \dref_DataWriterResourceLimitsInstanceReplacementKind_DISPOSED_INSTANCE_REPLACEMENT
    */
    DDS_DISPOSED_INSTANCE_REPLACEMENT,

    /*e \dref_DataWriterResourceLimitsInstanceReplacementKind_ALIVE_THEN_DISPOSED_INSTANCE_REPLACEMENT
    */
    DDS_ALIVE_THEN_DISPOSED_INSTANCE_REPLACEMENT,

    /*e \dref_DataWriterResourceLimitsInstanceReplacementKind_DISPOSED_THEN_ALIVE_INSTANCE_REPLACEMENT
    */
    DDS_DISPOSED_THEN_ALIVE_INSTANCE_REPLACEMENT,

    /*e \dref_DataWriterResourceLimitsInstanceReplacementKind_ALIVE_OR_DISPOSED_INSTANCE_REPLACEMENT
    */
    DDS_ALIVE_OR_DISPOSED_INSTANCE_REPLACEMENT

} DDS_DataWriterResourceLimitsInstanceReplacementKind;

struct DDS_DataWriterResourceLimitsQosPolicy {
    /*e \dref_DataWriterResourceLimitsQosPolicy_initial_concurrent_blocking_threads
     */
    DDS_Long initial_concurrent_blocking_threads;
    
    /*e \dref_DataWriterResourceLimitsQosPolicy_max_concurrent_blocking_threads
     */
    DDS_Long max_concurrent_blocking_threads;

    /*e \dref_DataWriterResourceLimitsQosPolicy_max_remote_reader_filters
     */
    DDS_Long    max_remote_reader_filters;

    /*e \dref_DataWriterResourceLimitsQosPolicy_initial_batches 
    */
    DDS_Long initial_batches;

    /*e \dref_DataWriterResourceLimitsQosPolicy_max_batches 
    */
    DDS_Long max_batches;

    /*i \dref_DataWriterResourceLimitsQosPolicy_cookie_max_length
    */
    DDS_Long cookie_max_length;

    /*e \dref_DataWriterResourceLimitsQosPolicy_instance_replacement
    */
    DDS_DataWriterResourceLimitsInstanceReplacementKind instance_replacement;

    /*e \dref_DataWriterResourceLimitsQosPolicy_replace_empty_instances
    */
    DDS_Boolean  replace_empty_instances;

    /*e \dref_DataWriterResourceLimitsQosPolicy_autoregister_instances
    */
    DDS_Boolean autoregister_instances;

    /*e \dref_DataWriterResourceLimitsQosPolicy_initial_virtual_writers
    */
    DDS_Long initial_virtual_writers;

    /*e \dref_DataWriterResourceLimitsQosPolicy_max_virtual_writers
    */
    DDS_Long max_virtual_writers; 

    /*e \dref_DataWriterResourceLimitsQosPolicy_max_remote_readers
    */
    DDS_Long max_remote_readers; 

    /*e \dref_DataWriterResourceLimitsQosPolicy_max_app_ack_remote_readers
    */
    DDS_Long max_app_ack_remote_readers; 

    /*e \dref_DataWriterResourceLimitsQosPolicy_initial_active_topic_queries
     */
    DDS_Long initial_active_topic_queries;
    /*e \dref_DataWriterResourceLimitsQosPolicy_max_active_topic_queries
     */
    DDS_Long max_active_topic_queries;
};


#define DDS_DATA_WRITER_RESOURCE_LIMITS_QOS_POLICY_DEFAULT \
{ \
    1L, /* initial_concurrent_blocking_threads */ \
    -1L, /* max_concurrent_blocking_threads (unlimited: was 8 before) */ \
    -1L, /* max_remote_reader_filters */ \
    8L, /* initial_batches */ \
    -1L, /* max_batches */ \
    -1L, /* cookie_max_length */ \
    DDS_UNREGISTERED_INSTANCE_REPLACEMENT, /* instance_replacement */ \
    DDS_BOOLEAN_FALSE, /* empty_instance_replacement */ \
    DDS_BOOLEAN_FALSE, /* autoregister_instances */ \
    1, /* initial_virtual_writers */ \
    -1L, /* max_virtual_writers */ \
    -1L, /* max_remote_readers */ \
    -1L, /* max_app_ack_remote_readers */ \
    1L, /* initial_active_topic_queries */ \
    -1L /* max_active_topic_queries */ \
}

extern DDSCDllExport
void DDS_DataWriterResourceLimitsQosPolicy_save(const struct DDS_DataWriterResourceLimitsQosPolicy* self,
                                                const struct DDS_DataWriterResourceLimitsQosPolicy* base,
                                                struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_SERVICE_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_ServiceQosPolicyKind_NO_SERVICE_QOS
     */
    DDS_NO_SERVICE_QOS,
    
    /*e \dref_ServiceQosPolicyKind_PERSISTENCE_SERVICE_QOS
     */
    DDS_PERSISTENCE_SERVICE_QOS,
    
    /*e \dref_ServiceQosPolicyKind_QUEUING_SERVICE_QOS
    */
    DDS_QUEUING_SERVICE_QOS,
    
    /*e \dref_ServiceQosPolicyKind_ROUTING_SERVICE_QOS
    */
    DDS_ROUTING_SERVICE_QOS,
    
    /*e \dref_ServiceQosPolicyKind_RECORDING_SERVICE_QOS
    */
    DDS_RECORDING_SERVICE_QOS,
    
    /*e \dref_ServiceQosPolicyKind_REPLAY_SERVICE_QOS
    */
    DDS_REPLAY_SERVICE_QOS,

    /*e \dref_ServiceQosPolicyKind_DATABASE_INTEGRATION_SERVICE_QOS
    */
    DDS_DATABASE_INTEGRATION_SERVICE_QOS,

    /*e \dref_ServiceQosPolicyKind_WEB_INTEGRATION_SERVICE_QOS
    */
    DDS_WEB_INTEGRATION_SERVICE_QOS
} DDS_ServiceQosPolicyKind;

struct DDS_ServiceQosPolicy {
    /*e \dref_ServiceQosPolicy_kind
     */
    DDS_ServiceQosPolicyKind kind;
};


#define DDS_SERVICE_QOS_POLICY_DEFAULT \
{ DDS_NO_SERVICE_QOS }

 extern DDSCDllVariable const char *const
DDS_PUBLISHERPROTOCOL_QOS_POLICY_NAME;

struct DDS_PublisherProtocolQosPolicy {
    /*i \dref_PublisherProtocolQosPolicy_vendor_specific_entity
    */
    DDS_Boolean vendor_specific_entity;
};


#define DDS_PUBLISHER_PROTOCOL_QOS_POLICY_DEFAULT 	\
{ 							\
  DDS_BOOLEAN_FALSE /* vendor_specific_entity */ 	\
}

 extern DDSCDllVariable const char *const
DDS_SUBSCRIBERPROTOCOL_QOS_POLICY_NAME;

struct DDS_SubscriberProtocolQosPolicy {
    /*i \dref_SubscriberProtocolQosPolicy_vendor_specific_entity
    */
    DDS_Boolean vendor_specific_entity;
};


#define DDS_SUBSCRIBER_PROTOCOL_QOS_POLICY_DEFAULT 	\
{ 							\
  DDS_BOOLEAN_FALSE /* vendor_specific_entity */ 	\
}

 extern DDSCDllVariable const char *const
DDS_DATAREADERPROTOCOL_QOS_POLICY_NAME;

struct DDS_DataReaderProtocolQosPolicy {
    /*e \dref_DataReaderProtocolQosPolicy_virtual_guid 
    */
    struct DDS_GUID_t virtual_guid;
    /*e \dref_DataReaderProtocolQosPolicy_rtps_object_id
    */
    DDS_UnsignedLong rtps_object_id;
    /*e \dref_DataReaderProtocolQosPolicy_expects_inline_qos
     */
    DDS_Boolean expects_inline_qos;
    /*e \dref_DataReaderProtocolQosPolicy_disable_positive_acks
     */
    DDS_Boolean disable_positive_acks;
    /*e \dref_DataReaderProtocolQosPolicy_propagate_dispose_of_unregistered_instances 
    */
    DDS_Boolean propagate_dispose_of_unregistered_instances;
    /*e \dref_DataReaderProtocolQosPolicy_propagate_unregister_of_disposed_instances 
    */
    DDS_Boolean propagate_unregister_of_disposed_instances;
    /*e \dref_DataReaderProtocolQosPolicy_rtps_reliable_reader
     */
    struct DDS_RtpsReliableReaderProtocol_t rtps_reliable_reader;
    /*i \dref_DataReaderProtocolQosPolicy_vendor_specific_entity
    */
    DDS_Boolean vendor_specific_entity;
    /*i \dref_DataReaderProtocolQosPolicy_meta_entity
    */
    DDS_Boolean meta_entity;
};


#define DDS_DATA_READER_PROTOCOL_QOS_POLICY_DEFAULT \
{ \
  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}, \
  DDS_RTPS_AUTO_ID, \
  DDS_BOOLEAN_FALSE,  /* expects_inline_qos */ \
  DDS_BOOLEAN_FALSE,  /* disable_positive_acks */ \
  DDS_BOOLEAN_FALSE,  /* propagate_dispose_of_unregistered_instances */ \
  DDS_BOOLEAN_FALSE,  /* propagate_unregister_of_disposed_instances */ \
  DDS_RTPS_RELIABLE_READER_PROTOCOL_DEFAULT, \
  DDS_BOOLEAN_FALSE, /* vendor_specific_entity */ \
  DDS_BOOLEAN_FALSE /* meta_entity */ \
}

extern DDSCDllExport
void DDS_DataReaderProtocolQosPolicy_save(const struct DDS_DataReaderProtocolQosPolicy* self,
                                          const struct DDS_DataReaderProtocolQosPolicy* base,
                                          struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_DATAWRITERPROTOCOL_QOS_POLICY_NAME;

struct DDS_DataWriterProtocolQosPolicy {
    /*e \dref_DataWriterProtocolQosPolicy_virtual_guid 
    */
    struct DDS_GUID_t virtual_guid;
    /*e \dref_DataWriterProtocolQosPolicy_rtps_object_id
    */
    DDS_UnsignedLong rtps_object_id;
    /*e \dref_DataWriterProtocolQosPolicy_push_on_write
     */
    DDS_Boolean push_on_write;
    /*e \dref_DataWriterProtocolQosPolicy_disable_positive_acks
     */
    DDS_Boolean disable_positive_acks;
    /*e \dref_DataWriterProtocolQosPolicy_disable_inline_keyhash
    */
    DDS_Boolean disable_inline_keyhash;
    /*e \dref_DataWriterProtocolQosPolicy_serialize_key_with_dispose
    */
    DDS_Boolean serialize_key_with_dispose;
    /*e \dref_DataWriterProtocolQosPolicy_propagate_app_ack_with_no_response 
    */
    DDS_Boolean propagate_app_ack_with_no_response;
    /*e \dref_DataWriterProtocolQosPolicy_rtps_reliable_writer
     */
    struct DDS_RtpsReliableWriterProtocol_t    rtps_reliable_writer;
    /*i \dref_DataWriterProtocolQosPolicy_initial_virtual_sequence_number
     */
    struct DDS_SequenceNumber_t initial_virtual_sequence_number;
    /*i \dref_DataWriterProtocolQosPolicy_vendor_specific_entity
    */
    DDS_Boolean vendor_specific_entity;
    /*i \dref_DataWriterProtocolQosPolicy_meta_entity
    */
    DDS_Boolean meta_entity;
};


#define DDS_DATA_WRITER_PROTOCOL_QOS_POLICY_DEFAULT \
{ {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}, /* virtual GUID */ \
  DDS_RTPS_AUTO_ID, /* object ID */\
  DDS_BOOLEAN_TRUE, /* push on write */\
  DDS_BOOLEAN_FALSE, /* disable positive acks */ \
  DDS_BOOLEAN_FALSE, /* disable inline keyhash */ \
  DDS_BOOLEAN_FALSE, /* serialize key with dispose */ \
  DDS_BOOLEAN_TRUE, /* propagate_app_ack_with_no_response */ \
  DDS_RTPS_RELIABLE_WRITER_PROTOCOL_DEFAULT, /* rtps reliable writer*/ \
  {(DDS_Long)0xffffffff, (DDS_UnsignedLong)0xffffffff}, /* initial_virtual_sequence_number TODO: support AUTO */ \
  DDS_BOOLEAN_FALSE, /* vendor_specific_entity */ \
  DDS_BOOLEAN_FALSE /* meta_entity */ \
}

extern DDSCDllExport
void DDS_DataWriterProtocolQosPolicy_save(const struct DDS_DataWriterProtocolQosPolicy* self,
                                          const struct DDS_DataWriterProtocolQosPolicy* base,
                                          struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_SYSTEMRESOURCELIMITS_QOS_POLICY_NAME;

struct DDS_SystemResourceLimitsQosPolicy {
    /*e \dref_SystemResourceLimitsQosPolicy_max_objects_per_thread
     */
    DDS_Long  max_objects_per_thread;
};


#define DDS_SYSTEM_RESOURCE_LIMITS_QOS_POLICY_DEFAULT { 1024 }

 extern DDSCDllVariable const char *const
DDS_DOMAINPARTICIPANTRESOURCELIMITS_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_DomainParticipantResourceLimitsIgnoredEntityReplacementKind_NO_REPLACEMENT_IGNORED_ENTITY_REPLACEMENT
     */
    DDS_NO_REPLACEMENT_IGNORED_ENTITY_REPLACEMENT,

    /*e \dref_DomainParticipantResourceLimitsIgnoredEntityReplacementKind_NOT_ALIVE_FIRST_IGNORED_ENTITY_REPLACEMENT
     */
    DDS_NOT_ALIVE_FIRST_IGNORED_ENTITY_REPLACEMENT
} DDS_DomainParticipantResourceLimitsIgnoredEntityReplacementKind;

struct DDS_DomainParticipantResourceLimitsQosPolicy {
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_local_writer_allocation
     */
    struct DDS_AllocationSettings_t local_writer_allocation;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_local_reader_allocation
     */
    struct DDS_AllocationSettings_t local_reader_allocation;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_local_publisher_allocation
     */
    struct DDS_AllocationSettings_t local_publisher_allocation;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_local_subscriber_allocation
     */
    struct DDS_AllocationSettings_t local_subscriber_allocation;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_local_topic_allocation
     */
    struct DDS_AllocationSettings_t local_topic_allocation;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_remote_writer_allocation
     */
    struct DDS_AllocationSettings_t remote_writer_allocation;
    
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_remote_reader_allocation
     */
    struct DDS_AllocationSettings_t remote_reader_allocation;
    
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_remote_participant_allocation
     */
    struct DDS_AllocationSettings_t remote_participant_allocation;
    
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_matching_writer_reader_pair_allocation
     */
    struct DDS_AllocationSettings_t matching_writer_reader_pair_allocation;
    
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_matching_reader_writer_pair_allocation
     */
    struct DDS_AllocationSettings_t matching_reader_writer_pair_allocation;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_ignored_entity_allocation
     */
    struct DDS_AllocationSettings_t ignored_entity_allocation;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_content_filtered_topic_allocation
     */
    struct DDS_AllocationSettings_t content_filtered_topic_allocation;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_content_filter_allocation
     */
    struct DDS_AllocationSettings_t content_filter_allocation;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_read_condition_allocation
     */
    struct DDS_AllocationSettings_t read_condition_allocation;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_query_condition_allocation
     */
    struct DDS_AllocationSettings_t query_condition_allocation;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_outstanding_asynchronous_sample_allocation
     */
    struct DDS_AllocationSettings_t outstanding_asynchronous_sample_allocation;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_flow_controller_allocation
     */
    struct DDS_AllocationSettings_t flow_controller_allocation;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_local_writer_hash_buckets
     */
    DDS_Long local_writer_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_local_reader_hash_buckets
     */
    DDS_Long local_reader_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_local_publisher_hash_buckets
     */
    DDS_Long local_publisher_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_local_subscriber_hash_buckets
     */
    DDS_Long local_subscriber_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_local_topic_hash_buckets
     */
    DDS_Long local_topic_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_remote_writer_hash_buckets
     */
    DDS_Long remote_writer_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_remote_reader_hash_buckets
     */
    DDS_Long remote_reader_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_remote_participant_hash_buckets
     */
    DDS_Long remote_participant_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_matching_writer_reader_pair_hash_buckets
     */
    DDS_Long matching_writer_reader_pair_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_matching_reader_writer_pair_hash_buckets
     */
    DDS_Long matching_reader_writer_pair_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_ignored_entity_hash_buckets
     */
    DDS_Long ignored_entity_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_content_filtered_topic_hash_buckets
     */
    DDS_Long content_filtered_topic_hash_buckets;
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_content_filter_hash_buckets
     */
    DDS_Long content_filter_hash_buckets;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_flow_controller_hash_buckets
     */
    DDS_Long flow_controller_hash_buckets;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_max_gather_destinations
     */
    DDS_Long max_gather_destinations;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_participant_user_data_max_length
     */
    DDS_Long participant_user_data_max_length;

    /*i \dref_DomainParticipantResourceLimitsQosPolicy_inter_participant_data_max_length
     */
    DDS_Long inter_participant_data_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_topic_data_max_length
     */
    DDS_Long topic_data_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_publisher_group_data_max_length
     */
    DDS_Long publisher_group_data_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_subscriber_group_data_max_length
     */
    DDS_Long subscriber_group_data_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_writer_user_data_max_length
     */
    DDS_Long writer_user_data_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_reader_user_data_max_length
     */
    DDS_Long reader_user_data_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_max_partitions
     */
    DDS_Long max_partitions;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_max_partition_cumulative_characters
     */
    DDS_Long max_partition_cumulative_characters;

    /*i \dref_DomainParticipantResourceLimitsQosPolicy_default_partition_matches_all
     */
    DDS_Boolean default_partition_matches_all;

    /*i \dref_DomainParticipantResourceLimitsQosPolicy_allow_no_partitions
     */
    DDS_Boolean allow_no_partitions;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_type_code_max_serialized_length
     */
    DDS_Long type_code_max_serialized_length;
    
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_type_object_max_serialized_length
     */
    DDS_Long type_object_max_serialized_length;

    /*i \dref_DomainParticipantResourceLimitsQosPolicy_serialized_type_object_dynamic_allocation_threshold
     */
    DDS_Long serialized_type_object_dynamic_allocation_threshold;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_type_object_max_deserialized_length
     */
    DDS_Long type_object_max_deserialized_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_deserialized_type_object_dynamic_allocation_threshold
     */
    DDS_Long deserialized_type_object_dynamic_allocation_threshold;
    
    /*e \dref_DomainParticipantResourceLimitsQosPolicy_contentfilter_property_max_length
     */
    DDS_Long contentfilter_property_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_channel_seq_max_length
     */
    DDS_Long channel_seq_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_channel_filter_expression_max_length
     */
    DDS_Long channel_filter_expression_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_participant_property_list_max_length
     */
    DDS_Long participant_property_list_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_participant_property_string_max_length
     */
    DDS_Long participant_property_string_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_writer_property_list_max_length
     */
    DDS_Long writer_property_list_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_writer_property_string_max_length
     */
    DDS_Long writer_property_string_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_reader_property_list_max_length
     */
    DDS_Long reader_property_list_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_reader_property_string_max_length
     */
    DDS_Long reader_property_string_max_length;

    /*i \dref_DomainParticipantResourceLimitsQosPolicy_plugin_info_parameter_max_length
     */
    DDS_Long plugin_info_parameter_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_max_endpoint_groups
     */
    DDS_Long max_endpoint_groups;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_max_endpoint_group_cumulative_characters
     */
    DDS_Long max_endpoint_group_cumulative_characters;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_transport_info_list_max_length
     */
    DDS_Long transport_info_list_max_length;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_ignored_entity_replacement_kind
     */
    DDS_DomainParticipantResourceLimitsIgnoredEntityReplacementKind ignored_entity_replacement_kind;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_remote_topic_query_allocation
     */
    struct DDS_AllocationSettings_t remote_topic_query_allocation;

    /*e \dref_DomainParticipantResourceLimitsQosPolicy_remote_topic_query_hash_buckets
     */
    DDS_Long remote_topic_query_hash_buckets;
};


#define DDS_DomainParticipantResourceLimitsQosPolicy_MATCH_INIT (32L)


#define DDS_DOMAIN_PARTICIPANT_RESOURCE_LIMITS_QOS_POLICY_DEFAULT \
{{16L, -1L, -1L}, /*local_writer_allocation*/      \
 {16L, -1L, -1L}, /*local_reader_allocation*/      \
 { 4L, -1L, -1L}, /*local_publisher_allocation*/     \
 { 4L, -1L, -1L}, /*local_subscriber_allocation*/    \
 {16L, -1L, -1L}, /*local_topic_allocation*/       \
 {64L, -1L, -1L}, /*remote_writer_allocation*/     \
 {64L, -1L, -1L}, /*remote_reader_allocation*/     \
 {16L, -1L, -1L}, /*remote_participant_allocation*/\
 {DDS_DomainParticipantResourceLimitsQosPolicy_MATCH_INIT, -1L, -1L}, /*matching_writer_reader_pair_allocation*/   \
 {DDS_DomainParticipantResourceLimitsQosPolicy_MATCH_INIT, -1L, -1L}, /*matching_reader_writer_pair_allocation*/   \
 {8L, -1L, -1L}, /*ignored_entity_allocation*/\
 {4L, -1L, -1L}, /*content_filtered_topic_allocation*/\
 {4L, -1L, -1L}, /*content_filter_allocation*/\
 {4L, -1L, -1L}, /*read_condition_allocation*/\
 {4L, -1L, -1L}, /*query_condition_allocation*/\
 {64L, -1L, -1L}, /*outstanding_asynchronous_sample_allocation*/\
 {4L, -1L, -1L}, /*flow_controller_allocation*/\
 4, /* local_writer_hash_buckets */ \
 4, /* local_reader_hash_buckets */ \
 1, /* local_publisher_hash_buckets */ \
 1, /* local_subscriber_hash_buckets */ \
 4, /* local_topic_hash_buckets */ \
 16, /* remote_writer_hash_buckets */ \
 16, /* remote_reader_hash_buckets */ \
 4, /* remote_participant_hash_buckets */ \
 32, /* matching_writer_reader_pair_hash_buckets */ \
 32, /* matching_reader_writer_pair_hash_buckets */  \
 1, /* ignored_entity_hash_buckets */  \
 1, /* content_filtered_topic_hash_buckets */  \
 1, /* content_filter_hash_buckets */  \
 1, /* flow_controller_hash_buckets */ \
 PRES_PARTICIPANT_IPADDRESS_COUNT_MAX,  /* max_gather_destinations */      \
 256, /* participant_user_data_max_length */ \
 256, /* inter_participant_data_max_length */ \
 256, /* topic_data_max_length */ \
 256, /* publisher_group_data_max_length */ \
 256, /* subscriber_group_data_max_length */ \
 256, /* writer_user_data_max_length */ \
 256, /* reader_user_data_max_length */  \
 64, /* max_partitions */ \
 256, /* max_partition_cumulative_characters */        \
 DDS_BOOLEAN_FALSE, /* default_partition_match_all */ \
 DDS_BOOLEAN_FALSE, /* allow_no_partition */         \
 2048, /* Type code max serialized size */              \
 3072, /* Type object max serialized size */            \
 3072, /* Serialized type object dynamic allocation threshold */       \
 -1, /* Type object max deserialized size */            \
 4096, /* Deserialized type object dynamic allocation threshold */       \
 256, /* content filter max serialized length */     \
 32, /* channel sequence max length */     \
 256, /* channel filter PER FILTER expression string max length */     \
 32,  /* participant property list max length */\
 4096, /* participant property string max length */\
 32,  /* writer property list max length */\
 1024, /* writer property string max length */\
 32,  /* reader property list max length */\
 1024, /* reader property string max length */\
 256, /* plugin_info_parameter_max_length */ \
 32, /* max_endpoint_groups */ \
 1024, /* max_endpoint_group_cumulative_characters */ \
 12, /* transport_info_list_max_length */ \
 DDS_NO_REPLACEMENT_IGNORED_ENTITY_REPLACEMENT, /* ignored_entity_replacement_kind */ \
 {1L, -1L, -1L}, /* remote_topic_query_allocation */ \
 1 /* remote_topic_query_hash_buckets */ \
}

extern DDSCDllExport
void DDS_DomainParticipantResourceLimitsQosPolicy_save(
    const struct DDS_DomainParticipantResourceLimitsQosPolicy* self,
    const struct DDS_DomainParticipantResourceLimitsQosPolicy* base,
    struct RTIXMLSaveContext* dst);

extern DDSCDllExport
void DDS_DomainParticipantResourceLimitsQosPolicy_initialize(
    struct DDS_DomainParticipantResourceLimitsQosPolicy* self);

extern DDSCDllExport
void DDS_DomainParticipantResourceLimitsQosPolicy_finalize(
    struct DDS_DomainParticipantResourceLimitsQosPolicy* self);

extern DDSCDllExport
struct DDS_DomainParticipantResourceLimitsQosPolicy*
DDS_DomainParticipantResourceLimitsQosPolicy_copy(
    struct DDS_DomainParticipantResourceLimitsQosPolicy* dst, 
    const struct DDS_DomainParticipantResourceLimitsQosPolicy* src);


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportInfo_t);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_TransportInfo_t {

    /*e \dref_TransportInfo_t_class_id
     */
    NDDS_Transport_ClassId_t class_id;

    /*e \dref_TransportInfo_t_message_size_max
     */
    DDS_Long message_size_max;
    
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_TransportInfo_t)
};


DDS_SEQUENCE(DDS_TransportInfoSeq, struct DDS_TransportInfo_t);
#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

 extern DDSCDllVariable const char *const
DDS_EVENT_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_EventQosPolicy);

struct DDS_EventQosPolicy {
    /*e \dref_EventQosPolicy_thread
     */
    struct DDS_ThreadSettings_t thread;
    /*e \dref_EventQosPolicy_initial_count
     */
    DDS_Long initial_count;
    /*e \dref_EventQosPolicy_max_count
     */
    DDS_Long max_count;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_EventQosPolicy)
};


#define DDS_EVENT_QOS_POLICY_DEFAULT \
{ DDS_THREAD_SETTINGS_DEFAULT, \
  256, /* initial_count */ \
  -1 /* max_count: unlimited */ \
}

extern DDSCDllExport
void DDS_EventQosPolicy_save(const struct DDS_EventQosPolicy* self,
                             const struct DDS_EventQosPolicy* base,
                             struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_DATABASE_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_DatabaseQosPolicy);

extern DDSCDllExport 
DDS_Boolean DDS_DatabaseQosPolicy_equals(
    const struct DDS_DatabaseQosPolicy* self,
    const struct DDS_DatabaseQosPolicy* other);

struct DDS_DatabaseQosPolicy {
    /*e \dref_DatabaseQosPolicy_thread
     */
    struct DDS_ThreadSettings_t thread;
    
    /*e \dref_DatabaseQosPolicy_shutdown_timeout
     */
    struct DDS_Duration_t shutdown_timeout;
    
    /*e \dref_DatabaseQosPolicy_cleanup_period
     */
    struct DDS_Duration_t cleanup_period;

    /*e \dref_DatabaseQosPolicy_shutdown_cleanup_period
     */
    struct DDS_Duration_t shutdown_cleanup_period;
    
    /*e \dref_DatabaseQosPolicy_initial_records
     */
    DDS_Long initial_records;

    /*e \dref_DatabaseQosPolicy_max_skiplist_level
     */
    DDS_Long max_skiplist_level;
    
    /*i \dref_DatabaseQosPolicy_table_allocation_block_size
     */
    DDS_Long table_allocation_block_size;

    /*e \dref_DatabaseQosPolicy_max_weak_references
     */
    DDS_Long max_weak_references;
    
    /*e \dref_DatabaseQosPolicy_initial_weak_references
     */
    DDS_Long initial_weak_references;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_DatabaseQosPolicy)
};


#define DDS_DATABASE_QOS_POLICY_DEFAULT { \
    DDS_THREAD_SETTINGS_DEFAULT, /* thread */ \
    {15, 0} /* shutdown_timeout */, \
    {61, 0} /* cleanup_period */, \
    {1, 0} /* shutdown_cleanup_period */, \
    1024 /* initial_records */, \
    7 /* max_skiplist_level, was 14, but that's unnecessarily high! */, \
    48, /* table_allocation_block_size */ \
   -1 /*max_weak_references: unlimited */, \
    2049 /*initial_weak_references*/ \
}

extern DDSCDllExport
void DDS_DatabaseQosPolicy_save(const struct DDS_DatabaseQosPolicy* self,
                                const struct DDS_DatabaseQosPolicy* base,
                                struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_RECEIVERPOOL_QOS_POLICY_NAME;

 extern DDSCDllVariable const DDS_Long DDS_LENGTH_AUTO;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_ReceiverPoolQosPolicy);

struct DDS_ReceiverPoolQosPolicy {
    /*e \dref_ReceiverPoolQosPolicy_thread
     */
    struct DDS_ThreadSettings_t thread;
    
    /*i \dref_ReceiverPoolQosPolicy_initial_receive_threads
     * 
     * These docs are internal because the receive threads in the lower
     * layer are not yet implemented in the way implied by this policy.
     * In fact, the docs state that this field is currently unsupported.
     * It doesn't make much sense to add a DDS extension and then not
     * support it.
     */
    DDS_Long initial_receive_threads;
    
    /*i \dref_ReceiverPoolQosPolicy_max_receive_threads
     * 
     * These docs are internal because this field is not yet used. It exists
     * to be symmetrical with initial_receive_threads and will likely be
     * supported one day once we have a better receive thread pool.
     */
    DDS_Long max_receive_threads;
    
    /*e \dref_ReceiverPoolQosPolicy_buffer_size
     */
    DDS_Long buffer_size;
    
    /*e \dref_ReceiverPoolQosPolicy_buffer_alignment
     */
    DDS_Long buffer_alignment;
    
    /*i \dref_ReceiverPoolQosPolicy_is_timestamp_enabled
     */
    DDS_Boolean is_timestamp_enabled;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_ReceiverPoolQosPolicy)
};


#define DDS_ReceiverPoolQosPolicy_MAX_RECEIVE_THREADS_DEFAULT (-1)


#define DDS_RECEIVER_POOL_QOS_POLICY_DEFAULT \
    { DDS_THREAD_SETTINGS_DEFAULT, 4, \
      DDS_ReceiverPoolQosPolicy_MAX_RECEIVE_THREADS_DEFAULT, \
      PRES_LENGTH_AUTO, 16, DDS_BOOLEAN_TRUE }

extern DDSCDllExport
void DDS_ReceiverPoolQosPolicy_save(const struct DDS_ReceiverPoolQosPolicy* self,
                                    const struct DDS_ReceiverPoolQosPolicy* base,
                                    struct RTIXMLSaveContext* dst);

struct DDS_BuiltinTopicReaderResourceLimits_t {
    /*e \dref_BuiltinTopicReaderResourceLimits_t_initial_samples
     */
    DDS_Long initial_samples;
    /*e \dref_BuiltinTopicReaderResourceLimits_t_max_samples
     */
    DDS_Long max_samples;
    /*e \dref_BuiltinTopicReaderResourceLimits_t_initial_infos
     */
    DDS_Long initial_infos;
    /*e \dref_BuiltinTopicReaderResourceLimits_t_max_infos
     */
    DDS_Long max_infos;
    /*e \dref_BuiltinTopicReaderResourceLimits_t_initial_outstanding_reads
     */
    DDS_Long initial_outstanding_reads;

    /*e \dref_BuiltinTopicReaderResourceLimits_t_max_outstanding_reads
     */
    DDS_Long max_outstanding_reads;

    /*e \dref_BuiltinTopicReaderResourceLimits_t_max_samples_per_read
     */
    DDS_Long max_samples_per_read;

    /*e \dref_BuiltinTopicReaderResourceLimits_t_disable_fragmentation_support
     */
    DDS_Boolean disable_fragmentation_support;
    /*e \dref_BuiltinTopicReaderResourceLimits_t_max_fragmented_samples
     */
    DDS_Long max_fragmented_samples;
    /*e \dref_BuiltinTopicReaderResourceLimits_t_initial_fragmented_samples
     */
    DDS_Long initial_fragmented_samples;
    /*e \dref_BuiltinTopicReaderResourceLimits_t_max_fragmented_samples_per_remote_writer
     */
    DDS_Long max_fragmented_samples_per_remote_writer;
    /*e \dref_BuiltinTopicReaderResourceLimits_t_max_fragments_per_sample
     */
    DDS_Long max_fragments_per_sample;
    /*e \dref_BuiltinTopicReaderResourceLimits_t_dynamically_allocate_fragmented_samples
     */
    DDS_Boolean dynamically_allocate_fragmented_samples;
};


#define DDS_BUILTIN_TOPIC_READER_RESOURCE_LIMITS_DEFAULT {   \
    64,  /* initial samples */                               \
    -1L, /* max_samples: was 16384 before being unlimited */ \
    64,  /* initial_infos */                                 \
    -1L, /* max_infos: was 16384 before being unlimited */   \
    2,   /* initial_outstanding_reads */                     \
    -1L, /* max_outstanding_reads: was 1024 before being unlimited */ \
    1024, /* max_samples_per_read */ \
    DDS_BOOLEAN_FALSE,/*disable_fragmentation_support */\
    1024L, /* max_fragmented_samples */\
    4L, /* initial_fragmented_samples */\
    256L, /* max_fragmented_samples_per_remote_writer */\
    -1L, /* max_fragments_per_sample */\
    DDS_BOOLEAN_TRUE /* dynamically_allocate_fragmented_samples */}

extern DDSCDllExport
void DDS_BuiltinTopicReaderResourceLimits_save(const char * tag_name,
                                               const struct DDS_BuiltinTopicReaderResourceLimits_t* self,
                                               const struct DDS_BuiltinTopicReaderResourceLimits_t* base,
                                               struct RTIXMLSaveContext* dst);


#define DDS_BUILTIN_TOPIC_KEY_TYPE_NATIVE_LENGTH (4)

typedef struct DDS_BuiltinTopicKey_t {
    /*e \dref_BuiltinTopicKey_t_value
     */
    DDS_BUILTIN_TOPIC_KEY_TYPE_NATIVE value[DDS_BUILTIN_TOPIC_KEY_TYPE_NATIVE_LENGTH];
} DDS_BuiltinTopicKey_t;


#define DDS_BuiltinTopicKey_t_INITIALIZER { {0, 0, 0, 0} }

extern DDSCDllExport DDS_Boolean DDS_BuiltinTopicKey_equals(
        const DDS_BuiltinTopicKey_t *self,
        const DDS_BuiltinTopicKey_t *other);

extern DDSCDllExport void DDS_BuiltinTopicKey_copy(
        DDS_BuiltinTopicKey_t *dst,
        const DDS_BuiltinTopicKey_t *src);

extern DDSCDllExport void DDS_BuiltinTopicKey_to_guid(
        const DDS_BuiltinTopicKey_t *self,
        DDS_GUID_t *dst);

extern DDSCDllExport void DDS_BuiltinTopicKey_from_guid(
        DDS_BuiltinTopicKey_t *self,
        const DDS_GUID_t *src);

 extern DDSCDllVariable const char *const
DDS_PUBLISHMODE_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_PublishModeQosPolicy);

typedef enum {
    /*e \dref_PublishModeQosPolicyKind_SYNCHRONOUS_PUBLISH_MODE_QOS
     */
    DDS_SYNCHRONOUS_PUBLISH_MODE_QOS,
    
    /*e \dref_PublishModeQosPolicyKind_ASYNCHRONOUS_PUBLISH_MODE_QOS
     */
    DDS_ASYNCHRONOUS_PUBLISH_MODE_QOS

} DDS_PublishModeQosPolicyKind;


    /*e \dref_PUBLICATION_PRIORITY_UNDEFINED
     */
  #define DDS_PUBLICATION_PRIORITY_UNDEFINED (0)
    /*e \dref_PUBLICATION_PRIORITY_AUTOMATIC
     */
  #define DDS_PUBLICATION_PRIORITY_AUTOMATIC (-1)

struct DDS_PublishModeQosPolicy {
    /*e \dref_PublishModeQosPolicy_kind
     */
    DDS_PublishModeQosPolicyKind kind;
    /*e \dref_PublishModeQosPolicy_flow_controller_name
     */
    char *flow_controller_name;
    
    /*e \dref_PublishModeQosPolicy_priority
     */
    DDS_Long priority;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_PublishModeQosPolicy)
};


#define DDS_PUBLISH_MODE_QOS_POLICY_DEFAULT \
{ DDS_SYNCHRONOUS_PUBLISH_MODE_QOS, NULL, DDS_PUBLICATION_PRIORITY_UNDEFINED }

extern DDSCDllExport
void DDS_PublishModeQosPolicy_save(const char * tag_name,
                                   const struct DDS_PublishModeQosPolicy* self,
                                   const struct DDS_PublishModeQosPolicy* base,
                                   struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_DISCOVERYCONFIG_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_DiscoveryConfigQosPolicy); 

typedef DDS_Long DDS_DiscoveryConfigBuiltinPluginKindMask;

typedef enum {
    /*i \dref_DiscoveryConfigBuiltinPluginKind_DISCOVERYCONFIG_BUILTIN_SPDP
     */
    DDS_DISCOVERYCONFIG_BUILTIN_SPDP = 0x0001 << 0,
    /*i \dref_DiscoveryConfigBuiltinPluginKind_DISCOVERYCONFIG_BUILTIN_SEDP
     */
    DDS_DISCOVERYCONFIG_BUILTIN_SEDP = 0x0001 << 1,
    /*e \dref_DiscoveryConfigBuiltinPluginKind_DISCOVERYCONFIG_BUILTIN_SDP
     */
    DDS_DISCOVERYCONFIG_BUILTIN_SDP = DDS_DISCOVERYCONFIG_BUILTIN_SPDP |
                                      DDS_DISCOVERYCONFIG_BUILTIN_SEDP,
    /*i \dref_DiscoveryConfigBuiltinPluginKind_DISCOVERYCONFIG_BUILTIN_EDS
     */
    DDS_DISCOVERYCONFIG_BUILTIN_EDS   = 0x0001 << 2
} DDS_DiscoveryConfigBuiltinPluginKind;


/*e \dref_DISCOVERYCONFIG_BUILTIN_PLUGIN_MASK_ALL
 */
  #define DDS_DISCOVERYCONFIG_BUILTIN_PLUGIN_MASK_ALL  (DDS_DiscoveryConfigBuiltinPluginKindMask)(0xefff)
/*e \dref_DISCOVERYCONFIG_BUILTIN_PLUGIN_MASK_NONE
 */
  #define DDS_DISCOVERYCONFIG_BUILTIN_PLUGIN_MASK_NONE (DDS_DiscoveryConfigBuiltinPluginKindMask)(0x0)
/*e \dref_DISCOVERYCONFIG_BUILTIN_PLUGIN_MASK_DEFAULT
 */
  #define DDS_DISCOVERYCONFIG_BUILTIN_PLUGIN_MASK_DEFAULT  (DDS_DiscoveryConfigBuiltinPluginKindMask)DDS_DISCOVERYCONFIG_BUILTIN_SDP

typedef enum {
    /*i \dref_DiscoveryPluginPromiscuityKind_DISCOVERYPLUGIN_DISCOVER_MATCHING_REMOTE_ENTITIES_PROMISCUITY
     */
    DDS_DISCOVERYPLUGIN_DISCOVER_MATCHING_REMOTE_ENTITIES_PROMISCUITY = 0x0001,
    /*i \dref_DiscoveryPluginPromiscuityKind_DISCOVERYPLUGIN_DISCOVER_ALL_REMOTE_ENTITIES_PROMISCUITY
     */
    DDS_DISCOVERYPLUGIN_DISCOVER_ALL_REMOTE_ENTITIES_PROMISCUITY = 0xFFFF    
} DDS_DiscoveryPluginPromiscuityKind;

typedef enum {
    /*e \dref_RemoteParticipantPurgeKind_LIVELINESS_BASED_REMOTE_PARTICIPANT_PURGE
     */
    DDS_LIVELINESS_BASED_REMOTE_PARTICIPANT_PURGE,
    /*e \dref_RemoteParticipantPurgeKind_NO_REMOTE_PARTICIPANT_PURGE
     */
    DDS_NO_REMOTE_PARTICIPANT_PURGE
} DDS_RemoteParticipantPurgeKind;

struct DDS_DiscoveryBuiltinReaderFragmentationResourceLimits_t {
    /*i \dref_DiscoveryBuiltinReaderFragmentationResourceLimits_disable_fragmentation_support
     */
    DDS_Boolean disable_fragmentation_support;
    /*i \dref_DiscoveryBuiltinReaderFragmentationResourceLimits_max_fragmented_samples
     */
    DDS_Long max_fragmented_samples;
    /*i \dref_DiscoveryBuiltinReaderFragmentationResourceLimits_initial_fragmented_samples
     */
    DDS_Long initial_fragmented_samples;
    /*i \dref_DiscoveryBuiltinReaderFragmentationResourceLimits_max_fragmented_samples_per_remote_writer
     */
    DDS_Long max_fragmented_samples_per_remote_writer;
    /*i \dref_DiscoveryBuiltinReaderFragmentationResourceLimits_max_fragments_per_sample
     */
    DDS_Long max_fragments_per_sample;
    /*i \dref_DiscoveryBuiltinReaderFragmentationResourceLimits_dynamically_allocate_fragmented_samples
     */
    DDS_Boolean dynamically_allocate_fragmented_samples;
};


#define DISCOVERY_BUILTIN_READER_FRAGMENTATION_RESOURCE_LIMITS_DEFAULT { \
    DDS_BOOLEAN_FALSE,/*disable_fragmentation_support */\
    1024L, /* max_fragmented_samples */\
    4L, /* initial_fragmented_samples */\
    256L, /* max_fragmented_samples_per_remote_writer */\
    -1L, /* max_fragments_per_sample */\
    DDS_BOOLEAN_TRUE /* dynamically_allocate_fragmented_samples */\
}

typedef enum {
    /*i \dref_ThreadBlockingKind_SEMAPHORE_BLOCKING_KIND
     */
    DDS_SEMAPHORE_BLOCKING_KIND,
    /*i \dref_ThreadBlockingKind_SPIN_BLOCKING_KIND
     */
    DDS_SPIN_BLOCKING_KIND
} DDS_ThreadBlockingKind;

 extern DDSCDllVariable const char *const
DDS_ASYNCHRONOUSPUBLISHER_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_AsynchronousPublisherQosPolicy);

struct DDS_AsynchronousPublisherQosPolicy {
    /*e \dref_AsynchronousPublisherQosPolicy_disable_asynchronous_write
     */
     DDS_Boolean disable_asynchronous_write;
     /*e \dref_AsynchronousPublisherQosPolicy_thread
      */
     struct DDS_ThreadSettings_t thread;
     /*e \dref_AsynchronousPublisherQosPolicy_disable_asynchronous_batch
      */
     DDS_Boolean disable_asynchronous_batch;
     /*e \dref_AsynchronousPublisherQosPolicy_asynchronous_batch_thread
      */
     struct DDS_ThreadSettings_t asynchronous_batch_thread;
     /*i \dref_AsynchronousPublisherQosPolicy_asynchronous_batch_blocking_kind
     */
     DDS_ThreadBlockingKind asynchronous_batch_blocking_kind;

     /*e \dref_AsynchronousPublisherQosPolicy_disable_topic_query_publication
      */
     DDS_Boolean disable_topic_query_publication;

     /*e \dref_AsynchronousPublisherQosPolicy_topic_query_publication_thread
      */
     struct DDS_ThreadSettings_t topic_query_publication_thread;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_AsynchronousPublisherQosPolicy)
};


#define DDS_ASYNCHRONOUS_PUBLISHER_QOS_POLICY_DEFAULT { \
    DDS_BOOLEAN_FALSE, DDS_THREAD_SETTINGS_DEFAULT, \
    DDS_BOOLEAN_FALSE, DDS_THREAD_SETTINGS_DEFAULT, \
    DDS_SEMAPHORE_BLOCKING_KIND, \
    DDS_BOOLEAN_FALSE, DDS_THREAD_SETTINGS_DEFAULT \
}

extern DDSCDllExport
void DDS_AsynchronousPublisherQosPolicy_save(const struct DDS_AsynchronousPublisherQosPolicy* self,
                                             const struct DDS_AsynchronousPublisherQosPolicy* base,
                                             struct RTIXMLSaveContext* dst);

struct DDS_DiscoveryConfigQosPolicy {
     
    /*e \dref_DiscoveryConfigQosPolicy_participant_liveliness_lease_duration
     */
    struct DDS_Duration_t participant_liveliness_lease_duration;
    
    /*e \dref_DiscoveryConfigQosPolicy_participant_liveliness_assert_period
     */
    struct DDS_Duration_t participant_liveliness_assert_period;
    
    /*e \dref_DiscoveryConfigQosPolicy_remote_participant_purge_kind
     */
    DDS_RemoteParticipantPurgeKind remote_participant_purge_kind;
    
    /*e \dref_DiscoveryConfigQosPolicy_max_liveliness_loss_detection_period
     */
    struct DDS_Duration_t max_liveliness_loss_detection_period;

    /*e \dref_DiscoveryConfigQosPolicy_initial_participant_announcements
     */
    DDS_Long initial_participant_announcements;

    /*e \dref_DiscoveryConfigQosPolicy_min_initial_participant_announcement_period
     */
    struct DDS_Duration_t min_initial_participant_announcement_period;

    /*e \dref_DiscoveryConfigQosPolicy_max_initial_participant_announcement_period
     */
    struct DDS_Duration_t max_initial_participant_announcement_period;

    /*e \dref_DiscoveryConfigQosPolicy_participant_reader_resource_limits
     */
    struct DDS_BuiltinTopicReaderResourceLimits_t participant_reader_resource_limits;

    /*e \dref_DiscoveryConfigQosPolicy_publication_reader
     */
    struct DDS_RtpsReliableReaderProtocol_t publication_reader;

    /*e \dref_DiscoveryConfigQosPolicy_publication_reader_resource_limits
     */
    struct DDS_BuiltinTopicReaderResourceLimits_t publication_reader_resource_limits;
    
    /*e \dref_DiscoveryConfigQosPolicy_subscription_reader
     */
    struct DDS_RtpsReliableReaderProtocol_t subscription_reader;
    
    /*e \dref_DiscoveryConfigQosPolicy_subscription_reader_resource_limits
     */    
    struct DDS_BuiltinTopicReaderResourceLimits_t subscription_reader_resource_limits;
    
    /*e \dref_DiscoveryConfigQosPolicy_publication_writer
     */    
    struct DDS_RtpsReliableWriterProtocol_t publication_writer;

    /*e \dref_DiscoveryConfigQosPolicy_publication_writer_data_lifecycle
     */    
    struct DDS_WriterDataLifecycleQosPolicy publication_writer_data_lifecycle;
    
    /*e \dref_DiscoveryConfigQosPolicy_subscription_writer
     */    
    struct DDS_RtpsReliableWriterProtocol_t subscription_writer;

    /*e \dref_DiscoveryConfigQosPolicy_subscription_writer_data_lifecycle
     */    
    struct DDS_WriterDataLifecycleQosPolicy subscription_writer_data_lifecycle;
    
    /*i \dref_DiscoveryConfigQosPolicy_endpoint_plugin_redundancy_level
     */    
    DDS_Long endpoint_plugin_redundancy_level;
    
    /*e \dref_DiscoveryConfigQosPolicy_builtin_discovery_plugins
     */    
    DDS_DiscoveryConfigBuiltinPluginKindMask builtin_discovery_plugins;

    /*e \dref_DiscoveryConfigQosPolicy_participant_message_reader_reliability_kind
     */
    DDS_ReliabilityQosPolicyKind participant_message_reader_reliability_kind;

    /*e \dref_DiscoveryConfigQosPolicy_participant_message_reader
     */
    struct DDS_RtpsReliableReaderProtocol_t participant_message_reader;

    /*e \dref_DiscoveryConfigQosPolicy_participant_message_writer
     */
    struct DDS_RtpsReliableWriterProtocol_t participant_message_writer;

    /*e \dref_DiscoveryConfigQosPolicy_publication_writer_publish_mode
     */
    struct DDS_PublishModeQosPolicy publication_writer_publish_mode;

    /*e \dref_DiscoveryConfigQosPolicy_subscription_writer_publish_mode
     */
    struct DDS_PublishModeQosPolicy subscription_writer_publish_mode;

    /*e \dref_DiscoveryConfigQosPolicy_asynchronous_publisher
    */
    struct DDS_AsynchronousPublisherQosPolicy asynchronous_publisher;
    
    /*e \dref_DiscoveryConfigQosPolicy_default_domain_announcement_period
    */
    struct DDS_Duration_t default_domain_announcement_period;
    
    /*e \dref_DiscoveryConfigQosPolicy_ignore_default_domain_announcements
    */
    DDS_Boolean ignore_default_domain_announcements;

    /*e \dref_DiscoveryConfigQosPolicy_service_request_writer
     */    
    struct DDS_RtpsReliableWriterProtocol_t service_request_writer;

    /*e \dref_DiscoveryConfigQosPolicy_service_request_writer_data_lifecycle
     */    
    struct DDS_WriterDataLifecycleQosPolicy service_request_writer_data_lifecycle;

    /*e \dref_DiscoveryConfigQosPolicy_service_request_writer_publish_mode
     */
    struct DDS_PublishModeQosPolicy service_request_writer_publish_mode;

    /*e \dref_DiscoveryConfigQosPolicy_service_request_reader
     */
    struct DDS_RtpsReliableReaderProtocol_t service_request_reader;
    /*e \dref_DiscoveryConfigQosPolicy_locator_reachability_assert_period
    */
    struct DDS_Duration_t locator_reachability_assert_period;
    
    /*e \dref_DiscoveryConfigQosPolicy_locator_reachability_lease_duration
    */
    struct DDS_Duration_t locator_reachability_lease_duration;
    
    /*e \dref_DiscoveryConfigQosPolicy_locator_reachability_change_detection_period
    */
    struct DDS_Duration_t locator_reachability_change_detection_period;

    /***************** HIDDEN FROM USER ********************************/

    /*i \dref_DiscoveryConfigQosPolicy_sedp_rely_on_spdp_only
     */
    DDS_Boolean sedp_rely_on_spdp_only;

    /* --- Publication announcer --- */

    /*i \dref_DiscoveryConfigQosPolicy_publication_writer_latency_budget
     */
    struct DDS_LatencyBudgetQosPolicy publication_writer_latency_budget;

    /*i \dref_DiscoveryConfigQosPolicy_publication_writer_push_on_write
     */
    DDS_Boolean publication_writer_push_on_write;

    /* --- Subscription announcer --- */

    /*i \dref_DiscoveryConfigQosPolicy_subscription_writer_latency_budget
     */
    struct DDS_LatencyBudgetQosPolicy subscription_writer_latency_budget;

    /*i \dref_DiscoveryConfigQosPolicy_subscription_writer_push_on_write
     */
    DDS_Boolean subscription_writer_push_on_write;

    /* --- Participant state writer --- */

    /*i \dref_DiscoveryConfigQosPolicy_participant_state_writer
     */
    struct DDS_RtpsReliableWriterProtocol_t participant_state_writer;

    /*i \dref_DiscoveryConfigQosPolicy_participant_state_writer_latency_budget
     */
    struct DDS_LatencyBudgetQosPolicy participant_state_writer_latency_budget;

    /*i \dref_DiscoveryConfigQosPolicy_participant_state_writer_push_on_write
     */
    DDS_Boolean participant_state_writer_push_on_write;

    /*i \dref_DiscoveryConfigQosPolicy_participant_state_writer_publish_mode
     */
    struct DDS_PublishModeQosPolicy participant_state_writer_publish_mode;

    /* --- Participant proxy reader --- */

    /*i \dref_DiscoveryConfigQosPolicy_participant_proxy_reader
     */
    struct DDS_RtpsReliableReaderProtocol_t participant_proxy_reader;

    /*i \dref_DiscoveryConfigQosPolicy_participant_proxy_reader_fragmentation_resource_limits
     */
    struct DDS_DiscoveryBuiltinReaderFragmentationResourceLimits_t 
        participant_proxy_reader_fragmentation_resource_limits;

    /*i \dref_DiscoveryConfigQosPolicy_plugin_promiscuity_kind
     */
    DDS_DiscoveryPluginPromiscuityKind plugin_promiscuity_kind;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_DiscoveryConfigQosPolicy)
};


#define DDS_DISCOVERY_CONFIG_QOS_POLICY_DEFAULT { \
{100L,0L}, /* participant_liveliness_lease_duration */\
{30L,0L}, /* participant_liveliness_assert_period */\
DDS_LIVELINESS_BASED_REMOTE_PARTICIPANT_PURGE, /*remote_participant_purge_kind*/\
{60L,0L}, /* max_liveliness_loss_detection_period */ \
5L, /* new_remote_participant_announcements */\
{1L,0L}, /* min_new_remote_participant_announcement_period */\
{1L,0L}, /* max_new_remote_participant_announcement_period */\
 DDS_BUILTIN_TOPIC_READER_RESOURCE_LIMITS_DEFAULT,/* participant_reader_resource_limits */\
DDS_RTPS_RELIABLE_READER_PROTOCOL_DISCOVERY_CONFIG_DEFAULT, /* publication_reader */\
 DDS_BUILTIN_TOPIC_READER_RESOURCE_LIMITS_DEFAULT,/* publication_reader_resource_limits */\
DDS_RTPS_RELIABLE_READER_PROTOCOL_DISCOVERY_CONFIG_DEFAULT, /* subscription_reader */\
 DDS_BUILTIN_TOPIC_READER_RESOURCE_LIMITS_DEFAULT,/* subscription_reader_resource_limits */\
DDS_RTPS_RELIABLE_WRITER_PROTOCOL_DISCOVERY_CONFIG_DEFAULT, /* publication_writer */\
DDS_BUITLIN_WRITER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT, /* publication_writer_data_lifecycle */\
DDS_RTPS_RELIABLE_WRITER_PROTOCOL_DISCOVERY_CONFIG_DEFAULT, /* subscription_writer */\
DDS_BUITLIN_WRITER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT, /* subscription_writer_data_lifecycle */\
-1, /* endpoint_plugin_redundancy_level - cannot use DDS_LENGTH_UNLIMITED since it's externed */\
DDS_DISCOVERYCONFIG_BUILTIN_PLUGIN_MASK_DEFAULT, /* builtin_discovery_plugins */\
DDS_BEST_EFFORT_RELIABILITY_QOS, /* participant_message_reader_reliability_kind */ \
DDS_RTPS_PARTICIPANT_MESSAGE_READER_DISCOVERY_CONFIG_DEFAULT, /* participant_message_reader */\
DDS_RTPS_PARTICIPANT_MESSAGE_WRITER_DISCOVERY_CONFIG_DEFAULT, /* participant_message_writer */\
DDS_PUBLISH_MODE_QOS_POLICY_DEFAULT, /* publication_writer_publish_mode */\
DDS_PUBLISH_MODE_QOS_POLICY_DEFAULT, /* subscription_writer_publish_mode */\
DDS_ASYNCHRONOUS_PUBLISHER_QOS_POLICY_DEFAULT, /*asynchronous_publisher*/\
{30L,0L}, /* default_domain_assert_period */ \
DDS_BOOLEAN_TRUE, /* ignore_default_domain_announcements */\
DDS_RTPS_RELIABLE_WRITER_PROTOCOL_DISCOVERY_CONFIG_DEFAULT, /* service_request_writer */\
DDS_BUITLIN_WRITER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT, /* service_request_writer_data_lifecycle */\
DDS_PUBLISH_MODE_QOS_POLICY_DEFAULT, /* service_request_writer_publish_mode */\
DDS_RTPS_RELIABLE_READER_PROTOCOL_DISCOVERY_CONFIG_DEFAULT, /* service_request_reader */\
DDS_DOMAIN_PARTICIPANT_LOCATOR_REACHABILTY_ASSERT_PERIOD_DEFAULT, /* locator_reachability_assert_period */\
DDS_DOMAIN_PARTICIPANT_LOCATOR_REACHABILTY_LEASE_DURATION_DEFAULT, /* locator_reachability_lease_duration */\
DDS_DOMAIN_PARTICIPANT_LOCATOR_REACHABILTY_CHANGE_DETECTION_PERIOD_DEFAULT, /* locator_reachability_change_detection_period */\
DDS_BOOLEAN_FALSE, /* sedp_rely_on_spdp_only */\
DDS_LATENCY_BUDGET_QOS_POLICY_DEFAULT, /* publication_writer_latency_budget */\
DDS_BOOLEAN_TRUE, /* publication_writer_push_on_write */\
DDS_LATENCY_BUDGET_QOS_POLICY_DEFAULT, /* subscription_writer_latency_budget */\
DDS_BOOLEAN_TRUE, /* subscription_writer_push_on_write */\
DDS_RTPS_RELIABLE_WRITER_PROTOCOL_DISCOVERY_CONFIG_DEFAULT, /* participant_state_writer */\
DDS_LATENCY_BUDGET_QOS_POLICY_DEFAULT, /* participant_state_writer_latency_budget */\
DDS_BOOLEAN_TRUE, /* participant_state_writer_push_on_write */\
DDS_PUBLISH_MODE_QOS_POLICY_DEFAULT, /* participant_state_writer_publish_mode */\
DDS_RTPS_RELIABLE_READER_PROTOCOL_DISCOVERY_CONFIG_DEFAULT, /* participant_proxy_reader */\
DISCOVERY_BUILTIN_READER_FRAGMENTATION_RESOURCE_LIMITS_DEFAULT, /* participant_proxy_reader_fragmentation_resource_limits */\
DDS_DISCOVERYPLUGIN_DISCOVER_MATCHING_REMOTE_ENTITIES_PROMISCUITY /* plugin_promiscuity_kind */\
}

extern DDSCDllExport
void DDS_DiscoveryConfigQosPolicy_save(const struct DDS_DiscoveryConfigQosPolicy* self,
                                       const struct DDS_DiscoveryConfigQosPolicy* base,
                                       struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_TYPESUPPORT_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_CdrPaddingKind_ZERO_CDR_PADDING
     */
    DDS_ZERO_CDR_PADDING,
    
    /*e \dref_CdrPaddingKind_NOT_SET_CDR_PADDING
     */
    DDS_NOT_SET_CDR_PADDING,

    /*e \dref_CdrPaddingKind_AUTO_CDR_PADDING
     */
    DDS_AUTO_CDR_PADDING
    
} DDS_CdrPaddingKind;

struct DDS_TypeSupportQosPolicy {
    /*e \dref_TypeSupportQosPolicy_plugin_data
     */
    void* plugin_data;

    /*e \dref_TypeSupportQosPolicy_cdr_padding_kind
     */
    DDS_CdrPaddingKind cdr_padding_kind;
};


#define DDS_TYPESUPPORT_QOS_POLICY_DEFAULT \
{ NULL, DDS_AUTO_CDR_PADDING}

extern DDSCDllExport
DDS_ReturnCode_t DDS_TypeSupportQosPolicy_to_presentation_qos_policy(
        const struct DDS_TypeSupportQosPolicy* self,
        struct PRESTypeSupportQosPolicy* dst);

 extern DDSCDllVariable const char *const 
DDS_USEROBJECT_QOS_POLICY_NAME;

struct DDS_UserObjectQosPolicy {
    /*i \dref_UserObjectQosPolicy_participant_user_object
     */
    struct DDS_UserObjectSettings_t participant_user_object;
    /*i \dref_UserObjectQosPolicy_topic_user_object
     */
    struct DDS_UserObjectSettings_t topic_user_object;
    /*i \dref_UserObjectQosPolicy_content_filtered_topic_user_object
     */
    struct DDS_UserObjectSettings_t content_filtered_topic_user_object;
    /*i \dref_UserObjectQosPolicy_publisher_user_object
     */
    struct DDS_UserObjectSettings_t publisher_user_object;
    /*i \dref_UserObjectQosPolicy_data_writer_user_object
     */
    struct DDS_UserObjectSettings_t data_writer_user_object;
    /*i \dref_UserObjectQosPolicy_subscriber_user_object
     */
    struct DDS_UserObjectSettings_t subscriber_user_object;
    /*i \dref_UserObjectQosPolicy_data_reader_user_object
     */
    struct DDS_UserObjectSettings_t data_reader_user_object;
    /*i \dref_UserObjectQosPolicy_read_condition_user_object
     */
    struct DDS_UserObjectSettings_t read_condition_user_object;
    /*i \dref_UserObjectQosPolicy_query_condition_user_object
     */
    struct DDS_UserObjectSettings_t query_condition_user_object;
    /*i \dref_UserObjectQosPolicy_index_condition_user_object
     */
    struct DDS_UserObjectSettings_t index_condition_user_object;
    /*i \dref_UserObjectQosPolicy_flow_controller_user_object
     */
    struct DDS_UserObjectSettings_t flow_controller_user_object;
};


#define DDS_USER_OBJECT_QOS_POLICY_DEFAULT \
{{0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}, {0,0}}

 extern DDSCDllVariable const char *const 
DDS_EXCLUSIVEAREA_QOS_POLICY_NAME;

struct DDS_ExclusiveAreaQosPolicy {
    /*e \dref_ExclusiveAreaQosPolicy_use_shared_exclusive_area
     */
    DDS_Boolean use_shared_exclusive_area;

    /*i \dref_ExclusiveAreaQosPolicy_level
     */
    DDS_Long level;
};

 extern DDSCDllVariable const DDS_Long DDS_EXCLUSIVE_AREA_AUTO_LEVEL;


#define DDS_EXCLUSIVE_AREA_QOS_POLICY_DEFAULT   { DDS_BOOLEAN_FALSE, -1}

extern DDSCDllExport
void DDS_ExclusiveAreaQosPolicy_save(const struct DDS_ExclusiveAreaQosPolicy* self,
                                     const struct DDS_ExclusiveAreaQosPolicy* base,
                                     struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_BATCH_QOS_POLICY_NAME;

struct DDS_BatchQosPolicy {
    /*e \dref_BatchQosPolicy_enable
    */
    DDS_Boolean enable;
    /*e \dref_BatchQosPolicy_max_data_bytes
     */
    DDS_Long max_data_bytes;
    /*i \dref_BatchQosPolicy_max_meta_data_bytes
    */
    DDS_Long max_meta_data_bytes;
    /*e \dref_BatchQosPolicy_max_samples
    */
    DDS_Long max_samples;
    /*e \dref_BatchQosPolicy_max_flush_delay
     */
    struct DDS_Duration_t max_flush_delay;
    /*e \dref_BatchQosPolicy_source_timestamp_resolution 
    */
    struct DDS_Duration_t source_timestamp_resolution;
    /*e \dref_BatchQosPolicy_thread_safe_write
    */
    DDS_Boolean thread_safe_write;
};


#define DDS_BATCH_QOS_POLICY_DEFAULT {               \
    DDS_BOOLEAN_FALSE, /*enable */                      \
    1024, /* max_data_bytes */          \
    PRES_LENGTH_UNLIMITED, /* max_meta_data_bytes */ \
    PRES_LENGTH_UNLIMITED, /* max_sample_count */                  \
    { 0x7fffffffL, 0x7fffffffUL }, /* max_flush_delay */   \
    { 0x7fffffffL, 0x7fffffffUL },  /* source_timestamp_resolution */ \
    DDS_BOOLEAN_TRUE /* thread_safe_write */ \
}

extern DDSCDllExport
void DDS_BatchQosPolicy_save(const struct DDS_BatchQosPolicy* self,
                             const struct DDS_BatchQosPolicy* base,
                             struct RTIXMLSaveContext* dst); 

 extern DDSCDllVariable const char *const
    DDS_TYPE_CONSISTENCY_ENFORCEMENT_QOS_POLICY_NAME;

typedef enum {
    /*e \dref_TypeConsistencyKind_DISALLOW_TYPE_COERCION
     */
    DDS_DISALLOW_TYPE_COERCION,
    /*e \dref_TypeConsistencyKind_ALLOW_TYPE_COERCION
     */
    DDS_ALLOW_TYPE_COERCION
} DDS_TypeConsistencyKind;

struct DDS_TypeConsistencyEnforcementQosPolicy {
    /*e \dref_TypeConsistencyEnforcementQosPolicy_kind
    */
    DDS_TypeConsistencyKind kind;
};


#define DDS_TYPE_CONSISTENCY_ENFORCEMENT_QOS_POLICY_DEFAULT \
    {DDS_ALLOW_TYPE_COERCION}

extern DDSCDllExport
void DDS_TypeConsistencyEnforcementQosPolicy_save(
    const struct DDS_TypeConsistencyEnforcementQosPolicy* self,
    const struct DDS_TypeConsistencyEnforcementQosPolicy* base,
    struct RTIXMLSaveContext* dst);


struct DDS_TypeObject;

extern DDSCDllExport
DDS_Boolean DDS_TypeConsistencyEnforcementQosPolicy_match_types(
    const struct DDS_TypeConsistencyEnforcementQosPolicy* self,
    const char * typeName1, struct DDS_TypeObject * typeObject1,
    const char * typeName2, struct DDS_TypeObject * typeObject2);


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_LocatorFilter_t);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_LocatorFilter_t {
    /*e \dref_LocatorFilter_t_locators
     */
    struct DDS_LocatorSeq locators;    
    /*e \dref_LocatorFilter_t_filter_expression
     */
    char *filter_expression;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_LocatorFilter_t)
};


DDS_SEQUENCE(DDS_LocatorFilterSeq, struct DDS_LocatorFilter_t);
#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

 extern DDSCDllVariable const char *const
DDS_LOCATORFILTER_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_LocatorFilterQosPolicy);

struct DDS_LocatorFilterQosPolicy {
    /*e \dref_LocatorFilterQosPolicy_locator_filters
    */
    struct DDS_LocatorFilterSeq locator_filters;

    /*e \dref_LocatorFilterQosPolicy_filter_name
     */
    char *filter_name;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_LocatorFilterQosPolicy)
};


#define DDS_LOCATOR_FILTER_QOS_POLICY_DEFAULT { DDS_SEQUENCE_INITIALIZER, NULL }


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_ChannelSettings_t);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_ChannelSettings_t {
    /*e \dref_ChannelSettings_t_multicast_settings
     */
    struct DDS_TransportMulticastSettingsSeq multicast_settings;
    /*e \dref_ChannelSettings_t_filter_expression
     */
    char *filter_expression;

    /*e \dref_ChannelSettings_t_priority
    */
    DDS_Long priority;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_ChannelSettings_t)
};


DDS_SEQUENCE(DDS_ChannelSettingsSeq, struct DDS_ChannelSettings_t);
#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

extern DDSCDllExport
void DDS_ChannelSettingsSeq_save(const char * tag_name,
                                 const struct DDS_ChannelSettingsSeq *self,
                                 struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_MULTICHANNEL_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_MultiChannelQosPolicy);

struct DDS_MultiChannelQosPolicy {
    /*e \dref_MultiChannelQosPolicy_channels
    */
    struct DDS_ChannelSettingsSeq channels;

    /*e \dref_MultiChannelQosPolicy_filter_name
    */
    char *filter_name;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_MultiChannelQosPolicy)
};


#define DDS_MULTICHANNEL_QOS_POLICY_DEFAULT { DDS_SEQUENCE_INITIALIZER, NULL }

extern DDSCDllExport
void DDS_MultiChannelQosPolicy_save(const struct DDS_MultiChannelQosPolicy* self,
                                    const struct DDS_MultiChannelQosPolicy* base,
                                    struct RTIXMLSaveContext* dst);

struct DDS_Property_t {
    /*e \dref_Property_t_name
     */
    char *name;

    /*e \dref_Property_t_value
     */
    char *value;

    /*e \dref_Property_t_propagate
     */
    DDS_Boolean propagate;
};


DDS_SEQUENCE(DDS_PropertySeq, struct DDS_Property_t);

 extern DDSCDllVariable const char *const
DDS_PROPERTY_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_PropertyQosPolicy);

struct DDS_PropertyQosPolicy {
    /*e \dref_PropertyQosPolicy_value
    */
    struct DDS_PropertySeq value;
    
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_PropertyQosPolicy)
};


        
#define DDS_PROPERTY_QOS_POLICY_DEFAULT {DDS_SEQUENCE_INITIALIZER}


extern DDSCDllExport
void DDS_PropertyQosPolicy_save(
        const struct DDS_PropertyQosPolicy *self, 
        const struct DDS_PropertyQosPolicy *base,
        struct RTIXMLSaveContext *dst);

extern DDSCDllExport 
DDS_Long DDS_PropertyQosPolicyHelper_get_number_of_properties(
        const struct DDS_PropertyQosPolicy *policy);

extern DDSCDllExport 
DDS_ReturnCode_t DDS_PropertyQosPolicyHelper_assert_property(
        struct DDS_PropertyQosPolicy *policy,
        const char *name,const char *value,
        DDS_Boolean propagate);

extern DDSCDllExport 
DDS_ReturnCode_t DDS_PropertyQosPolicyHelper_add_property(
        struct DDS_PropertyQosPolicy *policy,
        const char *name, const char *value,
        DDS_Boolean propagate);

extern DDSCDllExport DDS_ReturnCode_t
DDS_PropertyQosPolicyHelper_assert_pointer_property(
        struct DDS_PropertyQosPolicy *policy,
        const char *name,
        const void *pointer);

extern DDSCDllExport DDS_ReturnCode_t
DDS_PropertyQosPolicyHelper_add_pointer_property(
        struct DDS_PropertyQosPolicy *policy,
        const char *name,
        const void *pointer);

extern DDSCDllExport 
        struct DDS_Property_t *DDS_PropertyQosPolicyHelper_lookup_property(
        struct DDS_PropertyQosPolicy *policy,
        const char *name);

extern DDSCDllExport
struct DDS_Property_t* DDS_PropertyQosPolicyHelper_lookup_property_with_prefix(
        struct DDS_PropertyQosPolicy *policy,
        const char *prefix, 
        const char *name);

extern DDSCDllExport 
DDS_ReturnCode_t DDS_PropertyQosPolicyHelper_remove_property(
        struct DDS_PropertyQosPolicy * policy,
        const char *name);

extern DDSCDllExport DDS_ReturnCode_t
DDS_PropertyQosPolicyHelper_get_properties(
        struct DDS_PropertyQosPolicy *policy,
        struct DDS_PropertySeq *properties,
        const char *name_prefix);


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_EndpointGroup_t);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_EndpointGroup_t {
    /*e \dref_EndpointGroup_t_role_name
     */
    char* role_name;
    /*e \dref_EndpointGroup_t_quorum_count
     */
    int quorum_count;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_EndpointGroup_t)
};


DDS_SEQUENCE(DDS_EndpointGroupSeq, struct DDS_EndpointGroup_t);
#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

 extern DDSCDllVariable const char *const
DDS_AVAILABILITY_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_AvailabilityQosPolicy);

struct DDS_AvailabilityQosPolicy {
    /*e \dref_AvailabilityQosPolicy_enable_required_subscriptions
    */
    DDS_Boolean enable_required_subscriptions;
    /*e \dref_AvailabilityQosPolicy_max_data_availability_waiting_time
     */
    struct DDS_Duration_t max_data_availability_waiting_time;
    /*e \dref_AvailabilityQosPolicy_max_endpoint_availability_waiting_time
     */
    struct DDS_Duration_t max_endpoint_availability_waiting_time;
    /*e \dref_AvailabilityQosPolicy_required_matched_endpoint_groups
    */
    struct DDS_EndpointGroupSeq required_matched_endpoint_groups;
    
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_AvailabilityQosPolicy)
};


        
#define DDS_AVAILABILITY_QOS_POLICY_DEFAULT { \
  DDS_BOOLEAN_FALSE, /*enable_required_subscriptions */ \
  { 0xffffffffL, 0UL }, /* max_data_availability_waiting_time */\
  { 0xffffffffL, 0UL }, /* max_endpoint_availability_waiting_time */ \
  DDS_SEQUENCE_INITIALIZER /* required_matched_endpoint_groups */ \
}


extern DDSCDllExport
void DDS_AvailabilityQosPolicy_save(const struct DDS_AvailabilityQosPolicy* self,
                                    const struct DDS_AvailabilityQosPolicy* base,
                                    struct RTIXMLSaveContext* dst);


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_ContentFilterProperty_t);

struct DDS_ContentFilterProperty_t {
    
    /*e \dref_ContentFilterProperty_t_content_filter_topic_name
     */
    char *content_filter_topic_name;

    /*e \dref_ContentFilterProperty_t_related_topic_name
     */
    char *related_topic_name;

    /*e \dref_ContentFilterProperty_t_filter_class_name
     */
    char *filter_class_name;

    /*e \dref_ContentFilterProperty_t_filter_expression
     */
    char *filter_expression;

    /*e \dref_ContentFilterProperty_t_expression_parameters
     */
    struct DDS_StringSeq expression_parameters;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_ContentFilterProperty_t)
};


#define DDS_CONTENT_FILTER_PROPERTY_DEFAULT \
{ \
  NULL, \
  NULL, \
  NULL, \
  NULL, \
  DDS_SEQUENCE_INITIALIZER \
}

extern DDSCDllExport
DDS_Boolean DDS_ContentFilterProperty_equals(
    const struct DDS_ContentFilterProperty_t* left,
    const struct DDS_ContentFilterProperty_t* right);

struct DDS_Listener {
    /*ce \dref_Listener_listener_data
     */
    void* listener_data; 
};


#define DDS_Listener_INITIALIZER    { NULL }

typedef struct DDS_EntityImpl DDS_Entity;

typedef struct DDS_DomainEntityImpl DDS_DomainEntity;

typedef struct DDS_ConditionImpl DDS_Condition;

typedef struct DDS_ConditionImpl* DDS_Condition_ptr;


DDS_SEQUENCE(DDS_ConditionSeq, DDS_Condition_ptr);


typedef void (*DDS_ConditionHandler_OnConditionTriggeredCallback)(
        void * handler_data,
        DDS_Condition * condition);


struct DDS_ConditionHandler {
    /*ce \dref_ConditionHandler_handler_data
     */
    void * handler_data;

    /*ce \dref_ConditionHandler_on_condition_triggered
     */
    DDS_ConditionHandler_OnConditionTriggeredCallback on_condition_triggered;
};


#define DDS_ConditionHandler_INITIALIZER  {NULL, NULL}

extern DDSCDllExport DDS_Boolean DDS_Condition_get_trigger_value(
    DDS_Condition* self);

extern DDSCDllExport
DDS_ReturnCode_t DDS_Condition_set_handler(
    DDS_Condition* self,
    const struct DDS_ConditionHandler *handler);

extern DDSCDllExport
struct DDS_ConditionHandler DDS_Condition_get_handler(
    DDS_Condition* self);

extern DDSCDllExport
void DDS_Condition_dispatch(
    DDS_Condition* self);

typedef struct DDS_GuardConditionImpl DDS_GuardCondition;


#define DDS_GuardCondition_as_condition(guardConditionPtr) \
            ((DDS_Condition*) guardConditionPtr)

extern DDSCDllExport DDS_GuardCondition* DDS_GuardCondition_new();

extern DDSCDllExport DDS_ReturnCode_t DDS_GuardCondition_delete(DDS_GuardCondition* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_GuardCondition_set_trigger_value(
    DDS_GuardCondition* self, DDS_Boolean value);

typedef struct DDS_StatusConditionImpl DDS_StatusCondition;


#define DDS_StatusCondition_as_condition(statusConditionPtr) \
            ((DDS_Condition*) statusConditionPtr)

extern DDSCDllExport DDS_StatusMask 
DDS_StatusCondition_get_enabled_statuses(
    DDS_StatusCondition* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_StatusCondition_set_enabled_statuses(
    DDS_StatusCondition* self, DDS_StatusMask mask);

extern DDSCDllExport DDS_Entity* DDS_StatusCondition_get_entity(
    DDS_StatusCondition* self);

typedef struct DDS_WaitSetImpl DDS_WaitSet;

struct DDS_WaitSetProperty_t {

    /*e \dref_WaitSetProperty_t_max_event_count;
     */
    long max_event_count;

    /*e \dref_WaitSetProperty_t_max_event_delay;
     */
    struct DDS_Duration_t max_event_delay;
};


#define DDS_WaitSetProperty_t_INITIALIZER   {  \
   1, { 0x7fffffffL, 0x7fffffffUL } \
}

extern DDSCDllExport
void DDS_WaitSetProperty_save(const struct DDS_WaitSetProperty_t *self,
                              struct RTIXMLSaveContext* dst);

extern DDSCDllExport
RTIBool DDS_WaitSetProperty_is_equal(const struct DDS_WaitSetProperty_t *self,
                                     const struct DDS_WaitSetProperty_t *other);

extern DDSCDllExport DDS_WaitSet* DDS_WaitSet_new();

extern DDSCDllExport
DDS_WaitSet* DDS_WaitSet_new_ex(const struct DDS_WaitSetProperty_t *prop);

extern DDSCDllExport DDS_ReturnCode_t DDS_WaitSet_delete(DDS_WaitSet* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_WaitSet_set_property(
    DDS_WaitSet* self,
    const struct DDS_WaitSetProperty_t *prop);

extern DDSCDllExport DDS_ReturnCode_t DDS_WaitSet_get_property(
    DDS_WaitSet* self,
    struct DDS_WaitSetProperty_t *prop);

extern DDSCDllExport DDS_ReturnCode_t DDS_WaitSet_wait(
    DDS_WaitSet* self,
    struct DDS_ConditionSeq* active_conditions, 
    const struct DDS_Duration_t* timeout);

extern DDSCDllExport DDS_ReturnCode_t DDS_WaitSet_attach_condition(
    DDS_WaitSet* self,
    DDS_Condition* cond);

extern DDSCDllExport DDS_ReturnCode_t DDS_WaitSet_detach_condition(
    DDS_WaitSet* self,
    DDS_Condition* cond);

extern DDSCDllExport DDS_ReturnCode_t DDS_WaitSet_get_conditions(
    DDS_WaitSet* self, struct DDS_ConditionSeq* attached_conditions);

extern DDSCDllExport DDS_ReturnCode_t DDS_Entity_enable(DDS_Entity* self);

extern DDSCDllExport DDS_StatusCondition* DDS_Entity_get_statuscondition(
    DDS_Entity* self);

extern DDSCDllExport DDS_StatusMask DDS_Entity_get_status_changes(
    DDS_Entity* self);

extern DDSCDllExport DDS_InstanceHandle_t DDS_Entity_get_instance_handle(
    DDS_Entity* self);

extern DDSCDllExport DDS_EntityKind_t DDS_Entity_get_entity_kind(
    DDS_Entity* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Entity_lock(
    DDS_Entity* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Entity_unlock(
    DDS_Entity* self);

extern DDSCDllExport 
void DDS_Entity_instance_handle_to_participant_instance_handle(
   const DDS_InstanceHandle_t * from,
   DDS_InstanceHandle_t * to);

 extern DDSCDllVariable const char *const
DDS_ENTITYNAME_QOS_POLICY_NAME;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_EntityNameQosPolicy);

struct DDS_EntityNameQosPolicy {
    /*e \dref_EntityNameQosPolicy_name
     */
    char* name;

    /*e \dref_EntityNameQosPolicy_role_name
     */
    char* role_name;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_EntityNameQosPolicy)
};


#define DDS_ENTITY_NAME_QOS_POLICY_DEFAULT   { NULL, NULL }

extern DDSCDllExport
void DDS_EntityNameQosPolicy_save(const char * tag_name,
                                  const struct DDS_EntityNameQosPolicy* self,
                                  const struct DDS_EntityNameQosPolicy* base,
                                  struct RTIXMLSaveContext* dst);

 extern DDSCDllVariable const char *const
DDS_LOGGING_QOS_POLICY_NAME;

 extern DDSCDllVariable const char *const
DDS_PROFILE_QOS_POLICY_NAME;

struct DDS_ProfileQosPolicy {
    /*e \dref_ProfileQosPolicy_string_profile
    */
    struct DDS_StringSeq string_profile;

    /*e \dref_ProfileQosPolicy_url_profile
    */
    struct DDS_StringSeq url_profile;

    /*e \dref_ProfileQosPolicy_ignore_user_profile
    */
    DDS_Boolean ignore_user_profile;
    
    /*e \dref_ProfileQosPolicy_ignore_environment_profile
    */
    DDS_Boolean ignore_environment_profile;

    /*e \dref_ProfileQosPolicy_ignore_resource_profile
    */
    DDS_Boolean ignore_resource_profile;

    /*i \dref_ProfileQosPolicy_string_profile_dtd
    */
    struct DDS_StringSeq string_profile_dtd;

    /*i
     */
    DDS_Boolean ignore_is_default_qos_attribute;

};


#define DDS_PROFILE_QOS_POLICY_DEFAULT \
{ \
  DDS_SEQUENCE_INITIALIZER,\
  DDS_SEQUENCE_INITIALIZER,\
  DDS_BOOLEAN_FALSE,\
  DDS_BOOLEAN_FALSE,\
  DDS_BOOLEAN_FALSE,\
  DDS_SEQUENCE_INITIALIZER,\
  DDS_BOOLEAN_FALSE\
}

extern DDSCDllExport
void DDS_ProfileQosPolicy_initialize(struct DDS_ProfileQosPolicy* self);

extern DDSCDllExport
void DDS_ProfileQosPolicy_finalize(struct DDS_ProfileQosPolicy* self);

extern DDSCDllExport
struct DDS_ProfileQosPolicy*
DDS_ProfileQosPolicy_copy(struct DDS_ProfileQosPolicy* self,
                            const struct DDS_ProfileQosPolicy* from);

extern DDSCDllExport
DDS_Boolean DDS_ProfileQosPolicy_equals(
    const struct DDS_ProfileQosPolicy* left,
    const struct DDS_ProfileQosPolicy* right);

 extern DDSCDllVariable const char *const
DDS_TOPICQUERYDISPATCH_QOS_POLICY_NAME;

struct DDS_TopicQueryDispatchQosPolicy {
    /*e \dref_TopicQueryDispatchQosPolicy_enable
     */
    DDS_Boolean enable;

    /*e \dref_TopicQueryDispatchQosPolicy_publication_period
     */
    struct DDS_Duration_t publication_period;

    /*e \dref_TopicQueryDispatchQosPolicy_samples_per_period
     */
    DDS_Long samples_per_period;
};


#define DDS_TOPIC_QUERY_DISPATCH_QOS_POLICY_DEFAULT \
{ DDS_BOOLEAN_FALSE, {1L,0UL}, -1L }

extern DDSCDllExport
void DDS_TopicQueryDispatchQosPolicy_save(const struct DDS_TopicQueryDispatchQosPolicy* self,
                                    const struct DDS_TopicQueryDispatchQosPolicy* base,
                                    struct RTIXMLSaveContext* dst);

struct DDS_SampleIdentity_t;

extern DDSCDllExport DDS_Boolean
DDS_SampleIdentity_equals(const struct DDS_SampleIdentity_t* self,
                          const struct DDS_SampleIdentity_t* other);


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_SampleIdentity_t);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_SampleIdentity_t {
    /*e \dref_SampleIdentity_t_writer_guid */
    struct DDS_GUID_t writer_guid;
    /*e \dref_SampleIdentity_t_sequence_number */
    struct DDS_SequenceNumber_t sequence_number;

#ifdef RTI_CPP
    inline bool operator==(const DDS_SampleIdentity_t& r) const {
        if (DDS_SampleIdentity_equals(this, &r)) {
            return true;
        }

        return false;
    };

    inline bool operator!=(const DDS_SampleIdentity_t& r) const {
        if (DDS_SampleIdentity_equals(this, &r)) {
            return false;
        }

        return true;
    };
#endif

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_SampleIdentity_t)
};

 
#define DDS_SAMPLEIDENTITY_DEFAULT { \
    DDS_GUID_DEFAULT, \
    DDS_SEQUENCENUMBER_DEFAULT, \
}


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

 extern DDSCDllVariable const struct DDS_SampleIdentity_t DDS_AUTO_SAMPLE_IDENTITY;

 extern DDSCDllVariable const struct DDS_SampleIdentity_t DDS_UNKNOWN_SAMPLE_IDENTITY;

struct DDS_MessageIdentity;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT_W_ERROR_CHECKING(DDS_MessageIdentity);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_MessageIdentity {
    /*e \dref_MessageIdentity_source_guid */
    DDS_GUID_t source_guid;
    /*e \dref_MessageIdentity_sequence_number */
    DDS_LongLong sequence_number;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_MessageIdentity)
};


#define DDS_MESSAGEIDENTITY_DEFAULT { \
    DDS_BuiltinTopicKey_t_INITIALIZER, \
    0xffffffffffffffff \
}


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_Cookie_t);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_Cookie_t {
    /*e \dref_Cookie_t_value
     */
    struct DDS_OctetSeq value;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_Cookie_t)
};


#define DDS_COOKIE_DEFAULT { DDS_SEQUENCE_INITIALIZER }


DDS_SEQUENCE(DDS_CookieSeq, struct DDS_Cookie_t);
#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

extern DDSCDllExport DDS_Boolean
DDS_Cookie_equals(const struct DDS_Cookie_t* self,
                  const struct DDS_Cookie_t* other);


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_AckResponseData_t);

struct DDS_AckResponseData_t {
    /*e \dref_AckResponseData_t_value
     */
    struct DDS_OctetSeq value;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_AckResponseData_t)
};


#define DDS_ACK_RESPONSE_DATA_DEFAULT { DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport DDS_Boolean
DDS_AckResponseData_equals(const struct DDS_AckResponseData_t* self,
                  const struct DDS_AckResponseData_t* other);

typedef enum DDS_SampleFlagBits {
    /*e \dref_SampleFlagBits_REDELIVERED_SAMPLE
     */
    DDS_REDELIVERED_SAMPLE = PRES_REDELIVERED_SAMPLE,
    /*e \dref_SampleFlagBits_INTERMEDIATE_REPLY_SEQUENCE_SAMPLE
     */
    DDS_INTERMEDIATE_REPLY_SEQUENCE_SAMPLE = PRES_INTERMEDIATE_REPLY_SEQUENCE_SAMPLE,
    /*e \dref_SampleFlagBits_REPLICATE_SAMPLE
     */
    DDS_REPLICATE_SAMPLE = PRES_REPLICATE_SAMPLE,
    /*e \dref_SampleFlagBits_LAST_SHARED_READER_QUEUE_SAMPLE
     */
    DDS_LAST_SHARED_READER_QUEUE_SAMPLE = PRES_LAST_SHARED_READER_QUEUE_SAMPLE,
    /*e \dref_SampleFlagBits_INTERMEDIATE_TOPIC_QUERY_SAMPLE
     */
    DDS_INTERMEDIATE_TOPIC_QUERY_SAMPLE = PRES_INTERMEDIATE_TOPIC_QUERY_SAMPLE
} DDS_SampleFlagBits;

typedef DDS_Long DDS_SampleFlag;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_WriteParams_t);

struct DDS_WriteParams_t {
    /*e \dref_WriteParams_replace_auto
    */
    DDS_Boolean replace_auto;
    /*e \dref_WriteParams_identity
    */
    struct DDS_SampleIdentity_t identity;
    /*e \dref_WriteParams_related_sample_identity
    */
    struct DDS_SampleIdentity_t related_sample_identity;
    /*e \dref_WriteParams_source_timestamp
     */
    struct DDS_Time_t source_timestamp;

    /*i \dref_WriteParams_cookie
     */
    struct DDS_Cookie_t cookie;

    /*e \dref_WriteParams_handle
     */
    DDS_InstanceHandle_t handle;

    /*e \dref_WriteParams_priority
     */
    DDS_Long priority;

    /*i \dref_WriteParams_flush_on_write
     */
    DDS_Boolean flush_on_write;
    
    /*e \dref_WriteParams_flag
     */
    DDS_SampleFlag flag;
    
    /*e \dref_WriteParams_source_guid
     */
    struct DDS_GUID_t source_guid;
    /*e \dref_WriteParams_related_source_guid
     */
    struct DDS_GUID_t related_source_guid;
    /*e \dref_WriteParams_related_reader_guid
     */
    struct DDS_GUID_t related_reader_guid;

    /*i \dref_WriteParams_topic_query_guid
     */
    struct DDS_GUID_t topic_query_guid;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_WriteParams_t)
};

 extern DDSCDllVariable const struct DDS_WriteParams_t
DDS_WRITEPARAMS_DEFAULT;

extern DDSCDllExport DDS_Boolean
DDS_WriteParams_equals(const struct DDS_WriteParams_t* self,
                       const struct DDS_WriteParams_t* other);

extern DDSCDllExport
void DDS_WriteParams_reset(struct DDS_WriteParams_t* self);

typedef struct DDS_DomainParticipantImpl DDS_DomainParticipant;

typedef DDS_DomainParticipant* DDS_DomainParticipant_ptr;


DDS_SEQUENCE(DDS_DomainParticipantSeq, DDS_DomainParticipant_ptr);

extern DDSCDllExport void *
DDS_Heap_calloc(size_t numElem, size_t size);

extern DDSCDllExport void *
DDS_Heap_malloc(size_t size);

extern DDSCDllExport
void DDS_Heap_free(void *ptr);

 extern DDSCDllVariable const char *const
    DDS_BUILTIN_QOS_LIB;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_BASELINE_ROOT;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_BASELINE;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_BASELINE_5_0_0;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_BASELINE_5_1_0;

 extern DDSCDllVariable const char *const
    DDS_PROFILE_BASELINE_5_2_0;

 extern DDSCDllVariable const char *const
    DDS_PROFILE_BASELINE_5_3_0;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_COMMON;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_MONITORING_COMMON;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_CONNEXT_MICRO_COMPATIBILITY;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_CONNEXT_MICRO_COMPATIBILITY_2_4_9;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_CONNEXT_MICRO_COMPATIBILITY_2_4_3;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_OTHER_DDS_VENDOR_COMPATIBILITY;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_510_TRANSPORT_COMPATIBILITY;

 extern DDSCDllVariable const char *const 
    DDS_BUILTIN_QOS_LIB_EXP;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_STRICT_RELIABLE;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_KEEP_LAST_RELIABLE;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_BEST_EFFORT;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_STRICT_RELIABLE_HIGH_THROUGHPUT;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_STRICT_RELIABLE_LOW_LATENCY;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_PARTICIPANT_LARGE_DATA;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_PARTICIPANT_LARGE_DATA_MONITORING;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_STRICT_RELIABLE_LARGE_DATA;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_KEEP_LAST_RELIABLE_LARGE_DATA;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_STRICT_RELIABLE_LARGE_DATA_FAST_FLOW;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_STRICT_RELIABLE_LARGE_DATA_MEDIUM_FLOW;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_STRICT_RELIABLE_LARGE_DATA_SLOW_FLOW;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_KEEP_LAST_RELIABLE_LARGE_DATA_FAST_FLOW;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_KEEP_LAST_RELIABLE_LARGE_DATA_MEDIUM_FLOW;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_KEEP_LAST_RELIABLE_LARGE_DATA_SLOW_FLOW;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_KEEP_LAST_RELIABLE_TRANSIENT_LOCAL;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_KEEP_LAST_RELIABLE_TRANSIENT;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_KEEP_LAST_RELIABLE_PERSISTENT;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_GENERIC_AUTO_TUNING;

 extern DDSCDllVariable const char *const
    DDS_PROFILE_GENERIC_MINIMAL_MEMORY_FOOTPRINT;

 extern DDSCDllVariable const char *const
    DDS_PROFILE_GENERIC_SECURITY;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_PATTERN_PERIODIC_DATA;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_PATTERN_STREAMING;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_PATTERN_RELIABLE_STREAMING;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_PATTERN_EVENT;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_PATTERN_ALARM_EVENT;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_PATTERN_STATUS;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_PATTERN_ALARM_STATUS;

 extern DDSCDllVariable const char *const 
    DDS_PROFILE_PATTERN_LAST_VALUE_CACHE;

 extern DDSCDllVariable const int DDS_DOMAIN_ID_USE_XML_CONFIG;

 extern DDSCDllVariable const char * DDS_ENTITY_NAME_USE_XML_CONFIG;

 extern DDSCDllVariable const char * DDS_QOS_ELEMENT_NAME_USE_XML_CONFIG;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_DomainParticipantConfigParams_t);


struct DDS_DomainParticipantConfigParams_t {
    
    /*e \dref_DomainParticipantConfigParams_domain_id
     */
    int domain_id;
    
    /*e \dref_DomainParticipantConfigParams_participant_name
     */
    char * participant_name;
    
    /*e \dref_DomainParticipantConfigParams_participant_qos_library_name 
     */
    char * participant_qos_library_name;
    
    /*e \dref_DomainParticipantConfigParams_participant_qos_profile_name
     */
    char * participant_qos_profile_name;
    
    /*e \dref_DomainParticipantConfigParams_domain_entity_qos_library_name
     */
    char * domain_entity_qos_library_name;
    
    /*e \dref_DomainParticipantConfigParams_domain_entity_qos_profile_name 
     */
    char * domain_entity_qos_profile_name;
    
    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(
            DDS_DomainParticipantConfigParams_t)
};


/*e \dref_DomainParticipantConfigParams_INITIALIZER
 */
#define DDS_DomainParticipantConfigParams_t_INITIALIZER { \
        0, \
        NULL, \
        NULL, \
        NULL, \
        NULL, \
        NULL \
    }


typedef void * (*DDS_ThreadFactory_OnSpawnedFunction) (void * thread_param);


typedef void * (*DDS_ThreadFactory_CreateThreadCallback)(
        void * factory_data,
        const char * thread_name,
        const struct DDS_ThreadSettings_t * settings,
        DDS_ThreadFactory_OnSpawnedFunction on_spawned,
        void * threadParam);


typedef void (*DDS_ThreadFactory_DeleteThreadCallback)(
        void * factory_data,
        void * thread);


#define DDS_ThreadFactory_INITIALIZER    { NULL, NULL, NULL }


struct DDS_ThreadFactory {
    /*ce \dref_ThreadFactory_factory_data
     */
    void * factory_data;

    /*ce \dref_ThreadFactory_create_thread
     */
    DDS_ThreadFactory_CreateThreadCallback create_thread;
    
    /*ce \dref_ThreadFactory_delete_thread
     */
    DDS_ThreadFactory_DeleteThreadCallback delete_thread;
};


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

struct DDS_BinaryProperty_t {
    /*i \dref_BinaryProperty_t_name
     */
    char *name;

    /*i \dref_BinaryProperty_t_value
     */
    struct DDS_OctetSeq value;

    /*i \dref_BinaryProperty_t_propagate
     */
    DDS_Boolean propagate;
};


DDS_SEQUENCE(DDS_BinaryPropertySeq, struct DDS_BinaryProperty_t);

struct DDS_DataHolder;


DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT_W_ERROR_CHECKING(DDS_DataHolder);

struct DDS_DataHolder {
    /*i \dref_DataHolder_class_id */
    char *class_id;
    /*i \dref_DataHolder_properties */
    struct DDS_PropertySeq properties;
    /*i \dref_DataHolder_binary_properties */
    struct DDS_BinaryPropertySeq binary_properties;

    DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(DDS_DataHolder)
};


#define DDS_DATAHOLDER_DEFAULT { \
    NULL, \
    DDS_SEQUENCE_INITIALIZER, \
    DDS_SEQUENCE_INITIALIZER \
}


DDS_SEQUENCE(DDS_DataHolderSeq, struct DDS_DataHolder);

extern DDSCDllExport
DDS_Boolean DDS_DataHolderSeq_serialize_to_cdr_buffer(
    char *buffer,
    int *length,
    const struct DDS_DataHolderSeq *sample);

extern DDSCDllExport
DDS_Boolean DDS_DataHolderSeq_deserialize_from_cdr_buffer(
    struct DDS_DataHolderSeq *sample,
    const char *buffer,
    int length);


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

typedef DDS_SAMPLE_HASH_TYPE_NATIVE DDS_Hash;

typedef DDS_SAMPLE_SIGNATURE_TYPE_NATIVE DDS_SampleSignature;


#ifdef __cplusplus
    }   /* extern "C" */
#endif

#endif /* dds_c_infrastructure_h */
