/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)dds_c_typeobject.h    generated by: makeheader    Fri Feb 16 13:51:58 2018
 *
 *		built from:	typeobject.ifc
 */

#ifndef dds_c_typeobject_h
#define dds_c_typeobject_h


#include "dds_c/dds_c_common.h"
#include "dds_c/dds_c_infrastructure.h"

#ifndef cdr_typeObject_h
  #include "cdr/cdr_typeObject.h"
#endif

#ifndef dds_c_typecode_h
  #include "dds_c/dds_c_typecode.h"
#endif

#ifndef dds_c_sequence_h
  #include "dds_c/dds_c_sequence.h"
#endif

#ifdef __cplusplus
    extern "C" {
#endif


typedef DDS_Short  DDS_TypeKind;


#define DDS_NO_TYPE (0)                
#define DDS_BOOLEAN_TYPE (1)                
#define DDS_BYTE_TYPE (2)                
#define DDS_INT_16_TYPE (3)                
#define DDS_UINT_16_TYPE (4)                
#define DDS_INT_32_TYPE (5)                
#define DDS_UINT_32_TYPE (6)                
#define DDS_INT_64_TYPE (7)                
#define DDS_UINT_64_TYPE (8)                
#define DDS_FLOAT_32_TYPE (9)                
#define DDS_FLOAT_64_TYPE (10)                
#define DDS_FLOAT_128_TYPE (11)                
#define DDS_CHAR_8_TYPE (12)                
#define DDS_CHAR_32_TYPE (13)                
#define DDS_ENUMERATION_TYPE (14)                
#define DDS_BITSET_TYPE (15)                
#define DDS_ALIAS_TYPE (16)                
#define DDS_ARRAY_TYPE (17)                
#define DDS_SEQUENCE_TYPE (18)                
#define DDS_STRING_TYPE (19)                
#define DDS_MAP_TYPE (20)                
#define DDS_UNION_TYPE (21)                
#define DDS_STRUCTURE_TYPE (22)                
#define DDS_ANNOTATION_TYPE (23)                


#define DDS_ELEMENT_NAME_MAX_LENGTH (256)                

typedef char *  DDS_ObjectName;

typedef DDS_Short DDS_PrimitiveTypeId;


#define DDS_NO_TYPE_ID ((DDS_NO_TYPE))                
#define DDS_BOOLEAN_TYPE_ID ((DDS_BOOLEAN_TYPE))                
#define DDS_BYTE_TYPE_ID ((DDS_BYTE_TYPE))                
#define DDS_INT_16_TYPE_ID ((DDS_INT_16_TYPE))                
#define DDS_UINT_16_TYPE_ID ((DDS_UINT_16_TYPE))                
#define DDS_INT_32_TYPE_ID ((DDS_INT_32_TYPE))                
#define DDS_UINT_32_TYPE_ID ((DDS_UINT_32_TYPE))                
#define DDS_INT_64_TYPE_ID ((DDS_INT_64_TYPE))                
#define DDS_UINT_64_TYPE_ID ((DDS_UINT_64_TYPE))                
#define DDS_FLOAT_32_TYPE_ID ((DDS_FLOAT_32_TYPE))                
#define DDS_FLOAT_64_TYPE_ID ((DDS_FLOAT_64_TYPE))                
#define DDS_FLOAT_128_TYPE_ID ((DDS_FLOAT_128_TYPE))                
#define DDS_CHAR_8_TYPE_ID ((DDS_CHAR_8_TYPE))                
#define DDS_CHAR_32_TYPE_ID ((DDS_CHAR_32_TYPE))                

typedef struct DDS_TypeId {
    DDS_TypeKind _d;
    union DDS_TypeId_u
    {
        DDS_PrimitiveTypeId  primitive_type_id;
        DDS_UnsignedLongLong  constructed_type_id;
    } _u;
} DDS_TypeId;

typedef DDS_UnsignedLong  DDS_MemberId;


#define DDS_MEMBER_ID_INVALID (0x0FFFFFFF)                


#define DDS_MAX_MEMBER_ID (0x0FFFBFFF)

typedef struct DDS_AnnotationMemberValue {
    DDS_TypeKind _d;
    union DDS_AnnotationMemberValue_u
    {
        DDS_Boolean  boolean_value;
        DDS_Octet  byte_value;
        DDS_Short  int_16_value;
        DDS_UnsignedShort  uint_16_value;
        DDS_Long  int_32_value;
        DDS_UnsignedLong  uint_32_value;
        DDS_LongLong  int_64_value;
        DDS_UnsignedLongLong  uint_64_value;
        DDS_Float  float_32_value;
        DDS_Double  float_64_value;
        DDS_LongDouble  float_128_value;
        DDS_Char  character_value;
        DDS_Wchar  wide_character_value;
        DDS_Long  enumeration_value;
        DDS_Wchar *  string_value;
    } _u;
} DDS_AnnotationMemberValue;

typedef struct DDS_AnnotationUsageMember
{
    DDS_MemberId  member_id;
    DDS_AnnotationMemberValue  value;
} DDS_AnnotationUsageMember;


DDS_SEQUENCE_IN_C(DDS_AnnotationUsageMemberSeq, DDS_AnnotationUsageMember);

typedef struct DDS_AnnotationUsage
{
    DDS_TypeId  type_id;
    struct DDS_AnnotationUsageMemberSeq  member;
} DDS_AnnotationUsage;


DDS_SEQUENCE_IN_C(DDS_AnnotationUsageSeq, DDS_AnnotationUsage);

typedef enum DDS_TypeFlagBits
{
    DDS_IS_FINAL = (1 << 0),
    DDS_IS_MUTABLE = (1 << 1),
    DDS_IS_NESTED = (1 << 2)
} DDS_TypeFlagBits;

typedef unsigned short DDS_TypeFlag;

typedef struct DDS_TypeProperty
{
    DDS_TypeFlag  flag;
    DDS_TypeId  type_id;
    DDS_ObjectName  name;
} DDS_TypeProperty;

typedef struct DDS_Type
{
    DDS_TypeProperty  property;
    struct DDS_AnnotationUsageSeq  annotation;
} DDS_Type;

typedef enum DDS_MemberFlagBits
{
    DDS_IS_KEY = (1 << 0),
    DDS_IS_OPTIONAL = (1 << 1),
    DDS_IS_SHAREABLE = (1 << 2),
    DDS_IS_UNION_DEFAULT = (1 << 3)
} DDS_MemberFlagBits;

typedef unsigned short DDS_MemberFlag;

typedef struct DDS_MemberProperty
{
    DDS_MemberFlag  flag;
    DDS_MemberId  member_id;
    DDS_TypeId  type_id;
    DDS_ObjectName  name;
} DDS_MemberProperty;

typedef struct DDS_Member
{
    DDS_MemberProperty  property;
    struct DDS_AnnotationUsageSeq  annotation;
} DDS_Member;


DDS_SEQUENCE_IN_C(DDS_MemberSeq, DDS_Member);

typedef struct DDS_StructureType
{
    DDS_Type parent;
    DDS_TypeId  base_type;
    struct DDS_MemberSeq  member;
} DDS_StructureType;

typedef struct DDS_TypeObjectUnionMember
{
    DDS_Member parent;
    struct DDS_LongSeq  label;
} DDS_TypeObjectUnionMember;


#if defined(RTI_WIN32) || defined(RTI_WINCE)
  #pragma warning(push)
  #pragma warning(disable:4190)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

DDS_SEQUENCE_IN_C(DDS_TypeObjectUnionMemberSeq, DDS_TypeObjectUnionMember);

#if defined(RTI_WIN32) || defined(RTI_WINCE)
  /* restore extern "C"-related warning */
  #pragma warning(pop)
#elif defined(RTI_DARWIN)
  #pragma clang diagnostic pop
#endif

typedef struct DDS_UnionType
{
    DDS_Type parent;
    struct DDS_TypeObjectUnionMemberSeq  member;
} DDS_UnionType;

typedef struct DDS_AnnotationMember
{
    DDS_Member parent;
    DDS_AnnotationMemberValue  default_value;
} DDS_AnnotationMember;


DDS_SEQUENCE_IN_C(DDS_AnnotationMemberSeq, DDS_AnnotationMember);

typedef struct DDS_AnnotationType
{
    DDS_Type parent;
    DDS_TypeId  base_type;
    struct DDS_AnnotationMemberSeq  member;
} DDS_AnnotationType;

typedef struct DDS_AliasType
{
    DDS_Type parent;
    DDS_TypeId  base_type;
} DDS_AliasType;

typedef DDS_UnsignedLong  DDS_Bound;


DDS_SEQUENCE_IN_C(DDS_BoundSeq, DDS_Bound);                                        


#define DDS_UNBOUNDED_COLLECTION (0)                

typedef struct DDS_CollectionType
{
    DDS_Type parent;
    DDS_TypeId  element_type;
    DDS_Boolean  element_shared;
} DDS_CollectionType;

typedef struct DDS_ArrayType
{
    DDS_CollectionType parent;
    struct DDS_BoundSeq  bound;
} DDS_ArrayType;

typedef struct DDS_MapType
{
    DDS_CollectionType parent;
    DDS_TypeId  key_element_type;
    DDS_Bound  bound;
} DDS_MapType;

typedef struct DDS_SequenceType
{
    DDS_CollectionType parent;
    DDS_Bound  bound;
} DDS_SequenceType;

typedef struct DDS_StringType
{
    DDS_CollectionType parent;
    DDS_Bound  bound;
} DDS_StringType;

typedef struct DDS_Bit
{
    DDS_Long  index;
    DDS_ObjectName  name;
} DDS_Bit;


DDS_SEQUENCE_IN_C(DDS_BitSeq, DDS_Bit);

typedef struct DDS_BitSetType
{
    DDS_Type parent;
    DDS_Bound  bit_bound;
    struct DDS_BitSeq  bit;
} DDS_BitSetType;

typedef struct DDS_EnumeratedConstant
{
    DDS_Long  value;
    DDS_ObjectName  name;
} DDS_EnumeratedConstant;


DDS_SEQUENCE_IN_C(DDS_EnumeratedConstantSeq, DDS_EnumeratedConstant);

typedef struct DDS_EnumerationType
{
    DDS_Type parent;
    DDS_Bound  bit_bound;
    struct DDS_EnumeratedConstantSeq  constant;
} DDS_EnumerationType;

struct DDS_TypeLibrary;

typedef struct DDS_Module
{
    DDS_ObjectName  name;
    struct  DDS_TypeLibrary * library;
} DDS_Module;

typedef enum DDS_TypeLibraryElementKind
{
    DDS_ALIAS_TYPE_ELEMENT = 16,
    DDS_ANNOTATION_TYPE_ELEMENT = 23,
    DDS_ARRAY_TYPE_ELEMENT = 17,
    DDS_BITSET_TYPE_ELEMENT = 15,
    DDS_ENUMERATION_TYPE_ELEMENT = 14,
    DDS_MAP_TYPE_ELEMENT = 20,
    DDS_SEQUENCE_TYPE_ELEMENT = 18,
    DDS_STRING_TYPE_ELEMENT = 19,
    DDS_STRUCTURE_TYPE_ELEMENT = 22,
    DDS_UNION_TYPE_ELEMENT = 21,
    DDS_MODULE_ELEMENT = 24
} DDS_TypeLibraryElementKind;

typedef struct DDS_TypeLibraryElement {
    DDS_TypeLibraryElementKind _d;
    union DDS_TypeLibraryElement_u
    {
        DDS_AliasType  alias_type;
        DDS_AnnotationType  annotation_type;
        DDS_ArrayType  array_type;
        DDS_BitSetType  bitset_type;
        DDS_EnumerationType  enumeration_type;
        DDS_MapType  map_type;
        DDS_SequenceType  sequence_type;
        DDS_StringType  string_type;
        DDS_StructureType  structure_type;
        DDS_UnionType  union_type;
        DDS_Module  mod;
    } _u;
} DDS_TypeLibraryElement;


DDS_SEQUENCE_IN_C(DDS_TypeLibraryElementSeq, DDS_TypeLibraryElement);

typedef struct DDS_TypeLibrary
{
    struct DDS_TypeLibraryElementSeq  element;
} DDS_TypeLibrary;

typedef struct DDS_TypeObject
{
    struct  DDS_TypeLibrary * library;
    DDS_TypeId  the_type;
} DDS_TypeObject;

extern DDSCDllExport DDS_TypeObject * 
DDS_TypeObject_create_from_typecode(const DDS_TypeCode *typecode);

extern DDSCDllExport DDS_TypeCode *
DDS_TypeObject_convert_to_typecode(DDS_TypeObject * self);

extern DDSCDllExport
DDS_Boolean DDS_TypeObject_is_assignable(
    DDS_TypeObject * self,
    const DDS_TypeObject * other);


typedef struct RTICdrTypeObjectAssignabilityProperty
    DDS_TypeObjectAssignabilityProperty;

extern DDSCDllExport
DDS_Boolean DDS_TypeObject_is_assignable_w_property(
    DDS_TypeObject * self,
    const DDS_TypeObject * other,
    const DDS_TypeObjectAssignabilityProperty * property);

extern DDSCDllExport DDS_Boolean
DDS_TypeObject_equal(
        DDS_TypeObject * self,
        const DDS_TypeObject * other);

extern DDSCDllExport void
DDS_TypeObject_delete(DDS_TypeObject * self);

extern DDSCDllExport 
DDS_TypeLibraryElement *
DDS_TypeObjectLibrary_find_type(
    DDS_TypeLibrary * self,
    const DDS_TypeId * type_id);

extern DDSCDllExport
unsigned int
DDS_TypeObject_get_serialized_size(
    DDS_TypeObject * self);

extern DDSCDllExport
DDS_ReturnCode_t
DDS_TypeObject_serialize(
    DDS_TypeObject * self,  
    char * ser_buffer,
    unsigned int * ser_buffer_size);

extern DDSCDllExport
int DDS_TypeId_compare(const DDS_TypeId * self, const DDS_TypeId * other);


struct DDS_TypeObjectFactory;

extern DDSCDllExport
struct DDS_TypeObjectFactory * DDS_TypeObjectFactory_new();

extern DDSCDllExport
void DDS_TypeObjectFactory_delete(struct DDS_TypeObjectFactory * self);

extern DDSCDllExport
DDS_TypeObject * DDS_TypeObjectFactory_clone_typeobject(
        struct DDS_TypeObjectFactory * self,
        DDS_TypeObject * src_type_object);

extern DDSCDllExport
DDS_TypeObject * DDS_TypeObjectFactory_create_typeobject_from_serialize_buffer(
        struct DDS_TypeObjectFactory * self,
        const char * ser_buffer,
        unsigned int ser_buffer_size);

extern DDSCDllExport
void DDS_TypeObjectFactory_delete_typeobject(
        struct DDS_TypeObjectFactory * self,
        DDS_TypeObject * type_object);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* dds_c_typeobject_h */
