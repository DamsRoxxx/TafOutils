/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)commend_facade_impl.h    generated by: makeheader    Fri Feb 16 13:51:37 2018
 *
 *		built from:	facade_impl.ifc
 */

#ifndef commend_facade_impl_h
#define commend_facade_impl_h

extern COMMENDDllVariable struct REDAObjectPerWorker *COMMEND_STAT_PER_WORKER;



#ifndef clock_interface_h
  #include "clock/clock_interface.h"
#endif
#ifndef reda_worker_h
  #include "reda/reda_worker.h"
#endif
#ifndef event_jobDispatcher_h
  #include "event/event_jobDispatcher.h"
#endif

#ifdef __cplusplus
    extern "C" {
#endif



/* ---------------------------------------------------------------- */
#define COMMENDWorkerStat_getStorageLazy(statPtr, worker) \
    ( *(statPtr) = (struct COMMENDWorkerStat *)           \
        REDAWorker_assertObject(worker, COMMEND_STAT_PER_WORKER) )

#define COMMENDFacadeProperty_verify(me)                       \
    ( ((me)->hostId != 0) && ((me)->appId != 0) ) 


#define COMMENDFacade_postEvent(me, time, snooze, listener, listenerStorage, \
                                bytesToCompareInReuse) \
    (me)->_eventGenerator->postEvent((me)->_eventGenerator,                  \
                                     time, snooze, listener, listenerStorage,\
                                     bytesToCompareInReuse)

#define COMMENDFacade_removeTokenBucket(me, tokenBucket, worker) \
    RTIEventJobDispatcher_removeTokenBucket((me)->_jobDispatcher, tokenBucket, worker)

/* forward declaration (facade.peer.h) */
int COMMENDWriterServiceJobDispatcherAgentCompareFnc(const void *left, const void *right);
/* forward declaration (facade.peer.h) of JobPriority Compare Functions for various attributes*/
int COMMENDWriterServiceJobDispatcherDeadlineCompareFnc(const void *left, const void *right);
int COMMENDWriterServiceJobDispatcherPriorityCompareFnc(const void *left, const void *right);
int COMMENDWriterServiceJobDispatcherPriorityAndDeadlineCompareFnc(const void *left, const void *right);
/* forward declaration (facade.peer.h) of JobPriority Copy Functions for various attributes*/
void COMMENDWriterServiceJobDispatcherDeadlineCopyFnc(struct RTIEventJobDispatcherJobPriority *dst, const void *src);
void COMMENDWriterServiceJobDispatcherPriorityCopyFnc(struct RTIEventJobDispatcherJobPriority *dst, const void *src);

/* agentCompareFnc = NULL b/c unique agents are checked at the 'assert remote reader' level */
/* priorityCompareFnc = NULL to achieve RR */
/* bucketStorage = NULL b/c unique buckets are checked at PRES 'create flow controller' level */
#define COMMENDFacade_assertTokenBucketRR(me, property, worker) \
    RTIEventJobDispatcher_assertTokenBucket((me)->_jobDispatcher, \
        NULL /*agentCompareFnc*/, NULL /*agentPriorityCompareFnc*/, NULL /*jobPriorityCompareFnc*/, \
        NULL /*priorityCopyFnc*/, NULL /*bucketStorage*/, property, worker)

/* agentCompareFnc = NULL b/c unique agents are checked at the 'assert remote reader' level */
/* bucketStorage = NULL b/c unique buckets are checked at PRES 'create flow controller' level */
#define COMMENDFacade_assertTokenBucketEDF(me, property, worker) \
    RTIEventJobDispatcher_assertTokenBucket((me)->_jobDispatcher, \
        NULL /*agentCompareFnc*/, \
        COMMENDWriterServiceJobDispatcherDeadlineCompareFnc /*agentPriorityCompareFnc*/, \
        COMMENDWriterServiceJobDispatcherDeadlineCompareFnc /*jobPriorityCompareFnc*/, \
        COMMENDWriterServiceJobDispatcherDeadlineCopyFnc /*priorityCopyFnc*/, \
        NULL /*bucketStorage*/, property, worker)

/* agentCompareFnc = NULL b/c unique agents are checked at the 'assert remote reader' level */
/* bucketStorage = NULL b/c unique buckets are checked at PRES 'create flow controller' level */
#define COMMENDFacade_assertTokenBucketHPF(me, property, worker) \
    RTIEventJobDispatcher_assertTokenBucket((me)->_jobDispatcher, \
        NULL /*agentCompareFnc*/, \
        COMMENDWriterServiceJobDispatcherPriorityAndDeadlineCompareFnc /*agentPriorityCompareFnc*/, \
        COMMENDWriterServiceJobDispatcherPriorityCompareFnc /*jobPriorityCompareFnc*/, \
        COMMENDWriterServiceJobDispatcherPriorityCopyFnc /*priorityCopyFnc*/, \
        NULL /*bucketStorage*/, property, worker)

#define COMMENDFacade_getTokenBucketProperty(me, tokenBucket, property, worker) \
    RTIEventJobDispatcher_getTokenBucketProperty((me)->_jobDispatcher, tokenBucket, property, worker)

#define COMMENDFacade_setTokenBucketProperty(me, tokenBucket, property, worker) \
    RTIEventJobDispatcher_setTokenBucketProperty((me)->_jobDispatcher, tokenBucket, property, worker)

#define COMMENDFacade_addTokensToBucket(me, tokenBucket, worker) \
    RTIEventJobDispatcher_addTokens((me)->_jobDispatcher, tokenBucket, worker)

#define COMMENDFacade_assertThread(me, threadStorage, eaBeforeAgentFncs, property, worker) \
    RTIEventJobDispatcher_assertThread((me)->_jobDispatcher, threadStorage, eaBeforeAgentFncs, property, worker)

#define COMMENDFacade_removeThread(me, executionThread, worker) \
    RTIEventJobDispatcher_removeThread((me)->_jobDispatcher, executionThread, worker)

#define COMMENDFacade_detachJobDispatcherThread(me, executionThread, worker) \
    RTIEventJobDispatcher_detachThread((me)->_jobDispatcher, executionThread, worker)

#define COMMENDFacade_getTime(me, now)                                 \
    ((me)->_clock->getTime((me)->_clock, now))

#define COMMENDFacade_getTimestampTime(me, now)                        \
    ((me)->_timestampClock->getTime((me)->_timestampClock, now))

#define COMMENDFacade_isTimestampClockSameAsClock(me)                  \
    ((me)->_timestampClock == (me)->_clock)

#define COMMENDFacade_getInstalledTransportPluginCount(me,             \
                                           countOut,                   \
                                           worker)                     \
    RTINetioConfigurator_getInstalledTransportPluginCount((me)->_configurator, \
                                      countOut,                                \
                                      worker)

#define COMMENDFacade_getInstalledTransportPlugins(me,             \
                                            plugins,               \
                                           countIn,                   \
                                           worker)                     \
    RTINetioConfigurator_getInstalledTransportPlugins((me)->_configurator, \
                                      plugins,                                \
                                      countIn,                                \
                                      worker)

#define COMMENDFacade_getTransportPluginByClass(me,         \
                                          classid,          \
                                          worker)           \
    RTINetioConfigurator_getTransportPluginByClass(         \
                                      (me)->_configurator,  \
                                      classid,              \
                                      worker)

#define COMMENDFacade_getTransportPluginNetworkAddress( \
        me, \
        networkAddress, \
        plugin, \
        worker) \
    RTINetioConfigurator_queryTransportPlugin( \
        (me)->_configurator, \
        NULL, \
        (networkAddress), \
        NULL, \
        (plugin), \
        (worker))



#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* commend_facade_impl_h */
