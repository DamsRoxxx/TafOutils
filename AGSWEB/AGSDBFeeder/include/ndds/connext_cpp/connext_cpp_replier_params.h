/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)connext_cpp_replier_params.h    generated by: makeheader    Fri Feb 16 13:52:56 2018
 *
 *		built from:	replier_params.ifcxx
 */

#ifndef connext_cpp_replier_params_h
#define connext_cpp_replier_params_h



#include <string>

#ifndef ndds_namespace_cpp_h
  #include "ndds/ndds_namespace_cpp.h"
#endif

#ifndef xmq_cpp_dll_h
  #include "connext_cpp/connext_cpp_dll.h"
#endif

#ifndef xmq_cpp_replier_listener_h
  #include "connext_cpp/connext_cpp_replier_listener.h"
#endif

#ifndef xmq_cpp_entity_params_h
  #include "connext_cpp/connext_cpp_entity_params.h"
#endif

#ifndef xmq_cpp_exception_h
  #include "connext_cpp/connext_cpp_exception.h"
#endif

namespace connext {

/**
 * \dref_ReplierParams
 */
template <typename TReq, typename TRep>
class XMQCPPDllExport ReplierParams : public details::EntityParams {
public:
    
    /**
     * \dref_ReplierParams_new
     */
    explicit ReplierParams(DDS::DomainParticipant * participant) 
      : EntityParams(participant),
        _listener(NULL)
    {}

    explicit ReplierParams(const EntityParams & entity_params)
       : EntityParams(entity_params),
         _listener(NULL)
    {}

    /**
     * \dref_ReplierParams_listener
     */
    ReplierParams & replier_listener(ReplierListener<TReq, TRep> & listener)
    {
        _listener = &listener;
        return *this;
    }

    /**
     * \dref_ReplierParams_service_name
     */
    ReplierParams & service_name (const std::string & service_name)
    {
        _service_name = service_name;
        return *this;
    }

    /**
     * \dref_ReplierParams_request_topic_name
     */
    ReplierParams & request_topic_name(const std::string & req_topic)
    {
        _request_topic_name = req_topic;
        return *this;
    }

    /**
     * \dref_ReplierParams_reply_topic_name
     */
    ReplierParams & reply_topic_name  (const std::string & rep_topic)
    {
        _reply_topic_name = rep_topic;
        return *this;
    }

    /**
     * \dref_ReplierParams_qos_profile
     */
    ReplierParams & qos_profile(
        const std::string & qos_library_name,
        const std::string & qos_profile_name)
    {
        _qos_library_name = qos_library_name;
        _qos_profile_name = qos_profile_name;
        return *this;
    }

    /**
     * \dref_ReplierParams_datawriter_qos
     */
    ReplierParams & datawriter_qos    (const DDS_DataWriterQos & qos)
    {
        _datawriter_qos = &qos;
        return *this;
    }

    /**
     * \dref_ReplierParams_datareader_qos
     */
    ReplierParams & datareader_qos    (const DDS_DataReaderQos & qos)
    {
        _datareader_qos = &qos;
        return *this;
    }

    /**
     * \dref_ReplierParams_publisher
     */
    ReplierParams & publisher(DDS::Publisher * publisher)
    {
        _publisher = publisher;
        return *this;
    }

    /**
     * \dref_ReplierParams_subscriber
     */
    ReplierParams & subscriber(DDS::Subscriber * subscriber)
    {
        _subscriber = subscriber;
        return *this;
    }

    /**
     * \dref_ReplierParams_request_type_support
     */
    ReplierParams& request_type_support(DDS::TypeSupport * type_support)
    {
        _datareader_type_support = type_support;
        return *this;
    }

    /**
     * \dref_ReplierParams_reply_type_support
     */
    ReplierParams& reply_type_support(DDS::TypeSupport * type_support)
    {
        _datawriter_type_support = type_support;
        return *this;
    }

    // --- getters from EntityParams ------------------
    using EntityParams::participant;
    using EntityParams::service_name;
    using EntityParams::request_topic_name;
    using EntityParams::reply_topic_name;
    using EntityParams::qos_library_name;
    using EntityParams::qos_profile_name;
    using EntityParams::datawriter_qos;
    using EntityParams::datareader_qos;
    using EntityParams::publisher;
    using EntityParams::subscriber;
    using EntityParams::datawriter_type_support;
    using EntityParams::datareader_type_support;

    ReplierListener<TReq, TRep> * replier_listener() const
    {
        return _listener;
    }

private:
    ReplierListener<TReq, TRep> * _listener;
};    

/**
 * \dref_SimpleReplierParams
 */
template <typename TReq, typename TRep>
class XMQCPPDllExport SimpleReplierParams : public details::EntityParams {
public:
    
    /**
     * \dref_SimpleReplierParams_new
     */
    SimpleReplierParams(DDS::DomainParticipant * participant,
                        SimpleReplierListener<TReq, TRep> & listener)
        : EntityParams(participant),
          _listener(&listener)
    { }

    explicit SimpleReplierParams(const EntityParams & entity_params)
       : EntityParams(entity_params),
         _listener(NULL)
    {}

    /**
     * \dref_SimpleReplierParams_service_name
     */
    SimpleReplierParams & service_name (const std::string & service_name)
    {
        _service_name = service_name;
        return *this;
    }

    /**
     * \dref_SimpleReplierParams_request_topic_name
     */
    SimpleReplierParams & request_topic_name(const std::string & req_topic)
    {
        _request_topic_name = req_topic;
        return *this;
    }

    /**
     * \dref_SimpleReplierParams_reply_topic_name
     */
    SimpleReplierParams & reply_topic_name  (const std::string & rep_topic)
    {
        _reply_topic_name = rep_topic;
        return *this;
    }

    /**
     * \dref_SimpleReplierParams_qos_profile
     */
    SimpleReplierParams & qos_profile(
        const std::string & qos_library_name,
        const std::string & qos_profile_name)
    {
        _qos_library_name = qos_library_name;
        _qos_profile_name = qos_profile_name;
        return *this;
    }

    /**
     * \dref_SimpleReplierParams_datawriter_qos
     */
    SimpleReplierParams & datawriter_qos    (const DDS_DataWriterQos & qos)
    {
        _datawriter_qos = &qos;
        return *this;
    }

    /**
     * \dref_SimpleReplierParams_datareader_qos
     */
    SimpleReplierParams & datareader_qos    (const DDS_DataReaderQos & qos)
    {
        _datareader_qos = &qos;
        return *this;
    }

    /**
     * \dref_SimpleReplierParams_publisher
     */
    SimpleReplierParams & publisher(DDSPublisher * publisher)
    {
        _publisher = publisher;
        return *this;
    }

    /**
     * \dref_SimpleReplierParams_subscriber
     */
    SimpleReplierParams & subscriber(DDSSubscriber * subscriber)
    {
        _subscriber = subscriber;
        return *this;
    }

    /**
     * \dref_SimpleReplierParams_request_type_support
     */
    SimpleReplierParams& request_type_support(DDS::TypeSupport * type_support)
	{
		_datareader_type_support = type_support;
		return *this;
	}

    /**
     * \dref_SimpleReplierParams_reply_type_support
     */
    SimpleReplierParams& reply_type_support(DDS::TypeSupport * type_support)
	{
		_datawriter_type_support = type_support;
		return *this;
	}

    virtual void validate() const {
        if (_listener == NULL) {
            const char * const METHOD_NAME = "SimpleReplierParams::validate";
            check_retcode(DDS_RETCODE_BAD_PARAMETER, METHOD_NAME,
                          DDS_LOG_BAD_PARAMETER_s,
                          "NULL SimpleReplierListener");
        }
        EntityParams::validate();
    }

    // --- getters from EntityParams: ----------------------------------------

    using EntityParams::participant;
    using EntityParams::service_name;
    using EntityParams::request_topic_name;
    using EntityParams::reply_topic_name;
    using EntityParams::qos_library_name;
    using EntityParams::qos_profile_name;
    using EntityParams::datawriter_qos;
    using EntityParams::datareader_qos;
    using EntityParams::publisher;
    using EntityParams::subscriber;
    using EntityParams::datawriter_type_support;
    using EntityParams::datareader_type_support;

    SimpleReplierListener<TReq, TRep> * simple_replier_listener() const
    {
        return _listener;
    }

private:
    SimpleReplierListener<TReq, TRep> * _listener;
};    



} // namespace connext


#endif /* connext_cpp_replier_params_h */
