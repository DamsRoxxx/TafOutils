/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)connext_cpp_replier_listener.h    generated by: makeheader    Fri Feb 16 13:52:56 2018
 *
 *		built from:	replier_listener.ifcxx
 */

#ifndef connext_cpp_replier_listener_h
#define connext_cpp_replier_listener_h



#ifndef xmq_cpp_dll_h
  #include "connext_cpp/connext_cpp_dll.h"
#endif

namespace connext {

// Forward declaration of Sample template.
template<class T>
class SampleRef;

// Forward declaration of Replier template.
template <class TReq, class TRep>
class Replier;

template<class T>
struct dds_type_traits;

/**
 * \dref_SimpleReplierListener
 */
template <class TReq, class TRep>
class XMQCPPDllExport SimpleReplierListener  {
public:

    /**
     * \dref_SimpleReplierListener_on_request_available
     */
    virtual TRep * on_request_available(
        typename dds_type_traits<TReq>::SampleRefType request) = 0;

    /**
     * \dref_SimpleReplierListener_return_loan
     */
    virtual void return_loan(TRep * reply) = 0;
    virtual ~SimpleReplierListener() {}
};

/**
 * \dref_ReplierListener
 */
template <class TReq, class TRep>
class XMQCPPDllExport ReplierListener  {
public:

    /**
     * \dref_ReplierListener_on_request_available
     */
    virtual void on_request_available(Replier<TReq, TRep> &replier) = 0;
    virtual ~ReplierListener() {}
};

} // namespace connext


#endif /* connext_cpp_replier_listener_h */
