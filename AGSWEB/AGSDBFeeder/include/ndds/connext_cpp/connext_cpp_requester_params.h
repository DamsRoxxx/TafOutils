/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)connext_cpp_requester_params.h    generated by: makeheader    Fri Feb 16 13:52:55 2018
 *
 *		built from:	requester_params.ifcxx
 */

#ifndef connext_cpp_requester_params_h
#define connext_cpp_requester_params_h


#ifndef ndds_cpp_h
  #include "ndds/ndds_cpp.h"
#endif

#ifndef ndds_namespace_cpp_h
  #include "ndds/ndds_namespace_cpp.h"
#endif

#ifndef xmq_cpp_dll_h
  #include "connext_cpp/connext_cpp_dll.h"
#endif

#ifndef xmq_cpp_entity_params_h
  #include "connext_cpp/connext_cpp_entity_params.h"
#endif


namespace connext {

using namespace DDS;



class XMQCPPDllExport RequesterParams : public details::EntityParams {
public:
    
    /**
     * \dref_RequesterParams_new
     */
    explicit RequesterParams(DomainParticipant * participant);
    ~RequesterParams();

    // --- setters: -----------------------------------------------------------

    RequesterParams& participant(DomainParticipant * participant);

    /**
     * \dref_RequesterParams_service_name
     */
    RequesterParams& service_name(const std::string& name);

    /**
     * \dref_RequesterParams_request_topic_name
     */
    RequesterParams& request_topic_name(const std::string& name);

    /**
     * \dref_RequesterParams_reply_topic_name
     */
    RequesterParams& reply_topic_name(const std::string& name);

    /**
     * \dref_RequesterParams_qos_profile
     */
    RequesterParams& qos_profile(const std::string& qos_library_name,
                                 const std::string& qos_profile_name);

    /**
     * \dref_RequesterParams_datawriter_qos
     */
    RequesterParams& datawriter_qos(const DDS_DataWriterQos & qos);

    /**
     * \dref_RequesterParams_datareader_qos
     */
    RequesterParams& datareader_qos(const DDS_DataReaderQos & qos);

    /**
     * \dref_RequesterParams_publisher
     */
    RequesterParams& publisher(DDSPublisher * publisher);

    /**
     * \dref_RequesterParams_subscriber
     */
    RequesterParams& subscriber(DDSSubscriber * subscriber);

    /**
     * \dref_RequesterParams_request_type_support
     */
    RequesterParams& request_type_support(TypeSupport * type_support);

    /**
     * \dref_RequesterParams_reply_type_support
     */
    RequesterParams& reply_type_support(TypeSupport * type_support);

    // --- getters: ----------------------------------------------------------

    using EntityParams::participant;
    using EntityParams::service_name;
    using EntityParams::request_topic_name;
    using EntityParams::reply_topic_name;
    using EntityParams::qos_library_name;
    using EntityParams::qos_profile_name;
    using EntityParams::datawriter_qos;
    using EntityParams::datareader_qos;
    using EntityParams::publisher;
    using EntityParams::subscriber;
    using EntityParams::datawriter_type_support;
    using EntityParams::datareader_type_support;
};


} // namespace connext

#endif /* connext_cpp_requester_params_h */
