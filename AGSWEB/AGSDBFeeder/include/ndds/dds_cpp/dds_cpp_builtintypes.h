/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)dds_cpp_builtintypes.h    generated by: makeheader    Fri Feb 16 13:52:07 2018
 *
 *		built from:	builtintypes.ifcxx
 */

#ifndef dds_cpp_builtintypes_h
#define dds_cpp_builtintypes_h


  #ifndef dds_cpp_dll_h
    #include "dds_cpp/dds_cpp_dll.h"
  #endif
  #ifndef dds_c_builtintypes_h
    #include "dds_c/dds_c_builtintypes.h"
  #endif
  #ifndef dds_cpp_data_h
    #include "dds_cpp/dds_cpp_data.h"
  #endif



/*e \dref_StringTypeSupport
 */
class DDSCPPDllExport DDSStringTypeSupport : public DDSTypeSupport {                                          
public:                                                                  
  /*e \dref_StringTypeSupport_register_type
  */  
  static DDS_ReturnCode_t register_type(                                 
                               DDSDomainParticipant* participant,        
                               const char* type_name = "DDS::String");          

  /*e \dref_StringTypeSupport_unregister_type
  */                                                                           
  static DDS_ReturnCode_t unregister_type(                               
                               DDSDomainParticipant* participant,        
                               const char* type_name = "DDS::String");         

  /*e \dref_StringTypeSupport_get_type_name
  */                                                                           
  static const char* get_type_name();		                             
                                                                         
  static char* create_data(
          const DDS_TypeAllocationParams_t & alloc_params
              = DDS_TYPE_ALLOCATION_PARAMS_DEFAULT);
                                                                         
  static char* create_data_ex(DDS_Boolean allocatePointers);            
                                                                         
  static DDS_ReturnCode_t delete_data(
             char* a_data,
             const DDS_TypeDeallocationParams_t & dealloc_params
                 = DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT);
  		                                                                 
  static DDS_ReturnCode_t delete_data_ex(char* a_data,                  
  		DDS_Boolean deletePointers);                                     

  /*e \dref_StringTypeSupport_print_data
  */
  static void print_data(const char* a_data);                           
                                                                         
  static DDS_ReturnCode_t copy_data(char* dst_data, const char* src_data); 
                                                                         
  static DDS_ReturnCode_t initialize_data(
            char* a_data,
            const DDS_TypeAllocationParams_t & alloc_params
                = DDS_TYPE_ALLOCATION_PARAMS_DEFAULT);
                                                                         
  static DDS_ReturnCode_t initialize_data_ex(char* a_data,              
      DDS_Boolean allocatePointers);                                     
                                                                         
  static DDS_ReturnCode_t finalize_data(
          char* a_data,
          const DDS_TypeDeallocationParams_t & dealloc_params
              = DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT);
                                                                         
  static DDS_ReturnCode_t finalize_data_ex(char* a_data,                
	  DDS_Boolean deletePointers);                                       

  DDSDataReader* create_datareaderI(DDSDataReader* dataReader); 

  DDS_ReturnCode_t destroy_datareaderI(DDSDataReader* dataReader);       

  DDSDataWriter* create_datawriterI(DDSDataWriter* dataWriter);          

  DDS_ReturnCode_t destroy_datawriterI(DDSDataWriter* dataWriter);       
                                                                         
  static void finalize();                                                

  /* Builtin type extensions */
  static char * create_data(int size);

  static char * create_data_ex(int size, DDS_Boolean allocatePointers);

  static DDS_ReturnCode_t initialize_data(char * a_data, int size);

  static DDS_ReturnCode_t initialize_data_ex(
    char * a_data, int size, DDS_Boolean allocatePointers);
  
  /*e \dref_StringTypeSupport_get_typecode
  */
  static DDS_TypeCode* get_typecode();  
   
  /*e \dref_StringTypeSupport_serialize_data_to_cdr_buffer
  */
  static DDS_ReturnCode_t serialize_data_to_cdr_buffer(
        char * buffer,
        unsigned int & length,
        const char *a_data);

  /*e \dref_StringTypeSupport_deserialize_data_from_cdr_buffer
  */
  static DDS_ReturnCode_t deserialize_data_from_cdr_buffer(
        char **a_data,
        const char * buffer,
        unsigned int length);

  /*e \dref_StringTypeSupport_data_to_string  
  */
  static DDS_ReturnCode_t data_to_string(
        char *sample,
        char *str,
        DDS_UnsignedLong& str_size, 
        const DDS_PrintFormatProperty& property);
  
  virtual ~DDSStringTypeSupport();                                               
private:                                                                 
  DDSStringTypeSupport();

};


/*e \dref_StringDataReader
 */
class DDSCPPDllExport DDSStringDataReader : public DDSDataReader {                                           
                                                                         
  public:                                                                
    DDS_DATAREADER_CPP_PUBLIC_UNTYPED_METHODS();
  public:                                                                

  /*e \dref_StringDataReader_read
   */
  virtual DDS_ReturnCode_t read(DDS_StringSeq& received_data,                 
   	DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_StringDataReader_take
   */
  virtual DDS_ReturnCode_t take(DDS_StringSeq& received_data,                 
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_StringDataReader_read_w_condition
   */
  virtual DDS_ReturnCode_t read_w_condition(DDS_StringSeq& received_data,     
 				      DDS_SampleInfoSeq& info_seq,       
                                      DDS_Long max_samples,              
 				      DDSReadCondition* condition);      

  /*e \dref_StringDataReader_take_w_condition
   */
  virtual DDS_ReturnCode_t take_w_condition(DDS_StringSeq& received_data,     
 				      DDS_SampleInfoSeq& info_seq,       
                                      DDS_Long max_samples,              
 				      DDSReadCondition* condition);      

  /*e \dref_StringDataReader_read_next_sample
   */
  virtual DDS_ReturnCode_t read_next_sample(char * received_data,        
   			  DDS_SampleInfo& sample_info);                  

  /*e \dref_StringDataReader_take_next_sample
   */
  virtual DDS_ReturnCode_t take_next_sample(char * received_data,        
 			  DDS_SampleInfo& sample_info);                  
                                                                         
  virtual DDS_ReturnCode_t read_instance(DDS_StringSeq& received_data,        
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,           
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 
                                                                         
  virtual DDS_ReturnCode_t take_instance(DDS_StringSeq& received_data,        
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,           
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 
                                                                         
  virtual DDS_ReturnCode_t read_instance_w_condition(
        DDS_StringSeq& received_data,
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  virtual DDS_ReturnCode_t take_instance_w_condition(
        DDS_StringSeq& received_data,
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  virtual DDS_ReturnCode_t read_next_instance(DDS_StringSeq& received_data,   
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,    
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 
                                                                         
  virtual DDS_ReturnCode_t take_next_instance(DDS_StringSeq& received_data,   
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,    
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  virtual DDS_ReturnCode_t read_next_instance_w_condition(
        DDS_StringSeq& received_data,
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  virtual DDS_ReturnCode_t take_next_instance_w_condition(
        DDS_StringSeq& received_data,
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  /*e \dref_StringDataReader_return_loan 
  */
  virtual DDS_ReturnCode_t return_loan(DDS_StringSeq& received_data,          
                          DDS_SampleInfoSeq& info_seq);                  
                                                                         
  virtual DDS_ReturnCode_t get_key_value(char * key_holder,              
				    const DDS_InstanceHandle_t& handle); 
                                                                         
  virtual DDS_InstanceHandle_t lookup_instance(                          
                                const char * key_holder);                
                                                                         
  public:                                                                
                                                                         
    static DDSStringDataReader* createI(DDSDataReader* dataReader);              
    static DDS_ReturnCode_t destroyI(DDSStringDataReader* dataReader);           

    /*e \dref_StringDataReader_narrow
     */
    static DDSStringDataReader* narrow(DDSDataReader *reader);                   

  protected:                                                             
                                                                         
    DDSStringDataReader(DDSDataReader* impl);                                    
                                                                         
  protected:                                                             
  virtual ~DDSStringDataReader();                                                
};


/*e \dref_StringDataWriter
*/
class DDSCPPDllExport DDSStringDataWriter : public DDSDataWriter {                                       
public:                                  
    DDS_DATAWRITER_CPP_PUBLIC_UNTYPED_METHODS();
								     
    static DDSStringDataWriter* createI(DDSDataWriter* dataWriter);          
    static DDS_ReturnCode_t destroyI(DDSStringDataWriter* dataWriter);       

    /*e \dref_StringDataWriter_narrow
    */
    static DDSStringDataWriter* narrow(DDSDataWriter *writer);               

    virtual DDS_InstanceHandle_t register_instance(                  
				const char * instance_data);         
								     
    virtual DDS_InstanceHandle_t register_instance_w_timestamp(      
				const char * instance_data,          
				const DDS_Time_t& source_timestamp); 

    virtual DDS_InstanceHandle_t register_instance_w_params(      
				const char * instance_data,          
				DDS_WriteParams_t& params); 
								     
    virtual DDS_ReturnCode_t unregister_instance(                    
				const char * instance_data,          
				const DDS_InstanceHandle_t& handle); 
								     
    virtual DDS_ReturnCode_t unregister_instance_w_timestamp(        
				const char * instance_data,          
				const DDS_InstanceHandle_t& handle,  
				const DDS_Time_t& source_timestamp); 

    virtual DDS_ReturnCode_t unregister_instance_w_params(        
				const char * instance_data,          
				DDS_WriteParams_t& params); 

    /*e \dref_StringDataWriter_write
    */
    virtual DDS_ReturnCode_t write(                                  
				const char * instance_data,          
				const DDS_InstanceHandle_t& handle); 

    /*e \dref_StringDataWriter_write_w_timestamp
    */
    virtual DDS_ReturnCode_t write_w_timestamp(                      
				const char * instance_data,          
				const DDS_InstanceHandle_t& handle,  
				const DDS_Time_t& source_timestamp); 

    /*e \dref_StringDataWriter_write_w_params
    */
    virtual DDS_ReturnCode_t write_w_params(                      
				const char * instance_data,          
				DDS_WriteParams_t& params); 

    virtual DDS_ReturnCode_t dispose(                                
				const char * instance_data,          
				const DDS_InstanceHandle_t& handle); 
								     
    virtual DDS_ReturnCode_t dispose_w_timestamp(                    
			    const char * instance_data,              
			    const DDS_InstanceHandle_t& handle,      
			    const DDS_Time_t& source_timestamp);   

    virtual DDS_ReturnCode_t dispose_w_params(                    
			    const char * instance_data,              
			    DDS_WriteParams_t& params); 
								     
    virtual DDS_ReturnCode_t get_key_value(                          
			    char * key_holder,                       
			    const DDS_InstanceHandle_t& handle);     
								     
    virtual DDS_InstanceHandle_t lookup_instance(                    
				const char * key_holder);
    
protected:
   DDSStringDataWriter(DDSDataWriter* impl);                                  
   virtual ~DDSStringDataWriter();                                            
};


/*e \dref_OctetsTypeSupport
 */
class DDSCPPDllExport DDSOctetsTypeSupport : public DDSTypeSupport {
public:                        
    /*e \dref_OctetsTypeSupport_register_type
    */  
    static DDS_ReturnCode_t register_type(                                 
				 DDSDomainParticipant* participant,        
				 const char* type_name = "DDS::Octets");          

    /*e \dref_OctetsTypeSupport_unregister_type
    */                                                                           
    static DDS_ReturnCode_t unregister_type(                               
				 DDSDomainParticipant* participant,        
				 const char* type_name = "DDS::Octets"); 

    /*e \dref_OctetsTypeSupport_get_type_name
    */                                                                           
    static const char* get_type_name();		                             

    static DDS_Octets* create_data(
              const DDS_TypeAllocationParams_t & alloc_params
                  = DDS_TYPE_ALLOCATION_PARAMS_DEFAULT);

    static DDS_Octets* create_data_ex(DDS_Boolean allocatePointers); 

    static DDS_ReturnCode_t delete_data(
               DDS_Octets* a_data,
               const DDS_TypeDeallocationParams_t & dealloc_params
                   = DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT);

    static DDS_ReturnCode_t delete_data_ex(DDS_Octets* a_data,                  
		  DDS_Boolean deletePointers);                                     

    /*e \dref_OctetsTypeSupport_print_data
    */
    static void print_data(const DDS_Octets* a_data);                           

    static DDS_ReturnCode_t copy_data(DDS_Octets* dst_data, const DDS_Octets* src_data); 

    static DDS_ReturnCode_t initialize_data(
              DDS_Octets* a_data,
              const DDS_TypeAllocationParams_t & alloc_params
                  = DDS_TYPE_ALLOCATION_PARAMS_DEFAULT);

    static DDS_ReturnCode_t initialize_data_ex(DDS_Octets* a_data,              
	DDS_Boolean allocatePointers);                                     

    static DDS_ReturnCode_t finalize_data(
              DDS_Octets* a_data,
              const DDS_TypeDeallocationParams_t & dealloc_params
                  = DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT);

    static DDS_ReturnCode_t finalize_data_ex(DDS_Octets* a_data,                
	    DDS_Boolean deletePointers);                                       

    DDSDataReader* create_datareaderI(DDSDataReader* dataReader); 

    DDS_ReturnCode_t destroy_datareaderI(DDSDataReader* dataReader);       

    DDSDataWriter* create_datawriterI(DDSDataWriter* dataWriter);          

    DDS_ReturnCode_t destroy_datawriterI(DDSDataWriter* dataWriter);       

    static void finalize();                                                

    /* Builtin type extensions */
    static DDS_Octets * create_data(int size);

    static DDS_Octets * create_data_ex(int size, DDS_Boolean allocatePointers);

    static DDS_ReturnCode_t initialize_data(DDS_Octets * a_data, int size);

    static DDS_ReturnCode_t initialize_data_ex(
      DDS_Octets * a_data, int size, DDS_Boolean allocatePointers);
    
    /*e \dref_OctetsTypeSupport_get_typecode
    */
    static DDS_TypeCode* get_typecode();  
  
    /*e \dref_OctetsTypeSupport_serialize_data_to_cdr_buffer
    */
    static DDS_ReturnCode_t serialize_data_to_cdr_buffer(
          char * buffer,
          unsigned int & length,
          const DDS_Octets *a_data);

    /*e \dref_OctetsTypeSupport_deserialize_data_from_cdr_buffer
    */
    static DDS_ReturnCode_t deserialize_data_from_cdr_buffer(
          DDS_Octets *a_data,
          const char * buffer,
          unsigned int length);

    /*e \dref_OctetsTypeSupport_data_to_string  
    */
    static DDS_ReturnCode_t data_to_string(
          DDS_Octets *sample,
          char *str,
          DDS_UnsignedLong& str_size, 
          const DDS_PrintFormatProperty& property);

    virtual ~DDSOctetsTypeSupport();                                               
private:                                                                 
    DDSOctetsTypeSupport();                                                        
};


/*e \dref_OctetsDataReader
 */
class DDSCPPDllExport DDSOctetsDataReader : public DDSDataReader {                                           
                                                                         
  public:                                                                
    DDS_DATAREADER_CPP_PUBLIC_UNTYPED_METHODS();
  public:                                                                

  /*e \dref_OctetsDataReader_read
   */
  virtual DDS_ReturnCode_t read(DDS_OctetsSeq& received_data,                 
   	DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_OctetsDataReader_take
   */
  virtual DDS_ReturnCode_t take(DDS_OctetsSeq& received_data,                 
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_OctetsDataReader_read_w_condition
   */
  virtual DDS_ReturnCode_t read_w_condition(DDS_OctetsSeq& received_data,     
 				      DDS_SampleInfoSeq& info_seq,       
                                      DDS_Long max_samples,              
 				      DDSReadCondition* condition);      

  /*e \dref_OctetsDataReader_take_w_condition
   */
  virtual DDS_ReturnCode_t take_w_condition(DDS_OctetsSeq& received_data,     
 				      DDS_SampleInfoSeq& info_seq,       
                                      DDS_Long max_samples,              
 				      DDSReadCondition* condition);      

  /*e \dref_OctetsDataReader_read_next_sample
   */
  virtual DDS_ReturnCode_t read_next_sample(DDS_Octets & received_data,        
   			  DDS_SampleInfo& sample_info);                  

  /*e \dref_OctetsDataReader_take_next_sample
   */
  virtual DDS_ReturnCode_t take_next_sample(DDS_Octets & received_data,        
 			  DDS_SampleInfo& sample_info);                  
                                                                         
  virtual DDS_ReturnCode_t read_instance(DDS_OctetsSeq& received_data,        
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,           
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 
                                                                         
  virtual DDS_ReturnCode_t take_instance(DDS_OctetsSeq& received_data,        
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,           
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 
                                                                         
  virtual DDS_ReturnCode_t read_instance_w_condition(
        DDS_OctetsSeq& received_data,        
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  virtual DDS_ReturnCode_t take_instance_w_condition(
        DDS_OctetsSeq& received_data,        
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  virtual DDS_ReturnCode_t read_next_instance(DDS_OctetsSeq& received_data,   
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,    
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 
                                                                         
  virtual DDS_ReturnCode_t take_next_instance(DDS_OctetsSeq& received_data,   
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,    
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  virtual DDS_ReturnCode_t read_next_instance_w_condition(
        DDS_OctetsSeq& received_data,
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  virtual DDS_ReturnCode_t take_next_instance_w_condition(
        DDS_OctetsSeq& received_data,
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  /*e \dref_OctetsDataReader_return_loan
   */
  virtual DDS_ReturnCode_t return_loan(DDS_OctetsSeq& received_data,          
                          DDS_SampleInfoSeq& info_seq);                  
                                                                         
  virtual DDS_ReturnCode_t get_key_value(DDS_Octets & key_holder,              
				    const DDS_InstanceHandle_t& handle); 
                                                                         
  virtual DDS_InstanceHandle_t lookup_instance(                          
                                const DDS_Octets & key_holder);                
                                                                         
  public:                                                                
                                                                         
    static DDSOctetsDataReader* createI(DDSDataReader* dataReader);              
    static DDS_ReturnCode_t destroyI(DDSOctetsDataReader* dataReader);           

    /*e \dref_OctetsDataReader_narrow
     */
    static DDSOctetsDataReader* narrow(DDSDataReader *reader);                   

  private:                                                               
    virtual DDS_ReturnCode_t read_or_takeI(DDS_OctetsSeq& received_data,      
      			    DDS_SampleInfoSeq& info_seq,           
      			    DDS_Long max_samples,                  
      			    DDS_SampleStateMask sample_states,     
      			    DDS_ViewStateMask view_states,         
      			    DDS_InstanceStateMask instance_states, 
      			    bool take);                            
      								   
    virtual DDS_ReturnCode_t read_or_take_w_conditionI(                  
      			    DDS_OctetsSeq& received_data,               
      			    DDS_SampleInfoSeq& info_seq,           
      			    DDS_Long max_samples,                  
      			    DDSReadCondition* condition,           
      			    bool take);                            
      								   
    virtual DDS_ReturnCode_t read_or_take_next_sampleI(                  
      			    DDS_Octets& received_data,                  
      			    DDS_SampleInfo& sample_info,           
      			    bool take);                            
      								   
    virtual DDS_ReturnCode_t read_or_take_instanceI(                     
      			    DDS_OctetsSeq& received_data,               
      			    DDS_SampleInfoSeq& info_seq,           
      			    DDS_Long max_samples,                  
      			    const DDS_InstanceHandle_t& a_handle,  
      			    DDS_SampleStateMask sample_states,     
      			    DDS_ViewStateMask view_states,         
      			    DDS_InstanceStateMask instance_states, 
      			    bool take);                            
      								   
    virtual DDS_ReturnCode_t read_or_take_instance_w_conditionI(    
      			    DDS_OctetsSeq& received_data,               
      			    DDS_SampleInfoSeq& info_seq,           
      			    DDS_Long max_samples,                  
                    const DDS_InstanceHandle_t& previous_handle,    
      			    DDSReadCondition* condition,           
      			    bool take);                            

    virtual DDS_ReturnCode_t read_or_take_next_instanceI(                
      			    DDS_OctetsSeq& received_data,               
      			    DDS_SampleInfoSeq& info_seq,           
      			    DDS_Long max_samples,                  
      	            const DDS_InstanceHandle_t& previous_handle,    
      			    DDS_SampleStateMask sample_states,     
      			    DDS_ViewStateMask view_states,         
      			    DDS_InstanceStateMask instance_states, 
      			    bool take);                            
      								   
    virtual DDS_ReturnCode_t read_or_take_next_instance_w_conditionI(    
      			    DDS_OctetsSeq& received_data,               
      			    DDS_SampleInfoSeq& info_seq,           
      			    DDS_Long max_samples,                  
      	            const DDS_InstanceHandle_t& previous_handle,    
      			    DDSReadCondition* condition,           
      			    bool take);                            

  protected:                                                             
                                                                         
    DDSOctetsDataReader(DDSDataReader* impl);                                    
                                                                         
  protected:                                                             
    virtual ~DDSOctetsDataReader();                                                
};


/*e \dref_OctetsDataWriter
*/
class DDSCPPDllExport DDSOctetsDataWriter :                
        public DDSDataWriter {                                       
public:                                                              
    DDS_DATAWRITER_CPP_PUBLIC_UNTYPED_METHODS();

    static DDSOctetsDataWriter* createI(DDSDataWriter* dataWriter);          
    static DDS_ReturnCode_t destroyI(DDSOctetsDataWriter* dataWriter);       

    /*e \dref_OctetsDataWriter_narrow
    */
    static DDSOctetsDataWriter* narrow(DDSDataWriter *writer);               

    virtual DDS_InstanceHandle_t register_instance(                  
				const DDS_Octets & instance_data);         

    virtual DDS_InstanceHandle_t register_instance_w_timestamp(      
				const DDS_Octets & instance_data,          
				const DDS_Time_t& source_timestamp); 

    virtual DDS_InstanceHandle_t register_instance_w_params(      
				const DDS_Octets & instance_data,          
				DDS_WriteParams_t& params); 

    virtual DDS_ReturnCode_t unregister_instance(                    
				const DDS_Octets & instance_data,          
				const DDS_InstanceHandle_t& handle); 

    virtual DDS_ReturnCode_t unregister_instance_w_timestamp(        
				const DDS_Octets & instance_data,          
				const DDS_InstanceHandle_t& handle,  
				const DDS_Time_t& source_timestamp); 

    virtual DDS_ReturnCode_t unregister_instance_w_params(        
				const DDS_Octets & instance_data,          
				DDS_WriteParams_t& params); 

    /*e \dref_OctetsDataWriter_write
    */
    virtual DDS_ReturnCode_t write(                                  
				const DDS_Octets & instance_data,          
				const DDS_InstanceHandle_t& handle); 

    /*e \dref_OctetsDataWriter_write_octets
    */
    virtual DDS_ReturnCode_t write(const unsigned char * octets,
				   int length,
				   const DDS_InstanceHandle_t& handle);

    /*e \dref_OctetsDataWriter_write_octets_seq
    */
    virtual DDS_ReturnCode_t write(const DDS_OctetSeq & octets,
				   const DDS_InstanceHandle_t & handle);

    /*e \dref_OctetsDataWriter_write_w_timestamp
    */
    virtual DDS_ReturnCode_t write_w_timestamp(                      
				const DDS_Octets & instance_data,          
				const DDS_InstanceHandle_t& handle,  
				const DDS_Time_t& source_timestamp); 

    /*e \dref_OctetsDataWriter_write_octets_w_timestamp
    */
    virtual DDS_ReturnCode_t write_w_timestamp(const unsigned char * octets,
				   int length,
				   const DDS_InstanceHandle_t& handle,
				   const DDS_Time_t& source_timestamp);

    /*e \dref_OctetsDataWriter_write_octets_seq_w_timestamp
    */
    virtual DDS_ReturnCode_t write_w_timestamp(const DDS_OctetSeq & octets,
				   const DDS_InstanceHandle_t & handle,   
				   const DDS_Time_t & source_timestamp);

    /*e \dref_OctetsDataWriter_write_w_params
    */
    virtual DDS_ReturnCode_t write_w_params(                      
				const DDS_Octets & instance_data,          
				DDS_WriteParams_t& params); 

    /*e \dref_OctetsDataWriter_write_octets_w_params
    */
    virtual DDS_ReturnCode_t write_w_params(const unsigned char * octets,
				   int length,
				   DDS_WriteParams_t& params);

    /*e \dref_OctetsDataWriter_write_octets_seq_w_params
    */
    virtual DDS_ReturnCode_t write_w_params(const DDS_OctetSeq & octets,
				   DDS_WriteParams_t& params);

    virtual DDS_ReturnCode_t dispose(                                
				const DDS_Octets & instance_data,          
				const DDS_InstanceHandle_t& handle); 

    virtual DDS_ReturnCode_t dispose_w_timestamp(                    
			    const DDS_Octets & instance_data,              
			    const DDS_InstanceHandle_t& handle,      
			    const DDS_Time_t& source_timestamp);     

    virtual DDS_ReturnCode_t dispose_w_params(                    
			    const DDS_Octets & instance_data,              
			    DDS_WriteParams_t& params);  

    virtual DDS_ReturnCode_t get_key_value(                          
			    DDS_Octets & key_holder,                       
			    const DDS_InstanceHandle_t& handle);     

    virtual DDS_InstanceHandle_t lookup_instance(                    
				const DDS_Octets & key_holder);            
protected:                                                           
  DDSOctetsDataWriter(DDSDataWriter* impl);                                  
  virtual ~DDSOctetsDataWriter();                                            
};



/*e \dref_KeyedStringTypeSupport
*/  
class DDSCPPDllExport DDSKeyedStringTypeSupport : public DDSTypeSupport {
public:                        
    /*e \dref_KeyedStringTypeSupport_register_type
    */  
    static DDS_ReturnCode_t register_type(                                 
				 DDSDomainParticipant* participant,        
				 const char* type_name = "DDS::KeyedString");          

    /*e \dref_KeyedStringTypeSupport_unregister_type
    */                                                                           
    static DDS_ReturnCode_t unregister_type(                               
				 DDSDomainParticipant* participant,        
				 const char* type_name = "DDS::KeyedString");    

    /*e \dref_KeyedStringTypeSupport_get_type_name
    */                                                                           
    static const char* get_type_name();		                             

    static DDS_KeyedString* create_data(
            const DDS_TypeAllocationParams_t & alloc_params
                = DDS_TYPE_ALLOCATION_PARAMS_DEFAULT);

    static DDS_KeyedString* create_data_ex(DDS_Boolean allocatePointers);            

    static DDS_ReturnCode_t delete_data(
            DDS_KeyedString* a_data,
            const DDS_TypeDeallocationParams_t & dealloc_params
                = DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT);

    static DDS_ReturnCode_t delete_data_ex(DDS_KeyedString* a_data,                  
		  DDS_Boolean deletePointers);                                     

    /*e \dref_KeyedStringTypeSupport_print_data
    */
    static void print_data(const DDS_KeyedString* a_data);                           

    static DDS_ReturnCode_t copy_data(DDS_KeyedString* dst_data, const DDS_KeyedString* src_data); 

    static DDS_ReturnCode_t initialize_data(
            DDS_KeyedString* a_data,
            const DDS_TypeAllocationParams_t & alloc_params
                = DDS_TYPE_ALLOCATION_PARAMS_DEFAULT);

    static DDS_ReturnCode_t initialize_data_ex(DDS_KeyedString* a_data,              
	DDS_Boolean allocatePointers);                                     

    static DDS_ReturnCode_t finalize_data(
               DDS_KeyedString* a_data,
               const DDS_TypeDeallocationParams_t & dealloc_params
                   = DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT);

    static DDS_ReturnCode_t finalize_data_ex(DDS_KeyedString* a_data,                
	    DDS_Boolean deletePointers);                                       

    DDSDataReader* create_datareaderI(DDSDataReader* dataReader); 

    DDS_ReturnCode_t destroy_datareaderI(DDSDataReader* dataReader);       

    DDSDataWriter* create_datawriterI(DDSDataWriter* dataWriter);          

    DDS_ReturnCode_t destroy_datawriterI(DDSDataWriter* dataWriter);       

    static void finalize();                                                

    /* Builtin type extensions */
    static DDS_KeyedString * create_data(int key_size, int size);

    static DDS_KeyedString * create_data_ex(int key_size, int size, DDS_Boolean allocatePointers);

    static DDS_ReturnCode_t initialize_data(DDS_KeyedString * a_data, int key_size, int size);

    static DDS_ReturnCode_t initialize_data_ex(
      DDS_KeyedString * a_data, int key_size, int size, DDS_Boolean allocatePointers);
    
    /*e \dref_KeyedStringTypeSupport_get_typecode
    */
    static DDS_TypeCode* get_typecode();  
    
    /*e \dref_KeyedStringTypeSupport_serialize_data_to_cdr_buffer
    */
    static DDS_ReturnCode_t serialize_data_to_cdr_buffer(
          char * buffer,
          unsigned int & length,
          const DDS_KeyedString *a_data);

    /*e \dref_KeyedStringTypeSupport_deserialize_data_from_cdr_buffer
    */
    static DDS_ReturnCode_t deserialize_data_from_cdr_buffer(
          DDS_KeyedString *a_data,
          const char * buffer,
          unsigned int length);

    /*e \dref_KeyedStringTypeSupport_data_to_string  
    */
    static DDS_ReturnCode_t data_to_string(
          DDS_KeyedString *sample,
          char *str,
          DDS_UnsignedLong& str_size, 
          const DDS_PrintFormatProperty& property);

    virtual ~DDSKeyedStringTypeSupport();                                               
private:                                                                 
    DDSKeyedStringTypeSupport();                                                        
};


/*e \dref_KeyedStringDataReader
 */
class DDSCPPDllExport DDSKeyedStringDataReader : public DDSDataReader {                                           
                                                                         
  public:                                                                
    DDS_DATAREADER_CPP_PUBLIC_UNTYPED_METHODS();
  public:                                                                

  /*e \dref_KeyedStringDataReader_read
   */
  virtual DDS_ReturnCode_t read(DDS_KeyedStringSeq& received_data,                 
   	DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedStringDataReader_take
   */
  virtual DDS_ReturnCode_t take(DDS_KeyedStringSeq& received_data,                 
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedStringDataReader_read_w_condition
   */
  virtual DDS_ReturnCode_t read_w_condition(DDS_KeyedStringSeq& received_data,     
 				      DDS_SampleInfoSeq& info_seq,       
                                      DDS_Long max_samples,              
 				      DDSReadCondition* condition);      

  /*e \dref_KeyedStringDataReader_take_w_condition
   */
  virtual DDS_ReturnCode_t take_w_condition(DDS_KeyedStringSeq& received_data,     
 				      DDS_SampleInfoSeq& info_seq,       
                                      DDS_Long max_samples,              
 				      DDSReadCondition* condition);      

  /*e \dref_KeyedStringDataReader_read_next_sample
   */
  virtual DDS_ReturnCode_t read_next_sample(DDS_KeyedString & received_data,        
   			  DDS_SampleInfo& sample_info);                  

  /*e \dref_KeyedStringDataReader_take_next_sample
   */
  virtual DDS_ReturnCode_t take_next_sample(DDS_KeyedString & received_data,        
 			  DDS_SampleInfo& sample_info);                  

  /*e \dref_KeyedStringDataReader_read_instance
   */
  virtual DDS_ReturnCode_t read_instance(DDS_KeyedStringSeq& received_data,        
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,           
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedStringDataReader_take_instance
   */
  virtual DDS_ReturnCode_t take_instance(DDS_KeyedStringSeq& received_data,        
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,           
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedStringDataReader_read_instance_w_condition
   */
  virtual DDS_ReturnCode_t read_instance_w_condition(               
        DDS_KeyedStringSeq& received_data,                       
        DDS_SampleInfoSeq& info_seq,                   
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  /*e \dref_KeyedStringDataReader_take_instance_w_condition
   */
  virtual DDS_ReturnCode_t take_instance_w_condition(               
        DDS_KeyedStringSeq& received_data,                       
        DDS_SampleInfoSeq& info_seq,                   
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  /*e \dref_KeyedStringDataReader_read_next_instance
   */
  virtual DDS_ReturnCode_t read_next_instance(DDS_KeyedStringSeq& received_data,   
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,    
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedStringDataReader_take_next_instance
   */
  virtual DDS_ReturnCode_t take_next_instance(DDS_KeyedStringSeq& received_data,   
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,    
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedStringDataReader_read_next_instance_w_condition
   */
  virtual DDS_ReturnCode_t read_next_instance_w_condition(               
        DDS_KeyedStringSeq& received_data,                       
        DDS_SampleInfoSeq& info_seq,                   
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  /*e \dref_KeyedStringDataReader_take_next_instance_w_condition
   */
  virtual DDS_ReturnCode_t take_next_instance_w_condition(               
        DDS_KeyedStringSeq& received_data,                       
        DDS_SampleInfoSeq& info_seq,                   
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  /*e \dref_KeyedStringDataReader_return_loan
   */
  virtual DDS_ReturnCode_t return_loan(DDS_KeyedStringSeq& received_data,          
                          DDS_SampleInfoSeq& info_seq);                  

  /*e \dref_KeyedStringDataReader_get_key_value
   */
  virtual DDS_ReturnCode_t get_key_value(DDS_KeyedString & key_holder,              
                                const DDS_InstanceHandle_t& handle); 

  /*e \dref_KeyedStringDataReader_get_key_value_w_key
    */
  /* Extension */
  virtual DDS_ReturnCode_t get_key_value(
                                char * key,
                                const DDS_InstanceHandle_t& handle);

  /*e \dref_KeyedStringDataReader_lookup_instance
   */
  virtual DDS_InstanceHandle_t lookup_instance(
                                const DDS_KeyedString & key_holder);

  /*e \dref_KeyedStringDataReader_lookup_instance_w_key
  */
  /* Extension */
  virtual DDS_InstanceHandle_t lookup_instance(
                                const char * key);

                                                                         
  public:                                                                
                                                                         
    static DDSKeyedStringDataReader* createI(DDSDataReader* dataReader);              
    static DDS_ReturnCode_t destroyI(DDSKeyedStringDataReader* dataReader);           

    /*e \dref_KeyedStringDataReader_narrow
     */
    static DDSKeyedStringDataReader* narrow(DDSDataReader *reader);                   

  private:                                                               
    virtual DDS_ReturnCode_t read_or_takeI(DDS_KeyedStringSeq& received_data,      
      		DDS_SampleInfoSeq& info_seq,           
      		DDS_Long max_samples,                  
      		DDS_SampleStateMask sample_states,     
      		DDS_ViewStateMask view_states,         
      		DDS_InstanceStateMask instance_states, 
      		bool take);                            

    virtual DDS_ReturnCode_t read_or_take_w_conditionI(                  
      		DDS_KeyedStringSeq& received_data,               
      		DDS_SampleInfoSeq& info_seq,           
      		DDS_Long max_samples,                  
      		DDSReadCondition* condition,           
      		bool take);                            

    virtual DDS_ReturnCode_t read_or_take_next_sampleI(                  
      		DDS_KeyedString& received_data,                  
      		DDS_SampleInfo& sample_info,           
      		bool take);                            

    virtual DDS_ReturnCode_t read_or_take_instanceI(                     
      		DDS_KeyedStringSeq& received_data,               
      		DDS_SampleInfoSeq& info_seq,           
      		DDS_Long max_samples,                  
      		const DDS_InstanceHandle_t& a_handle,  
      		DDS_SampleStateMask sample_states,     
      		DDS_ViewStateMask view_states,         
      		DDS_InstanceStateMask instance_states, 
      		bool take);                            

    virtual DDS_ReturnCode_t read_or_take_instance_w_conditionI(    
      		DDS_KeyedStringSeq& received_data,               
      		DDS_SampleInfoSeq& info_seq,           
      		DDS_Long max_samples,                  
      		const DDS_InstanceHandle_t& previous_handle,    
      		DDSReadCondition* condition,           
      		bool take);                            

    virtual DDS_ReturnCode_t read_or_take_next_instanceI(                
      		DDS_KeyedStringSeq& received_data,               
      		DDS_SampleInfoSeq& info_seq,           
      		DDS_Long max_samples,                  
      		const DDS_InstanceHandle_t& previous_handle,    
      		DDS_SampleStateMask sample_states,     
      		DDS_ViewStateMask view_states,         
      		DDS_InstanceStateMask instance_states, 
      		bool take);                            

    virtual DDS_ReturnCode_t read_or_take_next_instance_w_conditionI(    
      		DDS_KeyedStringSeq& received_data,               
      		DDS_SampleInfoSeq& info_seq,           
      		DDS_Long max_samples,                  
      		const DDS_InstanceHandle_t& previous_handle,    
      		DDSReadCondition* condition,           
      		bool take);                            

  protected:                                                             
                                                                         
    DDSKeyedStringDataReader(DDSDataReader* impl);                                    
                                                                         
  protected:                                                             
  virtual ~DDSKeyedStringDataReader();                                                
};



/*e \dref_KeyedStringDataWriter
*/
class DDSCPPDllExport DDSKeyedStringDataWriter :                
        public DDSDataWriter {                                       
public:                                                              
    DDS_DATAWRITER_CPP_PUBLIC_UNTYPED_METHODS();

    static DDSKeyedStringDataWriter* createI(DDSDataWriter* dataWriter);          
    static DDS_ReturnCode_t destroyI(DDSKeyedStringDataWriter* dataWriter);       

    /*e \dref_KeyedStringDataWriter_narrow
    */
    static DDSKeyedStringDataWriter* narrow(DDSDataWriter *writer);               

    /*e \dref_KeyedStringDataWriter_register_instance
    */
    virtual DDS_InstanceHandle_t register_instance(                  
				const DDS_KeyedString & instance_data);  

    /*e \dref_KeyedStringDataWriter_register_instance_w_key
    */
    /* Extension */
    virtual DDS_InstanceHandle_t register_instance(const char* key);

    /*e \dref_KeyedStringDataWriter_register_instance_w_timestamp
    */
    virtual DDS_InstanceHandle_t register_instance_w_timestamp(      
				const DDS_KeyedString & instance_data,          
				const DDS_Time_t& source_timestamp); 

    /*e \dref_KeyedStringDataWriter_register_instance_w_key_w_timestamp
    */
    /* Extension */
    virtual DDS_InstanceHandle_t register_instance_w_timestamp(
				const char * key,
				const DDS_Time_t & source_timestamp);

    /*i \dref_KeyedStringDataWriter_register_instance_w_params
    */
    virtual DDS_InstanceHandle_t register_instance_w_params(      
				const DDS_KeyedString & instance_data,          
				DDS_WriteParams_t& params); 

    /*i \dref_KeyedStringDataWriter_register_instance_w_key_w_params
    */
    /* Extension */
    virtual DDS_InstanceHandle_t register_instance_w_params(
				const char * key,
				DDS_WriteParams_t & params);

    /*e \dref_KeyedStringDataWriter_unregister_instance
    */
    virtual DDS_ReturnCode_t unregister_instance(                    
				const DDS_KeyedString & instance_data,          
				const DDS_InstanceHandle_t& handle); 

    /*e \dref_KeyedStringDataWriter_unregister_instance_w_key
    */
    /* Extension */
    virtual DDS_ReturnCode_t unregister_instance(
				const char * key, 
				const DDS_InstanceHandle_t & handle);

    /*e \dref_KeyedStringDataWriter_unregister_instance_w_timestamp
    */
    virtual DDS_ReturnCode_t unregister_instance_w_timestamp(        
				const DDS_KeyedString & instance_data,          
				const DDS_InstanceHandle_t& handle,  
				const DDS_Time_t& source_timestamp); 

    /*e \dref_KeyedStringDataWriter_unregister_instance_w_key_w_timestamp
    */
    /* Extension */
    virtual DDS_ReturnCode_t unregister_instance_w_timestamp(
				const char* key, 
				const DDS_InstanceHandle_t & handle,
				const DDS_Time_t & source_timestamp);

    /*i \dref_KeyedStringDataWriter_unregister_instance_w_params
    */
    virtual DDS_ReturnCode_t unregister_instance_w_params(        
				const DDS_KeyedString & instance_data,          
				DDS_WriteParams_t& params); 

    /*i \dref_KeyedStringDataWriter_unregister_instance_w_key_w_params
    */
    /* Extension */
    virtual DDS_ReturnCode_t unregister_instance_w_params(
				const char* key, 
				DDS_WriteParams_t& params);

    /*e \dref_KeyedStringDataWriter_write
    */
    virtual DDS_ReturnCode_t write(                                  
				const DDS_KeyedString & instance_data,          
				const DDS_InstanceHandle_t& handle); 

    /*e \dref_KeyedStringDataWriter_write_string_w_key
    */
    /* Extension */
    virtual DDS_ReturnCode_t write(const char * key,
				   const char * str,
				   const DDS_InstanceHandle_t& handle);

    /*e \dref_KeyedStringDataWriter_write_w_timestamp
    */
    virtual DDS_ReturnCode_t write_w_timestamp(                      
				const DDS_KeyedString & instance_data,          
				const DDS_InstanceHandle_t& handle,  
				const DDS_Time_t& source_timestamp); 

    /*e \dref_KeyedStringDataWriter_write_string_w_key_w_timestamp
    */
    /* Extension */
    virtual DDS_ReturnCode_t write_w_timestamp(
			       const char * key,
			       const char * str,
			       const DDS_InstanceHandle_t& handle,
			       const DDS_Time_t& source_timestamp);

    /*e \dref_KeyedStringDataWriter_write_w_params
    */
    virtual DDS_ReturnCode_t write_w_params(                      
				const DDS_KeyedString & instance_data,          
				DDS_WriteParams_t& params); 

    /*e \dref_KeyedStringDataWriter_write_string_w_key_w_params
    */
    /* Extension */
    virtual DDS_ReturnCode_t write_w_params(
			       const char * key,
			       const char * str,
			       DDS_WriteParams_t& params);

    /*e \dref_KeyedStringDataWriter_dispose
    */
    virtual DDS_ReturnCode_t dispose(                                
				const DDS_KeyedString & instance_data,          
				const DDS_InstanceHandle_t& handle); 

    /*e \dref_KeyedStringDataWriter_dispose_w_key
    */
    /* Extension */
    virtual DDS_ReturnCode_t dispose(
				const char* key,          
				const DDS_InstanceHandle_t & instance_handle);

    /*e \dref_KeyedStringDataWriter_dispose_w_timestamp
    */
    virtual DDS_ReturnCode_t dispose_w_timestamp(                    
			    const DDS_KeyedString & instance_data,              
			    const DDS_InstanceHandle_t& handle,      
			    const DDS_Time_t& source_timestamp);     

    /*e \dref_KeyedStringDataWriter_dispose_w_key_w_timestamp
    */
    /* Extension */
    virtual DDS_ReturnCode_t dispose_w_timestamp(
				const char* key, 
				const DDS_InstanceHandle_t & instance_handle,
				const DDS_Time_t & source_timestamp);

    /*i \dref_KeyedStringDataWriter_dispose_w_params
    */
    virtual DDS_ReturnCode_t dispose_w_params(                    
			    const DDS_KeyedString & instance_data,              
			    DDS_WriteParams_t& params);     

    /*i \dref_KeyedStringDataWriter_dispose_w_key_w_params
    */
    /* Extension */
    virtual DDS_ReturnCode_t dispose_w_params(
				const char* key, 
				DDS_WriteParams_t& params);

    /*e \dref_KeyedStringDataWriter_get_key_value
    */
    virtual DDS_ReturnCode_t get_key_value(                          
			    DDS_KeyedString & key_holder,                       
			    const DDS_InstanceHandle_t& handle);     

    /*e \dref_KeyedStringDataWriter_get_key_value_w_key
    */
    /* Extension */
    virtual DDS_ReturnCode_t get_key_value(
				char * key,
				const DDS_InstanceHandle_t& handle);

    /*e \dref_KeyedStringDataWriter_lookup_instance
    */
    virtual DDS_InstanceHandle_t lookup_instance(                    
				const DDS_KeyedString & key_holder);

    /*e \dref_KeyedStringDataWriter_lookup_instance_w_key
    */
    /* Extension */
    virtual DDS_InstanceHandle_t lookup_instance(
    				const char * key);

protected:                                                           
  DDSKeyedStringDataWriter(DDSDataWriter* impl);                                  
  virtual ~DDSKeyedStringDataWriter();                                            
};



/*e \dref_KeyedOctetsTypeSupport
*/  
class DDSCPPDllExport DDSKeyedOctetsTypeSupport : public DDSTypeSupport {
public:                        
    /*e \dref_KeyedOctetsTypeSupport_register_type
    */  
    static DDS_ReturnCode_t register_type(                                 
				 DDSDomainParticipant* participant,        
				 const char* type_name = "DDS::KeyedOctets");          

    /*e \dref_KeyedOctetsTypeSupport_unregister_type
    */                                                                           
    static DDS_ReturnCode_t unregister_type(                               
				 DDSDomainParticipant* participant,        
				 const char* type_name = "DDS::KeyedOctets");          

    /*e \dref_KeyedOctetsTypeSupport_get_type_name
    */                                                                           
    static const char* get_type_name();		                             

    static DDS_KeyedOctets* create_data(
            const DDS_TypeAllocationParams_t & alloc_params
                = DDS_TYPE_ALLOCATION_PARAMS_DEFAULT);

    static DDS_KeyedOctets* create_data_ex(DDS_Boolean allocatePointers);            

    static DDS_ReturnCode_t delete_data(
              DDS_KeyedOctets* a_data,
              const DDS_TypeDeallocationParams_t & dealloc_params
                  = DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT);

    static DDS_ReturnCode_t delete_data_ex(DDS_KeyedOctets* a_data,                  
		  DDS_Boolean deletePointers);                                     

    /*e \dref_KeyedOctetsTypeSupport_print_data
    */
    static void print_data(const DDS_KeyedOctets* a_data);                           

    static DDS_ReturnCode_t copy_data(DDS_KeyedOctets* dst_data, const DDS_KeyedOctets* src_data); 

    static DDS_ReturnCode_t initialize_data(
               DDS_KeyedOctets* a_data,
               const DDS_TypeAllocationParams_t & alloc_params
                   = DDS_TYPE_ALLOCATION_PARAMS_DEFAULT);

    static DDS_ReturnCode_t initialize_data_ex(DDS_KeyedOctets* a_data,              
	DDS_Boolean allocatePointers);                                     

    static DDS_ReturnCode_t finalize_data(
              DDS_KeyedOctets* a_data,
              const DDS_TypeDeallocationParams_t & dealloc_params
                  = DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT);

    static DDS_ReturnCode_t finalize_data_ex(DDS_KeyedOctets* a_data,                
	    DDS_Boolean deletePointers);                                       

    DDSDataReader* create_datareaderI(DDSDataReader* dataReader); 

    DDS_ReturnCode_t destroy_datareaderI(DDSDataReader* dataReader);       

    DDSDataWriter* create_datawriterI(DDSDataWriter* dataWriter);          

    DDS_ReturnCode_t destroy_datawriterI(DDSDataWriter* dataWriter);       

    static void finalize();                                                

    /* Builtin type extensions */
    static DDS_KeyedOctets * create_data(int key_size, int size);

    static DDS_KeyedOctets * create_data_ex(int key_size, int size, DDS_Boolean allocatePointers);

    static DDS_ReturnCode_t initialize_data(DDS_KeyedOctets * a_data, int key_size, int size);

    static DDS_ReturnCode_t initialize_data_ex(
      DDS_KeyedOctets * a_data, int key_size, int size, DDS_Boolean allocatePointers);
    
    /*e \dref_KeyedOctetsTypeSupport_get_typecode
    */
    static DDS_TypeCode* get_typecode();  
    
    /*e \dref_KeyedOctetsTypeSupport_serialize_data_to_cdr_buffer
    */
    static DDS_ReturnCode_t serialize_data_to_cdr_buffer(
          char * buffer,
          unsigned int & length,
          const DDS_KeyedOctets *a_data);

    /*e \dref_KeyedOctetsTypeSupport_deserialize_data_from_cdr_buffer
    */
    static DDS_ReturnCode_t deserialize_data_from_cdr_buffer(
          DDS_KeyedOctets *a_data,
          const char * buffer,
          unsigned int length);

    /*e \dref_KeyedOctetsTypeSupport_data_to_string  
    */
    static DDS_ReturnCode_t data_to_string(
          DDS_KeyedOctets *sample,
          char *str,
          DDS_UnsignedLong& str_size, 
          const DDS_PrintFormatProperty& property);

    virtual ~DDSKeyedOctetsTypeSupport();
private:                                                                 
    DDSKeyedOctetsTypeSupport();                                                        
};


/*e \dref_KeyedOctetsDataReader
 */
class DDSCPPDllExport DDSKeyedOctetsDataReader : public DDSDataReader {                                           
                                                                         
  public:                                                                
    DDS_DATAREADER_CPP_PUBLIC_UNTYPED_METHODS();
  public:                                                                

  /*e \dref_KeyedOctetsDataReader_read
   */
  virtual DDS_ReturnCode_t read(DDS_KeyedOctetsSeq& received_data,                 
   	DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedOctetsDataReader_take
   */
  virtual DDS_ReturnCode_t take(DDS_KeyedOctetsSeq& received_data,                 
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedOctetsDataReader_read_w_condition
   */
  virtual DDS_ReturnCode_t read_w_condition(DDS_KeyedOctetsSeq& received_data,     
 				      DDS_SampleInfoSeq& info_seq,       
                                      DDS_Long max_samples,              
 				      DDSReadCondition* condition);      

  /*e \dref_KeyedOctetsDataReader_take_w_condition
   */
  virtual DDS_ReturnCode_t take_w_condition(DDS_KeyedOctetsSeq& received_data,     
 				      DDS_SampleInfoSeq& info_seq,       
                                      DDS_Long max_samples,              
 				      DDSReadCondition* condition);      

  /*e \dref_KeyedOctetsDataReader_read_next_sample
   */
  virtual DDS_ReturnCode_t read_next_sample(DDS_KeyedOctets & received_data,        
   			  DDS_SampleInfo& sample_info);                  

  /*e \dref_KeyedOctetsDataReader_take_next_sample
   */
  virtual DDS_ReturnCode_t take_next_sample(DDS_KeyedOctets & received_data,        
 			  DDS_SampleInfo& sample_info);                  

  /*e \dref_KeyedOctetsDataReader_read_instance
   */
  virtual DDS_ReturnCode_t read_instance(DDS_KeyedOctetsSeq& received_data,        
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,           
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedOctetsDataReader_take_instance
   */
  virtual DDS_ReturnCode_t take_instance(DDS_KeyedOctetsSeq& received_data,        
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,           
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedOctetsDataReader_read_instance_w_condition
   */
  virtual DDS_ReturnCode_t read_instance_w_condition(               
        DDS_KeyedOctetsSeq& received_data,                       
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  /*e \dref_KeyedOctetsDataReader_take_instance_w_condition
   */
  virtual DDS_ReturnCode_t take_instance_w_condition(               
        DDS_KeyedOctetsSeq& received_data,                       
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  /*e \dref_KeyedOctetsDataReader_read_next_instance
   */
  virtual DDS_ReturnCode_t read_next_instance(DDS_KeyedOctetsSeq& received_data,   
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,    
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedOctetsDataReader_take_next_instance
   */
  virtual DDS_ReturnCode_t take_next_instance(DDS_KeyedOctetsSeq& received_data,   
        DDS_SampleInfoSeq& info_seq,                                     
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,    
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); 

  /*e \dref_KeyedOctetsDataReader_read_next_instance_w_condition
   */
  virtual DDS_ReturnCode_t read_next_instance_w_condition(               
        DDS_KeyedOctetsSeq& received_data,                       
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  /*e \dref_KeyedOctetsDataReader_take_next_instance_w_condition
   */
  virtual DDS_ReturnCode_t take_next_instance_w_condition(               
        DDS_KeyedOctetsSeq& received_data,                       
        DDS_SampleInfoSeq& info_seq,
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,
        DDSReadCondition* condition = NULL);

  /*e \dref_KeyedOctetsDataReader_return_loan
   */
  virtual DDS_ReturnCode_t return_loan(DDS_KeyedOctetsSeq& received_data,          
                          DDS_SampleInfoSeq& info_seq);                  

  /*e \dref_KeyedOctetsDataReader_get_key_value
   */
  virtual DDS_ReturnCode_t get_key_value(DDS_KeyedOctets & key_holder,              
				    const DDS_InstanceHandle_t& handle); 

  /*e \dref_KeyedOctetsDataReader_get_key_value_w_key
    */
    /* Extension */
    virtual DDS_ReturnCode_t get_key_value(
				char * key,
				const DDS_InstanceHandle_t& handle);

  /*e \dref_KeyedOctetsDataReader_lookup_instance
   */
  virtual DDS_InstanceHandle_t lookup_instance(                          
                                const DDS_KeyedOctets & key_holder);

  /*e \dref_KeyedOctetsDataReader_lookup_instance_w_key
  */
  /* Extension */
  virtual DDS_InstanceHandle_t lookup_instance(
                                const char * key);

  public:                                                                
                                                                         
    static DDSKeyedOctetsDataReader* createI(DDSDataReader* dataReader);              
    static DDS_ReturnCode_t destroyI(DDSKeyedOctetsDataReader* dataReader);           

    /*e \dref_KeyedOctetsDataReader_narrow
     */
    static DDSKeyedOctetsDataReader* narrow(DDSDataReader *reader);                   

  private:                                                               
    virtual DDS_ReturnCode_t read_or_takeI(DDS_KeyedOctetsSeq& received_data,      
      		      DDS_SampleInfoSeq& info_seq,           
      		      DDS_Long max_samples,                  
      		      DDS_SampleStateMask sample_states,     
      		      DDS_ViewStateMask view_states,         
      		      DDS_InstanceStateMask instance_states, 
      		      bool take);                            

    virtual DDS_ReturnCode_t read_or_take_w_conditionI(                  
      		      DDS_KeyedOctetsSeq& received_data,               
      		      DDS_SampleInfoSeq& info_seq,           
      		      DDS_Long max_samples,                  
      		      DDSReadCondition* condition,           
      		      bool take);                            

    virtual DDS_ReturnCode_t read_or_take_next_sampleI(                  
      		      DDS_KeyedOctets& received_data,                  
      		      DDS_SampleInfo& sample_info,           
      		      bool take);                            

    virtual DDS_ReturnCode_t read_or_take_instanceI(                     
      		      DDS_KeyedOctetsSeq& received_data,               
      		      DDS_SampleInfoSeq& info_seq,           
      		      DDS_Long max_samples,                  
      		      const DDS_InstanceHandle_t& a_handle,  
      		      DDS_SampleStateMask sample_states,     
      		      DDS_ViewStateMask view_states,         
      		      DDS_InstanceStateMask instance_states, 
      		      bool take);                            

    virtual DDS_ReturnCode_t read_or_take_instance_w_conditionI(    
      		      DDS_KeyedOctetsSeq& received_data,               
      		      DDS_SampleInfoSeq& info_seq,           
      		      DDS_Long max_samples,                  
                  const DDS_InstanceHandle_t& previous_handle,    
      		      DDSReadCondition* condition,           
      		      bool take);                            

    virtual DDS_ReturnCode_t read_or_take_next_instanceI(                
      		      DDS_KeyedOctetsSeq& received_data,               
      		      DDS_SampleInfoSeq& info_seq,           
      		      DDS_Long max_samples,                  
                  const DDS_InstanceHandle_t& previous_handle,    
      		      DDS_SampleStateMask sample_states,     
      		      DDS_ViewStateMask view_states,         
      		      DDS_InstanceStateMask instance_states, 
      		      bool take);                            

    virtual DDS_ReturnCode_t read_or_take_next_instance_w_conditionI(    
      		      DDS_KeyedOctetsSeq& received_data,               
      		      DDS_SampleInfoSeq& info_seq,           
      		      DDS_Long max_samples,                  
        	      const DDS_InstanceHandle_t& previous_handle,    
      		      DDSReadCondition* condition,           
      		      bool take);                            

  protected:                                                             
                                                                         
    DDSKeyedOctetsDataReader(DDSDataReader* impl);                                    
                                                                         
  protected:                                                             
  virtual ~DDSKeyedOctetsDataReader();                                                
};


/*e \dref_KeyedOctetsDataWriter
*/
class DDSCPPDllExport DDSKeyedOctetsDataWriter :                
        public DDSDataWriter {                                       
public:                                                              
    DDS_DATAWRITER_CPP_PUBLIC_UNTYPED_METHODS();

    static DDSKeyedOctetsDataWriter* createI(DDSDataWriter* dataWriter);          
    static DDS_ReturnCode_t destroyI(DDSKeyedOctetsDataWriter* dataWriter);       

    /*e \dref_KeyedOctetsDataWriter_narrow
    */
    static DDSKeyedOctetsDataWriter* narrow(DDSDataWriter *writer);               

    /*e \dref_KeyedOctetsDataWriter_register_instance
    */
    virtual DDS_InstanceHandle_t register_instance(                  
				const DDS_KeyedOctets & instance_data);     

    /*e \dref_KeyedOctetsDataWriter_register_instance_w_key
    */
    virtual DDS_InstanceHandle_t register_instance(const char* key);

    /*e \dref_KeyedOctetsDataWriter_register_instance_w_timestamp
    */
    virtual DDS_InstanceHandle_t register_instance_w_timestamp(      
				const DDS_KeyedOctets & instance_data,          
				const DDS_Time_t& source_timestamp); 

    /*e \dref_KeyedOctetsDataWriter_register_instance_w_key_w_timestamp
    */
    virtual DDS_InstanceHandle_t register_instance_w_timestamp(
				    const char * key,
				    const DDS_Time_t & source_timestamp);

    /*i \dref_KeyedOctetsDataWriter_register_instance_w_params
    */
    virtual DDS_InstanceHandle_t register_instance_w_params(      
				const DDS_KeyedOctets & instance_data,          
				DDS_WriteParams_t& params); 

    /*i \dref_KeyedOctetsDataWriter_register_instance_w_key_w_params
    */
    virtual DDS_InstanceHandle_t register_instance_w_params(
				    const char * key,
				    DDS_WriteParams_t & params);

    /*e \dref_KeyedOctetsDataWriter_unregister_instance
    */
    virtual DDS_ReturnCode_t unregister_instance(                    
				const DDS_KeyedOctets & instance_data,          
				const DDS_InstanceHandle_t& handle); 

    /*e \dref_KeyedOctetsDataWriter_unregister_instance_w_key
    */
    virtual DDS_ReturnCode_t unregister_instance(
				    const char * key, 
				    const DDS_InstanceHandle_t & handle);

    /*e \dref_KeyedOctetsDataWriter_unregister_instance_w_timestamp
    */
    virtual DDS_ReturnCode_t unregister_instance_w_timestamp(        
				const DDS_KeyedOctets & instance_data,          
				const DDS_InstanceHandle_t& handle,  
				const DDS_Time_t& source_timestamp);

    /*e \dref_KeyedOctetsDataWriter_unregister_instance_w_timestamp
    */
    virtual DDS_ReturnCode_t unregister_instance_w_timestamp(
				    const char* key, 
				    const DDS_InstanceHandle_t & handle,
				    const DDS_Time_t & source_timestamp);

    /*i \dref_KeyedOctetsDataWriter_unregister_instance_w_params
    */
    virtual DDS_ReturnCode_t unregister_instance_w_params(        
				const DDS_KeyedOctets & instance_data,          
				DDS_WriteParams_t& params);

    /*i \dref_KeyedOctetsDataWriter_unregister_instance_w_params
    */
    virtual DDS_ReturnCode_t unregister_instance_w_params(
				    const char* key, 
				    DDS_WriteParams_t & params);

    /*e \dref_KeyedOctetsDataWriter_write
    */
    virtual DDS_ReturnCode_t write(                                  
				const DDS_KeyedOctets & instance_data,          
				const DDS_InstanceHandle_t& handle); 

    /*e \dref_KeyedOctetsDataWriter_write_octets_w_key
    */
    virtual DDS_ReturnCode_t write(const char * key,
				   const unsigned char * octets,
				   int length,
				   const DDS_InstanceHandle_t& handle);

    /*e \dref_KeyedOctetsDataWriter_write_octets_seq_w_key
    */
    virtual DDS_ReturnCode_t write(const char * key,
				   const DDS_OctetSeq & octets,
				   const DDS_InstanceHandle_t & handle);

    /*e \dref_KeyedOctetsDataWriter_write_w_timestamp
    */
    virtual DDS_ReturnCode_t write_w_timestamp(                      
				const DDS_KeyedOctets & instance_data,          
				const DDS_InstanceHandle_t& handle,  
				const DDS_Time_t& source_timestamp); 

    /*e \dref_KeyedOctetsDataWriter_write_octets_w_key_w_timestamp
    */
    virtual DDS_ReturnCode_t write_w_timestamp(
				   const char * key,
				   const unsigned char * octets,
				   int length,
				   const DDS_InstanceHandle_t& handle,
				   const DDS_Time_t& source_timestamp);

    /*e \dref_KeyedOctetsDataWriter_write_octets_seq_w_key_w_timestamp
    */
    virtual DDS_ReturnCode_t write_w_timestamp(
				    const char * key,
				    const DDS_OctetSeq & octets,
				    const DDS_InstanceHandle_t & handle,   
				    const DDS_Time_t & source_timestamp);

    /*e \dref_KeyedOctetsDataWriter_write_w_params
    */
    virtual DDS_ReturnCode_t write_w_params(                      
				const DDS_KeyedOctets & instance_data,          
				DDS_WriteParams_t& params); 

    /*e \dref_KeyedOctetsDataWriter_write_octets_w_key_w_params
    */
    virtual DDS_ReturnCode_t write_w_params(
				   const char * key,
				   const unsigned char * octets,
				   int length,
				   DDS_WriteParams_t& params);

    /*e \dref_KeyedOctetsDataWriter_write_octets_seq_w_key_w_params
    */
    virtual DDS_ReturnCode_t write_w_params(
				    const char * key,
				    const DDS_OctetSeq & octets,
				    DDS_WriteParams_t& params);

    /*e \dref_KeyedOctetsDataWriter_dispose
    */
    virtual DDS_ReturnCode_t dispose(                                
				const DDS_KeyedOctets & instance_data,          
				const DDS_InstanceHandle_t& handle); 

    /*e \dref_KeyedOctetsDataWriter_dispose_w_key
    */
    virtual DDS_ReturnCode_t dispose(const char* key,          
				     const DDS_InstanceHandle_t & instance_handle);

    /*e \dref_KeyedOctetsDataWriter_dispose_w_timestamp
    */
    virtual DDS_ReturnCode_t dispose_w_timestamp(                    
			    const DDS_KeyedOctets & instance_data,              
			    const DDS_InstanceHandle_t& handle,      
			    const DDS_Time_t& source_timestamp); 

    /*e \dref_KeyedOctetsDataWriter_dispose_w_key_w_timestamp
    */
    virtual DDS_ReturnCode_t dispose_w_timestamp(
				    const char* key, 
				    const DDS_InstanceHandle_t & instance_handle,
				    const DDS_Time_t & source_timestamp);

    /*i \dref_KeyedOctetsDataWriter_dispose_w_params
    */
    virtual DDS_ReturnCode_t dispose_w_params(                    
			    const DDS_KeyedOctets & instance_data,              
			    DDS_WriteParams_t& params); 

    /*i \dref_KeyedOctetsDataWriter_dispose_w_key_w_params
    */
    virtual DDS_ReturnCode_t dispose_w_params(
				    const char* key, 
				    DDS_WriteParams_t & params);

    /*e \dref_KeyedOctetsDataWriter_get_key_value
    */
    virtual DDS_ReturnCode_t get_key_value(                          
			    DDS_KeyedOctets & key_holder,                       
			    const DDS_InstanceHandle_t& handle);  

    /*e \dref_KeyedOctetsDataWriter_get_key_value_w_key
    */
    virtual DDS_ReturnCode_t get_key_value(
				    char * key,
				    const DDS_InstanceHandle_t& handle);

    /*e \dref_KeyedOctetsDataWriter_lookup_instance
    */
    virtual DDS_InstanceHandle_t lookup_instance(                    
				const DDS_KeyedOctets & key_holder);

    /*e \dref_KeyedOctetsDataWriter_lookup_instance_w_key
    */
    virtual DDS_InstanceHandle_t lookup_instance(
				    const char * key);
protected:                                                           
  DDSKeyedOctetsDataWriter(DDSDataWriter* impl);                                  
  virtual ~DDSKeyedOctetsDataWriter();                                            
};


#endif /* dds_cpp_builtintypes_h */
