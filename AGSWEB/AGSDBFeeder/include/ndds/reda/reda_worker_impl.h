/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)reda_worker_impl.h    generated by: makeheader    Fri Feb 16 13:51:16 2018
 *
 *		built from:	worker_impl.ifc
 */

#ifndef reda_worker_impl_h
#define reda_worker_impl_h


  #ifndef reda_inlineList_h
    #include "reda/reda_inlineList.h"
  #endif
#ifndef osapi_thread_h
    #include "osapi/osapi_thread.h"
  #endif

 #ifndef osapi_thread_h
    #include "osapi/osapi_thread.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


struct REDAWorker {
    /*i node in list inside WorkerFactory */
    struct REDAInlineListNode _node;
    /*i optional name (for informational purposes only) */
    const char *_name;
    /*i The manager */
    struct REDAWorkerFactory  *_manager;
    /*i An array pointing to worker-specific objects. */
    void **_workerSpecificObject;
    /*i A linked list of the EAs this worker is currently in */
    struct REDAInlineList _inEA;
    /*i Highest level of inEA's */
    int _inEAMaxLevel;
};


struct REDAObjectPerWorker {
    /*i optional name (for informational purposes only) */
    const char *_name;
    /*i the index of this object in the worker's array */
    int _objectIndex;
    /*i the constructor */
    REDAObjectPerWorkerConstructor _constructor;
    /*i the constructor param */
    void *_constructorParameter;
    /*i the destructor */
    REDAObjectPerWorkerDestructor _destructor;
    /*i the destructor param */
    void *_destructorParameter;
};


struct REDAWorkerPerThread {
    /*i @brief Factory used to create workers */
    struct REDAWorkerFactory * _workerFactory;
    RTIBool _ownsFactory;    
    /*i
     * @brief   Thread-specific storage key for a worker.
     */
    RTI_UINT32                 _workerTssKey;
    /*i
     * @brief Used to generate thread-specific-storage keys
     */
    RTIOsapiThreadTssFactory * _tssFactory;
    RTIBool _ownsTss;
};



/* ----------------------------------------------------------------- */
#define REDAWorker_getName(worker) worker->_name

/* ----------------------------------------------------------------- */
#define REDAWorker_getFactory(worker) worker->_manager

/* ----------------------------------------------------------------- */
#define REDAWorker_getObjectMacro(worker, objectPerWorker) \
    ((worker)->_workerSpecificObject[(objectPerWorker)->_objectIndex])

/* ----------------------------------------------------------------- */
#define REDAWorker_assertObjectMacro(worker, objectPerWorker)            \
    ( (REDAWorker_getObjectMacro((worker), (objectPerWorker)) != NULL) ? \
      (REDAWorker_getObjectMacro((worker), (objectPerWorker))) :         \
      ((worker)->_workerSpecificObject[(objectPerWorker)->_objectIndex] =\
	 (*((objectPerWorker)->_constructor))(                           \
	            (objectPerWorker)->_constructorParameter, worker))   \
    )

/* ----------------------------------------------------------------- */
#define REDAWorker_destroyObjectMacro(worker,                            \
                                      objectPerWorker,                   \
                                      callingThreadWorker)               \
    (*((objectPerWorker)->_destructor))(                                 \
            REDAWorker_getObjectMacro((worker), (objectPerWorker)),      \
            (objectPerWorker)->_destructorParameter,                     \
            callingThreadWorker);                                        \
    ((worker)->_workerSpecificObject[(objectPerWorker)->_objectIndex]) = NULL

/* ----------------------------------------------------------------- */
#ifndef RTI_PRECONDITION_TEST
  #define REDAWorker_getObject     REDAWorker_getObjectMacro
  #define REDAWorker_assertObject  REDAWorker_assertObjectMacro
  #define REDAWorker_destroyObject REDAWorker_destroyObjectMacro
#endif /* !RTI_PRECONDITION_TEST */



#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* reda_worker_impl_h */
