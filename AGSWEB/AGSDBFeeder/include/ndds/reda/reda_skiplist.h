/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)reda_skiplist.h    generated by: makeheader    Fri Feb 16 13:51:18 2018
 *
 *		built from:	skiplist.ifc
 */

#ifndef reda_skiplist_h
#define reda_skiplist_h


  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef reda_dll_h
    #include "reda/reda_dll.h"
  #endif
  #ifndef reda_orderedDataType_h
    #include "reda/reda_orderedDataType.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

struct REDASkiplistNode; /* forward declare to appease compiler */

typedef struct REDASkiplistNode *
(*REDASkiplistNodeCreateFunction)(char level, void *parameter);

typedef void
(*REDASkiplistNodeDestroyFunction)(void *parameter, 
                                   struct REDASkiplistNode *node);

typedef int
(*REDASkiplistNodeLevelGenerateFunction)(void *parameter, 
                                         char maximumLevel,
					 int nodeCount);

extern REDADllExport int REDASkiplist_sizeOfSkiplistNode(char level);

struct REDASkiplistDescription; /* forward declare to appease compiler */

extern REDADllExport void REDASkiplistDescription_init(
    struct REDASkiplistDescription *desc,
    char maximumLevel,
    REDASkiplistNodeCreateFunction nodeCreateFnc,
    void *nodeCreateParam,
    REDASkiplistNodeDestroyFunction nodeDestroyFnc,
    void *nodeDestroyParam,
    REDASkiplistNodeLevelGenerateFunction nodeLevelGenerateFnc,
    void *nodeLevelGenerateParam);

extern REDADllExport char
REDASkiplist_getOptimumMaximumLevel(int expectedNodeCount);

extern REDADllExport
RTIBool REDASkiplist_newDefaultAllocator(
    struct REDASkiplistDescription *desc,
    char maximumLevel, 
    int initialNumberOfNodes);

extern REDADllExport
void REDASkiplist_deleteDefaultAllocator(
    struct REDASkiplistDescription *desc);

extern REDADllExport
RTIBool REDASkiplist_newDefaultAllocatorSafe(
    struct REDASkiplistDescription *desc,
    char maximumLevel, 
    int initialNumberOfNodes);

extern REDADllExport
void REDASkiplist_deleteDefaultAllocatorSafe(
    struct REDASkiplistDescription *desc);

struct REDASkiplist; /*forward declare to appease compiler */


extern	char REDASkiplistNode_getUserChar(const struct REDASkiplistNode *node);


extern	int REDASkiplistNode_getUserInt(const struct REDASkiplistNode *node);


extern	void *REDASkiplistNode_getUserData(const struct REDASkiplistNode *node);

extern REDADllExport 
void REDASkiplist_deleteNode(const struct REDASkiplist *self,
			     struct REDASkiplistNode *node);


  #define REDA_SKIPLIST_LEVEL_MAX_UPPER_LIMIT (31)

extern REDADllExport 
void REDASkiplist_finalize(struct REDASkiplist *self);

extern REDADllExport 
void REDASkiplist_delete(struct REDASkiplist *self);

extern REDADllExport
RTIBool REDASkiplist_init(
    struct REDASkiplist *self,
    const struct REDASkiplistDescription *desc,
    REDAOrderedDataTypeCompareFunction compareFnc,
    void *topUserData, 
    int topUserInt,
    char  topUserChar);

extern REDADllExport
RTIBool REDASkiplist_init_ex(
    struct REDASkiplist *self,
    const struct REDASkiplistDescription *desc,
    REDAOrderedDataTypeCompareWithUserDataFunction compareWithUserDataFnc,
    void * userData,
    void *topUserData, 
    int topUserInt,
    char  topUserChar);

extern REDADllExport
struct REDASkiplist *REDASkiplist_new(
    const struct REDASkiplistDescription *desc,
    REDAOrderedDataTypeCompareFunction compareFnc,
    void *topUserData, 
    int topUserInt, 
    char  topUserChar);

extern REDADllExport
struct REDASkiplist *REDASkiplist_new_ex(
    const struct REDASkiplistDescription *desc,
    REDAOrderedDataTypeCompareWithUserDataFunction compareWithUserDataFnc,
    void * userData,
    void *topUserData, 
    int topUserInt, 
    char  topUserChar);

extern REDADllExport void
REDASkiplist_gotoTopNode(const struct REDASkiplist *self,
                         const struct REDASkiplistNode **topNode);

extern REDADllExport RTIBool
REDASkiplist_gotoLastNode(const struct REDASkiplist *self,
                          const struct REDASkiplistNode **lastNode);

extern REDADllExport
RTIBool
REDASkiplist_gotoNextNode(const struct REDASkiplist *self,
                          const struct REDASkiplistNode **node);

extern REDADllExport
RTIBool
REDASkiplist_gotoPreviousNode(struct REDASkiplist *self,
                              const struct REDASkiplistNode **node);

extern REDADllExport
int REDASkiplist_getNodeCount(const struct REDASkiplist *self);

extern REDADllExport
void REDASkiplist_findNode(const struct REDASkiplist *self,
                           const struct REDASkiplistNode **answer,
                           RTIBool *preciseMatch, void *searchUserData);

extern REDADllExport const struct REDASkiplistNode *
REDASkiplist_assertNodeEA(struct REDASkiplist *self, RTIBool *alreadyExists, 
                          void *userData, int userInt, char userChar);

extern REDADllExport const struct REDASkiplistNode *
REDASkiplist_addNonExistingNodeAtEndEA(struct REDASkiplist *self,
                                       void *userData, int userInt, char userChar);

extern REDADllExport const struct REDASkiplistNode *
REDASkiplist_removeNodeEA(struct REDASkiplist *self, void *searchUserData);

extern REDADllExport 
void REDASkiplist_clearEA(struct REDASkiplist *self);

extern REDADllExport
char REDASkiplist_getLevel(const struct REDASkiplist *self);

extern REDADllExport
RTIBool REDASkiplist_isInitialized(const struct REDASkiplist *self);


struct REDASkiplistInfo {
    void* skiplistId;
    int   numberOfNodes;
    int   nodesAtLevel[REDA_SKIPLIST_LEVEL_MAX_UPPER_LIMIT+1];
    int   listLevel;
    int   maxListLevel;
    int   memoryConsumption;
};

extern REDADllExport struct REDASkiplistInfo *
REDASkiplistInfo_new(struct REDASkiplist *redaSkiplist);

extern REDADllExport void
REDASkiplistInfo_delete(struct REDASkiplistInfo *info);

extern REDADllExport void
REDASkiplistInfo_print(struct REDASkiplistInfo *info, int indent,
		       int verbosity);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

/* pick up hidden performance boosting macros and optimizations */
  #include "reda/reda_skiplist_impl.h"

#endif /* reda_skiplist_h */
