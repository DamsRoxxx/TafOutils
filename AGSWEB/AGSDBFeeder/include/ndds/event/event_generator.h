/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)event_generator.h    generated by: makeheader    Fri Feb 16 13:51:30 2018
 *
 *		built from:	generator.ifc
 */

#ifndef event_generator_h
#define event_generator_h

struct RTIClock;

struct RTINtpTime;

struct REDAWorker;

struct RTIEventGeneratorListener;

struct RTIEventGenerator;


  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef reda_fastBuffer_h
    #include "reda/reda_fastBuffer.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


/* RTPS 2.0: match larger MIG interpreter storage */
#define RTI_EVENT_GENERATOR_LISTENER_STORAGE_LENGTH (8)

struct RTIEventGeneratorListenerStorage {
    void *field[RTI_EVENT_GENERATOR_LISTENER_STORAGE_LENGTH];
};

typedef RTIBool (*RTIEventGeneratorListenerOnEventCallback)(
    const struct RTIEventGeneratorListener *me,
    struct RTINtpTime *newTime, struct RTINtpTime *newSnooze,
    const struct RTINtpTime *now, const struct RTINtpTime *time,
    const struct RTINtpTime *snooze,
    const struct RTIEventGeneratorListenerStorage *listenerStorage,
    struct REDAWorker *worker);

struct RTIEventGeneratorListener {
    /*e Generator will call this method for the fired event */
    RTIEventGeneratorListenerOnEventCallback onEvent;
};

struct RTIEventGeneratorProperty {
    /*e For performance, the generator creates events from a fast buffer pool
       to avoid allocating memory dynamically.  The fast buffer needs a hint
       for the initial pool size.  If there will be many events, the initial
       pool should be appropriately large.
    */
    struct REDAFastBufferPoolGrowthProperty growth;
};


#define RTI_EVENT_GENERATOR_PROPERTY_DEFAULT { \
    {100, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED} }


#define RTI_EVENT_GENERATOR_POST_NEW_EVENT (0)

typedef RTIBool (*RTIEventGeneratorEventPostFunction)(
    struct RTIEventGenerator *me,
    const struct RTINtpTime *time, const struct RTINtpTime *snooze,
    const struct RTIEventGeneratorListener *listener,
    const struct RTIEventGeneratorListenerStorage *listenerStorage,
    int bytesToCompareIfReuse);

struct RTIEventGenerator {
    /*e Schedule future event */
    RTIEventGeneratorEventPostFunction postEvent;
};


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* event_generator_h */
